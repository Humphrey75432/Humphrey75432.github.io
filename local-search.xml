<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/05/03/hello-world/"/>
    <url>/2022/05/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go设计哲学</title>
    <link href="/2022/05/01/golang/go-design/"/>
    <url>/2022/05/01/golang/go-design/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Less is more，少即是多。这就是Go语言的设计哲学</p></blockquote><p>这篇我们讲一些有关Go语言的设计哲学，这将有助你于学习Go语言的人理解这门语言的设计初衷以及它在实际应用领域中所能发挥的作用和局限性。</p><h1 id="一、面向对象"><a href="#一、面向对象" class="headerlink" title="一、面向对象"></a>一、面向对象</h1><h2 id="1-1-如何理解面向对象"><a href="#1-1-如何理解面向对象" class="headerlink" title="1.1 如何理解面向对象"></a>1.1 如何理解面向对象</h2><p>如果你是从C++，C#或者Java过来的程序员，你肯定疑惑过这个问题，Go语言中没有类似于<code>class</code>，<code>extends</code>以及<code>implements</code>的关键字，那是不是意味着Go语言就不支持面向对象了呢？</p><p>答案肯定是否定的，我们来对比一下Go和Java的区别：</p><div class="table-container"><table><thead><tr><th>语言特性</th><th>Go</th><th>Java</th></tr></thead><tbody><tr><td>继承父类</td><td>使用结构体组合来实现类似于class的方式</td><td>使用<code>extends</code>关键字</td></tr><tr><td>实现接口</td><td>定义<code>interface</code>，方法签名实现即可</td><td>使用<code>implements</code>关键字实现接口</td></tr></tbody></table></div><p>综上所述：Go语言使用了“组合优于继承”的方式实现面向对象的特性。我们用一个例子来演示说明：</p><h2 id="1-2-简单的继承关系"><a href="#1-2-简单的继承关系" class="headerlink" title="1.2 简单的继承关系"></a>1.2 简单的继承关系</h2><p>一个人有姓名和年龄的基本属性，同时人又分男女。所以我们就用这个例子来演示：</p><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Male</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;M&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Female</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Go实现"><a href="#Go实现" class="headerlink" title="Go实现"></a>Go实现</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Person <span class="hljs-keyword">struct</span> &#123;<br>    name <span class="hljs-type">string</span><br>    age  <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">type</span> Male <span class="hljs-keyword">struct</span> &#123;<br>    gender <span class="hljs-type">string</span><br>    Person<br>&#125;<br><br><span class="hljs-keyword">type</span> Female <span class="hljs-keyword">struct</span> &#123;<br>    gender <span class="hljs-type">string</span><br>    Person<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出，Go语言使用组合<code>Person</code>结构体的方式实现了对父类属性的重用，可以看出这种约定方式相比于Java来说要更加松散。</p><h2 id="1-3-所以Go是面向对象语言吗？"><a href="#1-3-所以Go是面向对象语言吗？" class="headerlink" title="1.3 所以Go是面向对象语言吗？"></a>1.3 所以Go是面向对象语言吗？</h2><p>按照Google官方的回答，Go语言是，也不是（——经典的薛定谔回答）；</p><p>主要从下面这几点来总结：</p><ul><li>Go有类型和方法，并且允许面向对象的编程风格，没有层次概念（所以是OOP）；</li><li>Go中提供了“接口”的概念，以及将类型嵌套至其他类型中，以提供类似于类却不同于类的特性；</li><li>Go中的方法比C++和Java中的方法更加通用，它们不仅可以为结构体定义，也可以为任何内置类型定义。（这点就不像C++和Java那样具备强约束力了）；</li><li>由于缺乏类型层次，所以Go语言中的对象要比其他编程语言中的对象更轻巧；</li></ul><h1 id="二、并发相关的设计哲学"><a href="#二、并发相关的设计哲学" class="headerlink" title="二、并发相关的设计哲学"></a>二、并发相关的设计哲学</h1><h2 id="2-1-可重入锁"><a href="#2-1-可重入锁" class="headerlink" title="2.1 可重入锁"></a>2.1 可重入锁</h2><p>在工程中使用互斥的根本原因是：为了保护不变量，也可以用于保护内、外部的不变量。</p><p>基于此，Go在互斥锁设计上会遵循下面这几个原则。如下：</p><ul><li>调用<code>mutex.Lock()</code>方法时，要保证这些变量的不变性保持，不会在后续过程中被破坏；</li><li>调用<code>mutex.Unlock()</code>方法时，要保证程序不需要再依赖那些不变量；以及如果在互斥加锁期间破坏了它们，则需要确保已经恢复了它们；</li></ul><p>结合官方例子来解释这个问题：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">F</span><span class="hljs-params">()</span></span> &#123;<br>    mu.Lock()<br>    --- do more stuff ---<br>    G()<br>    --- do more stuff ---<br>    mu.Unlock()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">G</span><span class="hljs-params">()</span></span> &#123;<br>    mu.Lock()<br>    --- do more stuff ---<br>    mu.Unlock()<br>&#125;<br></code></pre></td></tr></table></figure><p>假如支持可重入锁，那么在<code>F()</code>方法执行完毕后就会跳到<code>G()</code>方法中，但是问题在于：<strong>你完全不知道<code>F</code>和<code>G</code>方法在加锁后是不是做了什么事情</strong>。从而导致破坏了不变量。</p><p>综上所述：Go语言不支持可重入锁，因为可重入锁会违反前面所提到的设计理念。因此要保证这些变量的不变性保持，不会在后续过程中被破坏。</p><h2 id="2-2-并发读写"><a href="#2-2-并发读写" class="headerlink" title="2.2 并发读写"></a>2.2 并发读写</h2><p>Go语言中的slice和map是非线程安全的。可以通过下面两个例子来说明：</p><h3 id="（1）Slice并发"><a href="#（1）Slice并发" class="headerlink" title="（1）Slice并发"></a>（1）Slice并发</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> s []<span class="hljs-type">string</span><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9999</span>; i++ &#123;<br>            s = <span class="hljs-built_in">append</span>(s, i)<br>        &#125;<br>    &#125;()<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Len is %d\n&quot;</span>, <span class="hljs-built_in">len</span>(s))<br></code></pre></td></tr></table></figure><p>这段程序每次执行都会发现结果不一样，但确定的是，slice的长度无论如何都达不到9999，很显然，一个协程写的数据被其他的协程覆盖了。导致其出现非线程安全的情况。</p><p>很显然，Go语言的设计者在一开始设计切片就希望不会在并发情况下使用，按照Java的逻辑，对容器中元素的维护需要对其索引进行修改，这对于Go语言这种追求极简方式的设计哲学格格不入。所以官方就没有对其实现。</p><h3 id="（2）Map的并发"><a href="#（2）Map的并发" class="headerlink" title="（2）Map的并发"></a>（2）Map的并发</h3><p>我们再来看一下Map对并发情况的支持如何：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    s := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>)<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">99</span>; i++ &#123;<br>            s[<span class="hljs-string">&quot;Name&quot;</span>] = <span class="hljs-string">&quot;Time&quot;</span><br>        &#125;<br>    &#125;()<br>&#125;<br>fmt.Printf(<span class="hljs-string">&quot;Total is %d times\n&quot;</span>, <span class="hljs-built_in">len</span>(s))<br></code></pre></td></tr></table></figure><p>这段程序直接执行会报错。错误如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">fatal error: concurrent map writes<br><br>goroutine 52 [running]:<br>runtime.throw(&#123;0x10a5618?, 0x0?&#125;)<br>/usr/local/go/src/runtime/panic.go:992 +0x71 fp=0xc000123748 sp=0xc000123718 pc=0x102f0f1<br>runtime.mapassign_faststr(0x0?, 0x0?, &#123;0x10a2b55, 0x4&#125;)<br>/usr/local/go/src/runtime/map_faststr.go:212 +0x39c fp=0xc0001237b0 sp=0xc000123748 pc=0x101009c<br>main.main.func1(<br>/golang_learning/concurrent/unsafe2.go:10 +0x30 fp=0xc0001237e0 sp=0xc0001237b0 pc=0x108ad30<br>runtime.goexit()<br>/usr/local/go/src/runtime/asm_amd64.s:1571 +0x1 fp=0xc0001237e8 sp=0xc0001237e0 pc=0x105a521<br>created by main.main<br></code></pre></td></tr></table></figure><p>可以看出，Go语言设计者对Map也不支持并发操作。因为Go官方不支持Map读写。原因如下：</p><ul><li>map的典型使用场景不需要从goroutine中进行安全访问；</li><li>非典型场景：map可能只是一些更大的数据结构已经同步计算的一部分；</li><li>性能场景考虑：若只是为少数程序添加安全性，导致Map的所有处理都需要Mutex操作，将会极大降低程序的性能</li></ul><p>综上所述，Go官方认为map不需要支持并发访问。</p><p>那如果我非要使用并发访问Map应该怎么做呢？可以使用Go语言支持的<code>sync.Map</code>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> m sync.Map<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>data := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;Hello1&quot;</span>, <span class="hljs-string">&quot;Hello2&quot;</span>, <span class="hljs-string">&quot;Hello3&quot;</span>, <span class="hljs-string">&quot;Hello4&quot;</span>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++ &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br>m.Store(i, data[i])<br>&#125;(i)<br>&#125;<br>time.Sleep(time.Second)<br><br>v, ok := m.Load(<span class="hljs-number">0</span>)<br>fmt.Printf(<span class="hljs-string">&quot;Load: %v, %v\n&quot;</span>, v, ok)<br><br>m.Delete(<span class="hljs-number">1</span>)<br><br>v, ok = m.LoadOrStore(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Fuck2&quot;</span>)<br>fmt.Printf(<span class="hljs-string">&quot;Load: %v, %v\n&quot;</span>, v, ok)<br><br>m.Range(<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key, value any)</span></span> <span class="hljs-type">bool</span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Range: %v, %v\n&quot;</span>, key, value)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Golang入门教程</title>
    <link href="/2022/03/23/golang/go-lang-basic/"/>
    <url>/2022/03/23/golang/go-lang-basic/</url>
    
    <content type="html"><![CDATA[<h1 id="一、这篇文章的目的"><a href="#一、这篇文章的目的" class="headerlink" title="一、这篇文章的目的"></a>一、这篇文章的目的</h1><p>按照以前的惯例，我们会把Golang的语法贴在这里，其实网上（包括官网）都有非常详细的Go语言教程，学习过程中可以多实践使用。这里我写一些使用中在语法上比较少涉及到的点。方便在使用过程快速回忆。当然golang本身也不复杂，上手也比较简单，如果有需要可以对照网上的教程重新温习。</p><h1 id="二、golang基础"><a href="#二、golang基础" class="headerlink" title="二、golang基础"></a>二、golang基础</h1><h2 id="2-1-类型"><a href="#2-1-类型" class="headerlink" title="2.1 类型"></a>2.1 类型</h2><ul><li>布尔值<ul><li><strong>bool</strong></li></ul></li><li>字符串<ul><li><strong>string</strong></li></ul></li><li>整型<ul><li><strong>int</strong> / <strong>int8</strong> / <strong>int16</strong> / <strong>int32</strong> / <strong>int64</strong></li><li><strong>uint</strong> / <strong>uint8</strong> / <strong>uint16</strong> / <strong>uint32</strong> / <strong>uint64</strong> / <strong>uintptr</strong></li></ul></li><li>字节类型（uint8别名）<ul><li><strong>byte</strong></li></ul></li><li>Unicode类型（int32别名）<ul><li><strong>rune</strong></li></ul></li><li>浮点类型<ul><li><strong>float32</strong> / <strong>float64</strong></li></ul></li><li>复数类型<ul><li><strong>complex64</strong> / <strong>complex128</strong></li></ul></li></ul><h2 id="2-2-关键字汇总"><a href="#2-2-关键字汇总" class="headerlink" title="2.2 关键字汇总"></a>2.2 关键字汇总</h2><p>golang关键字只有25个，非常容易掌握。写习惯面向对象的你可以很容易上手学习</p><ul><li>第一组<ul><li><strong>break</strong>（退出循环） / <strong>case</strong>（Switch语句） / <strong>chan</strong>（通道） / <strong>const</strong>（常量） / <strong>continue</strong>（跳过当前循环）</li></ul></li><li>第二组<ul><li><strong>default</strong>（Switch语句） / <strong>defer</strong>（先定义后执行） / <strong>else</strong>（分支） / <strong>fallthrough</strong>（Switch语句） / <strong>for</strong>（循环）</li></ul></li><li>第三组<ul><li><strong>func</strong>（函数定义） / <strong>go</strong>（开启Goroutine） / <strong>goto</strong>（流程） / <strong>if</strong>（条件） / <strong>import</strong>（导包）</li></ul></li><li>第四组<ul><li><strong>interface</strong>（接口或者泛型定义） / <strong>map</strong> / <strong>package</strong> / <strong>range</strong>（基于范围的遍历） / <strong>return</strong>（返回）</li></ul></li><li>第五组<ul><li><strong>select</strong>（在通道使用） / <strong>struct</strong>（结构体） / <strong>switch</strong>（分支语句） / <strong>type</strong>（定义类型） / <strong>var</strong>（声明变量）</li></ul></li></ul><h2 id="2-3-包的导入导出"><a href="#2-3-包的导入导出" class="headerlink" title="2.3 包的导入导出"></a>2.3 包的导入导出</h2><p>与Java不同的是，Go语言是通过名字大小写来判定当前函数/变量是否导出。如果是小写开头就意味着不导出；如果是大写开头就意味着是导出包。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 未导出</span><br>math.pi<br><br><span class="hljs-comment">// 已导出</span><br>math.Pi<br></code></pre></td></tr></table></figure><h2 id="2-4-变量声明方式"><a href="#2-4-变量声明方式" class="headerlink" title="2.4 变量声明方式"></a>2.4 变量声明方式</h2><p>与我们常用的C，C++，Java，JavaScript不同的是，Golang的变量类型是放在变量名的后面的。这点在写习惯了Java等编程语言的人来说，早期会感到不适应。但是随着你使用上习惯了，自然而然就能接受。具体如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 借助var关键字声明变量</span><br><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span><br><br><span class="hljs-comment">// 自动推断类型，这里一定要注意，如果前面没有创建过变量i，必须使用&quot;:=&quot;符号</span><br>i := <span class="hljs-number">34</span><br><br><span class="hljs-comment">// 多个变量初始化</span><br><span class="hljs-keyword">const</span> (<br>i <span class="hljs-type">int</span><br>    j <span class="hljs-type">bool</span><br>    k <span class="hljs-type">string</span><br>)<br></code></pre></td></tr></table></figure><h2 id="2-5-类型转换"><a href="#2-5-类型转换" class="headerlink" title="2.5 类型转换"></a>2.5 类型转换</h2><p>表达式<code>T(V)</code>将值<code>v</code>转换为类型<code>T</code>，这里提供一些关于数值转换的例子供你参考：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span> = <span class="hljs-number">42</span><br><span class="hljs-keyword">var</span> f <span class="hljs-type">float64</span> = <span class="hljs-type">float64</span>(i)<br><span class="hljs-keyword">var</span> u <span class="hljs-type">uint</span> = <span class="hljs-type">uint</span>(f)<br></code></pre></td></tr></table></figure><p>或者使用更加简单的形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">42</span><br>f := <span class="hljs-type">float64</span>(i)<br>u := <span class="hljs-type">uint</span>(f)<br></code></pre></td></tr></table></figure><h2 id="2-6-函数"><a href="#2-6-函数" class="headerlink" title="2.6 函数"></a>2.6 函数</h2><p>跟Java不同的是，Go语言中的函数可以返回多个值，例如让你写一个交换两值的函数，在Java下你会这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    System.out.printf(<span class="hljs-string">&quot;Before Swap is: %d, %d&quot;</span>, x, y);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> x;<br>    x = y;<br>    y = tmp;<br>    System.out.println(<span class="hljs-string">&quot;After Swap is: %d, %d&quot;</span>, x, y);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是在Go语言下，你只需要这样写就可以实现一样的效果了：</p><blockquote><p>可以发现：在golang中函数的返回值也是放在函数尾部的，这和我们Java的语法存在不同，需要注意</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">swap</span><span class="hljs-params">(x, y <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>    <span class="hljs-keyword">return</span> y, x<br>&#125;<br></code></pre></td></tr></table></figure><p>Go语言的返回值可以被命名，它们会被视作定义在函数顶部的变量，简而言之就是：没有参数的<code>return</code>语句返回已命名的返回值。也就是直接返回。例如：</p><blockquote><p>直接返回语句应当仅用在短函数中，过长的函数代码反而会影响代码可读性</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">split</span><span class="hljs-params">(sum <span class="hljs-type">int</span>)</span></span> (x, y <span class="hljs-type">int</span>) &#123;<br>    x = sum * <span class="hljs-number">4</span> / <span class="hljs-number">9</span><br>    y = sum - x<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7-for循环"><a href="#2-7-for循环" class="headerlink" title="2.7 for循环"></a>2.7 for循环</h2><p>Go语言中只有一种循环结构，就是for，它的语法跟Java、C++很像。唯一的区别就是循环两侧不需要括号。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 标准的for循环</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;&#125;<br><br><span class="hljs-comment">// Go语言中的While循环</span><br><span class="hljs-keyword">for</span> sum &lt; <span class="hljs-number">100</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>除此之外，还可以使用for循环迭代切片和map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> slice []<span class="hljs-type">int</span> = []<span class="hljs-type">int</span>&#123; <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span> &#125;<br><span class="hljs-comment">// 迭代切片</span><br><span class="hljs-keyword">for</span> index, value := <span class="hljs-keyword">range</span> slice &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;索引为：%d，数值为：%d\n&quot;</span>, index, value);<br>&#125;<br><br><span class="hljs-comment">// 如果不想获取索引，可以使用&quot;_&quot;将其屏蔽</span><br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> slice &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;索引为：%d，数值为：%d\n&quot;</span>, index, value);<br>&#125;<br><br><span class="hljs-comment">// 迭代map</span><br><span class="hljs-keyword">var</span> stock_map <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span> = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<br><span class="hljs-string">&quot;iPhone 13 Pro&quot;</span>: <span class="hljs-number">345</span>,<br><span class="hljs-string">&quot;One Plus&quot;</span>:      <span class="hljs-number">21</span>,<br><span class="hljs-string">&quot;Realme&quot;</span>:        <span class="hljs-number">34</span>,<br>&#125;<br><br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> stock_map &#123;<br>fmt.Printf(<span class="hljs-string">&quot;Key: %v, value: %d\n&quot;</span>, k, v)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、数组、切片和Map"><a href="#三、数组、切片和Map" class="headerlink" title="三、数组、切片和Map"></a>三、数组、切片和Map</h1><h2 id="3-1-数组"><a href="#3-1-数组" class="headerlink" title="3.1 数组"></a>3.1 数组</h2><p>类型<code>[n]T</code>表示拥有n个T类型的值数组，语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">10</span>]<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>具体实例如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">2</span>]<span class="hljs-type">string</span><br>a[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;hello&quot;</span><br>a[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;world&quot;</span><br><br>primes := [<span class="hljs-number">6</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-切片"><a href="#3-2-切片" class="headerlink" title="3.2 切片"></a>3.2 切片</h2><p>由于数组的大小是固定的，所以使用切片为数组元素提供动态大小、灵活的视角。在具体的开发实践中，切片比数组更加常用。具体语法如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">a[low:high]<br></code></pre></td></tr></table></figure><p>它会选择一个半开区间，包括第一个元素但排除最后一个元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 代表a数组从下标1到3的元素（不包括4）</span><br>a[<span class="hljs-number">1</span>:<span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure><p>切片并不存储任何数据，它仅仅是描述了底层数组中的一段，而且<strong>更改切片中的元素会修改其底层数组</strong>中对应的元素；除此之外，切片的下界默认为0，上界是该切片的长度。因此好好理解一下下列切片代表的含义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br><br>s = s[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>] <span class="hljs-comment">// 下界为0，上界为6</span><br>fmt.Println(s)<br><br>s = s[:<span class="hljs-number">6</span>] <span class="hljs-comment">// 下界默认为0，可以不写</span><br>fmt.Println(s)<br><br>s = s[<span class="hljs-number">0</span>:] <span class="hljs-comment">// 上界默认为6，可以不写</span><br>fmt.Println(s)<br><br>s = s[:] <span class="hljs-comment">// 下界为0，上界为6</span><br>fmt.Println(s)<br>    <br>    <span class="hljs-comment">// 输出结果均为[ 2, 3, 5, 7, 11, 13 ]</span><br>&#125;<br></code></pre></td></tr></table></figure><p>切片有长度和容量，长度就是其所包含的元素个数，容量是从第一个元素开始数，到其底层数组元素的末尾个数。获取长度可以用<code>len(s)</code>，获取容量使用<code>cap(s)</code>。可以通过重新切片来扩展一个切片。给它提供足够的容量。</p><p>一个没有初始化的切片为nil切片，长度和容量均为0且没有底层数组（这就意味着有数据的切片存在一个底层数组，我们后面专门从底层讲讲切片）</p><p>创建切片可以使用内建的<code>make</code>函数来完成，也是用于创建动态数组的方式。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)<br>printSlice(<span class="hljs-string">&quot;a&quot;</span>, a) <span class="hljs-comment">// [0 0 0 0 0]</span><br><br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br>printSlice(<span class="hljs-string">&quot;b&quot;</span>, b) <span class="hljs-comment">// []</span><br><br>c := b[:<span class="hljs-number">2</span>]<br>printSlice(<span class="hljs-string">&quot;c&quot;</span>, c) <span class="hljs-comment">// [0 0]</span><br><br>d := c[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>printSlice(<span class="hljs-string">&quot;d&quot;</span>, d) <span class="hljs-comment">// [0 0 0]</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printSlice</span><span class="hljs-params">(s <span class="hljs-type">string</span>, x []<span class="hljs-type">int</span>)</span></span> &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;%s len=%d, cap=%d %v\n&quot;</span>, s, <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">cap</span>(s), x)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-1-切片的切片"><a href="#3-2-1-切片的切片" class="headerlink" title="3.2.1 切片的切片"></a>3.2.1 切片的切片</h3><p>切片可以包含任何类型，甚至是包括其它切片，记录一下基本的使用：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// board本身为一个切片，切片中每个元素又为一个切片</span><br>    board := [][]<span class="hljs-type">string</span>&#123;<br>        []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>&#125;,<br>        []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>&#125;,<br>        []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>, <span class="hljs-string">&quot;_&quot;</span>&#125;,<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-2-向切片中追加元素"><a href="#3-2-2-向切片中追加元素" class="headerlink" title="3.2.2 向切片中追加元素"></a>3.2.2 向切片中追加元素</h3><p><code>Go</code>提供了内建的<code>append</code>函数，可以对已有切片进行元素的追加操作，具体使用事例如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> s []<span class="hljs-type">int</span><br>    printSlice(s)<br>    <br>    s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">0</span>)<br>    printSlice(s)<br>    <br>    s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">1</span>)<br>    printSlice(s)<br>    <br>    s = <span class="hljs-built_in">append</span>(s, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>    printSlice(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printSlice</span><span class="hljs-params">(s []<span class="hljs-type">int</span>)</span></span> &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">cap</span>(s), s);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-3-使用range循环切片"><a href="#3-2-3-使用range循环切片" class="headerlink" title="3.2.3 使用range循环切片"></a>3.2.3 使用range循环切片</h3><p><code>for</code>循环的<code>range</code>形式可以遍历切片或映射，需要注意的是每次循环都会出现两个值，第一个值为当前元素的下标，第二个值为下标对应元素的副本，如果想要忽略下标，可以使用<code>_</code>符号；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> pow = []<span class="hljs-type">int</span>&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-number">64</span>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> pow &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;2**%d = %d\n&quot;</span>, i, v)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-Map"><a href="#3-3-Map" class="headerlink" title="3.3 Map"></a>3.3 Map</h2><p>这种数据结构在熟悉不过了，如果你用过Java，那你应该对它很熟悉，介绍一下它的基本用法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>    Lat, Long <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-keyword">var</span> m <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]Vertex <span class="hljs-comment">// 括号内为key的类型，括号外为value的类型，前面使用map关键字修饰</span><br><br>m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]Vertex)<br>m[<span class="hljs-string">&quot;Bell Labs&quot;</span>] = Vertex&#123;<br>    <span class="hljs-number">40.68433</span>, <span class="hljs-number">-74.39967</span><br>&#125;<br><br><span class="hljs-comment">//还可以忽略顶级类型名</span><br><span class="hljs-keyword">var</span> m = <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]Vertex&#123;<br>    <span class="hljs-string">&quot;Bell Labs&quot;</span>: &#123;<span class="hljs-number">40.68443</span>, <span class="hljs-number">-74.36883</span>&#125;,<br>    <span class="hljs-string">&quot;Google&quot;</span>:    &#123;<span class="hljs-number">37.43323</span>, <span class="hljs-number">-122.08448</span>&#125;,<br>&#125;<br><br><span class="hljs-comment">// 修改也很简单</span><br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>)<br>m[<span class="hljs-string">&quot;Answer&quot;</span>] = <span class="hljs-number">42</span> <span class="hljs-comment">// 修改Key为Answer的值</span><br><span class="hljs-built_in">delete</span>(m, <span class="hljs-string">&quot;Answer&quot;</span>) <span class="hljs-comment">// 删除Key为Answer的值</span><br>v, ok := m[<span class="hljs-string">&quot;Answer&quot;</span>] <span class="hljs-comment">// 判断Answer的key是否存在</span><br></code></pre></td></tr></table></figure><h1 id="四、函数"><a href="#四、函数" class="headerlink" title="四、函数"></a>四、函数</h1><h2 id="4-1-函数也可以成为参数或者返回值"><a href="#4-1-函数也可以成为参数或者返回值" class="headerlink" title="4.1 函数也可以成为参数或者返回值"></a>4.1 函数也可以成为参数或者返回值</h2><p>这也是Go语言面向函数式编程的核心思想，还有一个重要的概念叫闭包。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// compute为函数类型</span><br><span class="hljs-comment">// compute的函数参数为一个名为fn的函数，其接收两个函数参数， fn函数的返回值也为float64类型</span><br><span class="hljs-comment">// 返回值直接返回的也是函数类型</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compute</span><span class="hljs-params">(fn <span class="hljs-keyword">func</span>(<span class="hljs-type">float64</span>, <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span>) <span class="hljs-type">float64</span> &#123;<br>    <span class="hljs-keyword">return</span> fn(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    hypot := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br>        <span class="hljs-keyword">return</span> math.Sqrt(x*x + y*y)<br>    &#125;<br>    fmt.Println(hypot(<span class="hljs-number">5</span>, <span class="hljs-number">12</span>))<br>    fmt.Println(compute(hypot))<br>    fmt.Println(compute(math.Pow))<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-函数的闭包"><a href="#4-2-函数的闭包" class="headerlink" title="4.2 函数的闭包"></a>4.2 函数的闭包</h2><p>Go函数可以是一个闭包，闭包是一个函数值，其引用了其函数体之外的变量，该函数也可以访问并赋予其引用的变量值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adder</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>    sum := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>        sum += x<br>        <span class="hljs-keyword">return</span> sum<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 两个闭包都绑定在各自的sum变量上</span><br>    pos, neg := adder(), adder()<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        fmt.Println(pos(i), neg(<span class="hljs-number">-2</span>*i))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用闭包实现斐波那契数列的算法可以这样写：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>    back1, back2 := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    <span class="hljs-comment">// 闭包返回的是具体的函数，所以这里也要返回函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>        temp := back1<br>        back1, back2 = back2, (back1 + back2)<br>        <span class="hljs-keyword">return</span> temp<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    f := fibonacci()<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        fmt.Println(f())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="五、方法"><a href="#五、方法" class="headerlink" title="五、方法"></a>五、方法</h1><h2 id="5-1-基本概念"><a href="#5-1-基本概念" class="headerlink" title="5.1 基本概念"></a>5.1 基本概念</h2><p>这里我们对照面向对象的思想，Go语言中没有“类”这个概念，所以我们一般可以借助结构体来定义方法。这个概念很重要，因为后面我们的很多面向对象的特性都是基于方法这个概念进行开展的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>    X, Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-comment">// Vertex有一个方法，接收者为Vertex，可以理解为这个方法是Vertex的成员方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Vertex)</span></span> Abs() <span class="hljs-type">float64</span> &#123;<br>    <span class="hljs-keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)<br>&#125;<br></code></pre></td></tr></table></figure><p>和一般的函数区别在于，方法在<code>func</code>关键字和方法名之间有一个参数列表，我们称之为<code>方法接收者</code></p><h2 id="5-2-指针接收者"><a href="#5-2-指针接收者" class="headerlink" title="5.2 指针接收者"></a>5.2 指针接收者</h2><p>可以为指针接收者声明方法，意味着对于某类型<code>T</code>，接收者可以是<code>*T</code>的文法。指针接收者的方法可以修改接收者指向的值。由于方法经常需要修改接收者，指针接收者比值接收者更加常用。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>    X, Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Vertex)</span></span> Scale(f <span class="hljs-type">float64</span>) &#123;<br>    v.X = v.X * f<br>    v.Y = v.Y * f<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，你也可以使用函数来实现<code>Scale</code>方法，效果和使用指针接收器是一样的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>    X, Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-comment">// 需要注意的是：如果涉及值修改，必须使用指针接收对象，否则值不会发生变化</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Scale</span><span class="hljs-params">(v *Vertex, f <span class="hljs-type">float64</span>)</span></span> &#123;<br>    v.X = v.X * f<br>    v.Y = v.Y * f<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以得出一个结论：（在接收者参数类型上，值和指针满足交换律）</p><ul><li>以指针为接收者的方法被调用时，接收者既可以为值，又可以为指针；</li><li>以值为接收者的方法被调用时，接收者既可以为值又可以为指针；</li></ul><h2 id="5-3-什么时候使用指针接收者"><a href="#5-3-什么时候使用指针接收者" class="headerlink" title="5.3 什么时候使用指针接收者"></a>5.3 什么时候使用指针接收者</h2><ul><li>方法能够修改其接收者指向的值</li><li>避免每次调用方法调用进行大对象复制，特别是大型结构体，这样做更显得更加高效</li></ul><h1 id="六、接口-interface"><a href="#六、接口-interface" class="headerlink" title="六、接口(interface)"></a>六、接口(interface)</h1><h2 id="6-1-基本概念"><a href="#6-1-基本概念" class="headerlink" title="6.1 基本概念"></a>6.1 基本概念</h2><p>接口类型是一组方法签名定义的集合，接口类型的变量可以保存任何实现了这些方法的值。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> I <span class="hljs-keyword">interface</span> &#123;<br>    M()<br>&#125;<br><br><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span> &#123;<br>    S <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-comment">// 此方法表示类型T实现了接口I，但是不需要显式声明</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t T)</span></span> M() &#123;<br>    fmt.Println(t.S)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> i T = T&#123;<span class="hljs-string">&quot;Hello&quot;</span>&#125;<br>    i.M()<br>&#125;<br></code></pre></td></tr></table></figure><p>类型通过实现一个接口的所有方法来实现该接口，既然无需专门显式声明，也就没有<code>implements</code>关键字。</p><p>隐式接口从接口的实现解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</p><h2 id="6-2-接口值"><a href="#6-2-接口值" class="headerlink" title="6.2 接口值"></a>6.2 接口值</h2><p>接口也可以像其他值一样传递，可以用作函数的参数或者返回值，接口值保存了一个具体底层类型的具体值，接口值调用方法时会执行其底层类型的同名方法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> I <span class="hljs-keyword">interface</span> &#123;<br>    M()<br>&#125;<br><br><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span> &#123;<br>    S <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *T)</span></span> M() &#123;<br>    fmt.Println(t.S)<br>&#125;<br><br><span class="hljs-keyword">type</span> F <span class="hljs-type">float64</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f F)</span></span> M() &#123;<br>    fmt.Println(f)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> i I<br>    <br>    <span class="hljs-comment">// 类似于面向接口编程</span><br>    i = &amp;T&#123;<span class="hljs-string">&quot;Hello&quot;</span>&#125;<br>    i.M()<br>    <br>    i = F(math.Pi)<br>    i.M()<br>&#125;<br></code></pre></td></tr></table></figure><p>nil接口值既不保存值也不保存具体类型，空接口<code>interface&#123;&#125;</code>可以保存任何类型的值，因此可以用于处理未知类型的值。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125;<br>    describe(i)<br>    <br>    i = <span class="hljs-number">42</span><br>    describe(i)<br>    <br>    i = <span class="hljs-string">&quot;Hello&quot;</span><br>    describe(i)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;(%v, %T)\n&quot;</span>, i, i)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-3-类型断言"><a href="#6-3-类型断言" class="headerlink" title="6.3 类型断言"></a>6.3 类型断言</h2><p>类型断言提供了访问接口值底层具体值的方式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">t, ok := i.(T)<br></code></pre></td></tr></table></figure><p>该语句断言的接口值<code>i</code>保存了具体类型<code>T</code>，并将其底层类型为<code>T</code>的值赋予变量<code>t</code>。为了判断一个接口值是否保存了一个特定类型，类型断言可以返回两个值：其底层值以及一个报告断言是否成功的布尔值。这里的语句和Map中的用法是一样的。例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125; = <span class="hljs-string">&quot;hello&quot;</span><br>    <br>    s := i.(<span class="hljs-type">string</span>)<br>    fmt.Println(s)<br>    <br>    s, ok := i.(<span class="hljs-type">string</span>)<br>    fmt.Println(s, ok)<br>    <br>    f, ok := i.(<span class="hljs-type">float64</span>)<br>    fmt.Println(f, ok)<br>    <br>    f = i.(<span class="hljs-type">float64</span>)<br>    fmt.Println(f)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-4-类型选择"><a href="#6-4-类型选择" class="headerlink" title="6.4 类型选择"></a>6.4 类型选择</h2><p>类型选择是一种按照顺序从几个类型断言中选择分支的结构，类型选择一般与switch语句相似，不过类型选择中的case为类型（而非值），它们针对给定接口值所存储的值类型进行比较。其中<code>type</code>是固定写法。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> v := i.(<span class="hljs-keyword">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> T:<br>    <span class="hljs-comment">// v的类型为T</span><br><span class="hljs-keyword">case</span> S:<br>    <span class="hljs-comment">// v的类型为S</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// 没有匹配，v与i的类型相同</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="七、异常处理"><a href="#七、异常处理" class="headerlink" title="七、异常处理"></a>七、异常处理</h1><p>Go语言使用<code>error</code>来表示错误状态（想想和Java中的有什么不同呢？），通常函数会返回一个<code>error</code>值，调用它的代码应当判断这个错误是否等于<code>nil</code>来处理错误，如果<code>error</code>为nil表示成功，否则表示失败；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> MyError <span class="hljs-keyword">struct</span> &#123;<br>When time.Time<br>What <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *MyError)</span></span> Error() <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;at %v, %s&quot;</span>, e.When, e.What)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> <span class="hljs-type">error</span> &#123;<br><span class="hljs-keyword">return</span> &amp;MyError&#123;time.Now(), <span class="hljs-string">&quot;it didn&#x27;t work&quot;</span>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> err := run(); err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="八、Reader"><a href="#八、Reader" class="headerlink" title="八、Reader"></a>八、Reader</h1><p>io包指定了<code>io.Reader</code>接口，它表示从数据流的末尾进行读取，并且Go的标准库也包含了该接口的许多实现，包括文件、网络连接、压缩和加密。</p><h2 id="8-1-字符读取"><a href="#8-1-字符读取" class="headerlink" title="8.1 字符读取"></a>8.1 字符读取</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;strings&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>r := strings.NewReader(<span class="hljs-string">&quot;Hello, Reader!&quot;</span>)<br><br>b := <span class="hljs-built_in">make</span>([]<span class="hljs-type">byte</span>, <span class="hljs-number">8</span>)<br><span class="hljs-keyword">for</span> &#123;<br>n, err := r.Read(b)<br>fmt.Printf(<span class="hljs-string">&quot;n = %v err = %v b = %v\n&quot;</span>, n, err, b)<br>fmt.Printf(<span class="hljs-string">&quot;b[:n] = %q\n&quot;</span>, b[:n])<br><span class="hljs-keyword">if</span> err == io.EOF &#123;<br><span class="hljs-keyword">break</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="九、并发"><a href="#九、并发" class="headerlink" title="九、并发"></a>九、并发</h1><h2 id="9-1-协程"><a href="#9-1-协程" class="headerlink" title="9.1 协程"></a>9.1 协程</h2><p>协程（Goroutine）是由Go运行时管理的轻量级线程，Goroutine在相同的地址空间中运行，因此在访问共享内存时必须进行同步。<code>sync</code>包提供了这种能力，不过在Goroutine中并不常见。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">say</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++ &#123;<br>        time.Sleep(<span class="hljs-number">100</span> * time.Millisecond)<br>        fmt.Println(s)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">go</span> say(<span class="hljs-string">&quot;word&quot;</span>)<br>    say(<span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-2-channel通道"><a href="#9-2-channel通道" class="headerlink" title="9.2 channel通道"></a>9.2 channel通道</h2><p>通道是带有类型的管道，可以使用信道操作符<code>&lt;-</code>来发送或者接收值（PS：“箭头”就是数据流的方向）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">ch &lt;- v <span class="hljs-comment">// 将v发送至信道ch</span><br>v := &lt;- ch <span class="hljs-comment">// 从ch接收值并赋予v</span><br></code></pre></td></tr></table></figure><p>信道和切片一样，使用前必须创建，使用make函数来创建：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br></code></pre></td></tr></table></figure><p>默认情况下，发送和接收操作在另一端准备好之前都会阻塞，这就意味着Goroutine可以在没有显式锁或者竞态变量的情况下进行同步；</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span><span class="hljs-params">(s []<span class="hljs-type">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br>    sum := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> s &#123;<br>        sum += v<br>    &#125;<br>    c &lt;- sum<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>&#125;<br>    c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>    <span class="hljs-keyword">go</span> sum(s[:<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>], c)<br>    <span class="hljs-keyword">go</span> sum(s[<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>:], c)<br>    x, y := &lt;-c, &lt;-c<br>    <br>    fmt.Println(x, y, x+y)<br>&#125;<br></code></pre></td></tr></table></figure><p>channel可以带缓冲区，有了缓冲区后，仅当信道的缓冲区填满后，向其发送数据时才会阻塞。当缓冲区为空时，接收方会阻塞。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">2</span>)<br>    ch &lt;- <span class="hljs-number">1</span><br>    ch &lt;- <span class="hljs-number">2</span><br>    fmt.Println(&lt;-ch)<br>    fmt.Println(&lt;-ch)<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是：仅当信道的缓冲区填满了以后，向其发送数据时才会阻塞，当缓冲区为空的时候，接受方会阻塞</p><p>发送者可以通过<code>close</code>关闭一个信道表示没有需要发送的值了，接收者可以通过为接收表达式分配第二个参数来测试信道是否被关闭；若没有值可以接收且信道已被关闭，那么执行结束后状态就会改成false。</p><blockquote><ol><li>只有发送者才能关闭信道，接收者不能</li><li>向一个已经关闭的信道发送数据会触发panic；</li><li>信道与文件不同，通常情况下不需要关闭，只有在必须告诉接收者不再有需要发送的值才有必要关闭，例如<strong>终止range循环</strong></li></ol></blockquote><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(n <span class="hljs-type">int</span>, c <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br>x, y := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; n; i++ &#123;<br>c &lt;- x<br>x, y = y, x+y<br>&#125;<br>    <span class="hljs-comment">// 当所有的值传输完后关闭通道</span><br><span class="hljs-built_in">close</span>(c)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>, <span class="hljs-number">10</span>)<br><span class="hljs-keyword">go</span> fibonacci(<span class="hljs-built_in">cap</span>(c), c)<br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> c &#123;<br>fmt.Println(i)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-3-select语句"><a href="#9-3-select语句" class="headerlink" title="9.3 select语句"></a>9.3 select语句</h2><p>select语句可以使得一个goroutine等待多个信道操作，select语句会阻塞某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci2</span><span class="hljs-params">(c, quit <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)</span></span> &#123;<br>x, y := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> c &lt;- x:<br>x, y = y, x+y<br><span class="hljs-keyword">case</span> &lt;-quit:<br>fmt.Println(<span class="hljs-string">&quot;quit&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br>quit := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">int</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(&lt;-c)<br>&#125;<br>quit &lt;- <span class="hljs-number">0</span><br>&#125;()<br>fibonacci2(c, quit)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当<code>select</code>中的其他分支都没准备好时，<code>default</code>分支就会执行，为了尝试发送或者接收时不发生阻塞，可使用<code>default</code>分支：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>tick := time.Tick(<span class="hljs-number">100</span> * time.Millisecond)<br>boom := time.After(<span class="hljs-number">500</span> * time.Millisecond)<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> &lt;-tick:<br>fmt.Println(<span class="hljs-string">&quot;tick.&quot;</span>)<br><span class="hljs-keyword">case</span> &lt;-boom:<br>fmt.Println(<span class="hljs-string">&quot;BOOM!&quot;</span>)<br><span class="hljs-keyword">return</span><br><span class="hljs-keyword">default</span>:<br>fmt.Println(<span class="hljs-string">&quot;    .&quot;</span>)<br>time.Sleep(<span class="hljs-number">50</span> * time.Millisecond)<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务后端开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈Spring AOP</title>
    <link href="/2022/03/04/spring/spring-aop/"/>
    <url>/2022/03/04/spring/spring-aop/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Spring-AOP"><a href="#什么是Spring-AOP" class="headerlink" title="什么是Spring AOP"></a>什么是Spring AOP</h1><h2 id="你可能遇到过这样的需求"><a href="#你可能遇到过这样的需求" class="headerlink" title="你可能遇到过这样的需求"></a>你可能遇到过这样的需求</h2><p>假设要你统计一个方法执行的耗时情况，你会怎么做？</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runTask</span><span class="hljs-params">()</span> &#123;<br>    doSomething();<br>&#125;<br></code></pre></td></tr></table></figure><p>相信这个肯定难不倒你，那还不简单，在这个方法的执行前后两个时间戳，方法执行结束计算一下不是就能知道耗时了吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runTask</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> Syste.currentTimeMills();<br>    doSomething();<br>    System.out.println(<span class="hljs-string">&quot;方法执行耗时：&quot;</span> + System.currentTimeMills() - start / <span class="hljs-number">1000</span> + <span class="hljs-string">&quot; s&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>但是弊端也非常明显，直接将非业务功能和业务功能耦合在一起，成本非常大；稍有不慎就会出错；那么解决这个问题的方法是什么呢？就是AOP（面向切面编程）；</p><blockquote><p>不用AOP，用你想到的设计模式怎么解决呢？</p><ul><li>将原对象通过组合包装到一个代理对象中；</li><li>生成一个代理对象去包裹我们需要包含非业务的代码；</li><li>在新创建的方法中再调用具体目标对象的方法；</li></ul></blockquote><h2 id="AOP的基本概念"><a href="#AOP的基本概念" class="headerlink" title="AOP的基本概念"></a>AOP的基本概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>面向切面编程，是一种编程思想。用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装多个模块并命名为切面；面向切面编程使用的是动态代理实现的；</p><blockquote><p>我们常用的有：打印日志、权限认证等场景；并且AOP需要解决下面几个问题：</p><ul><li>在什么地方进行切面操作</li><li>需要知道切面操作的具体内容</li><li>如果存在多个切面，怎样定义执行先后顺序</li></ul></blockquote><h3 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h3><p>AOP下包含几个重要的概念，需要理解：</p><ul><li><strong>JointPoint（连接点）：</strong>具体的切面点，可以是字段、方法、Spring具体表现为PointCut（切入点），仅作用在方法上；</li><li><strong>Advice（通知）：</strong>在连接点进行的具体操作，如何进行处理增强，分为前置，后置，异常，最终和环绕；</li><li><strong>目标对象：</strong>被AOP框架进行增强处理的对象，也被称为被增强对象；</li><li><strong>AOP代理：</strong>AOP框架创建的代理对象，代理就是对被目标对象的加强，Spring中的代理既可以是JDK动态代理，也可以是cglib动态代理；</li><li><strong>Weaving：</strong>将增强处理添加到目标对象中，创建一个被增强的对象过程；</li></ul><blockquote><p>一句话总结：在目标对象（target object）上的某些方法（jointpoint）添加不同种类的操作（通知、增强处理），最后通过某些方法（weaving、织入）实现一个新的代理目标对象；</p></blockquote><h1 id="怎样实现Spring-AOP"><a href="#怎样实现Spring-AOP" class="headerlink" title="怎样实现Spring AOP"></a>怎样实现Spring AOP</h1><p>Spring AOP的使用非常简单，我们以Spring框架为例：</p><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>比较关键的两个依赖是：</p><ul><li>spring-aop</li><li>spring-aspects</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;java&#x27;</span><br>&#125;<br><br>group <span class="hljs-string">&#x27;org.example&#x27;</span><br>version <span class="hljs-string">&#x27;1.0-SNAPSHOT&#x27;</span><br><br>repositories &#123;<br>    maven &#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span> &#125;<br>    mavenLocal()<br>    mavenCentral()<br>&#125;<br><br>dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;org.springframework:spring-core:5.3.16&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework:spring-beans:5.3.16&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework:spring-tx:5.3.16&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework:spring-context:5.3.16&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework:spring-aop:5.3.16&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework:spring-aspects:5.3.16&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.junit.jupiter:junit-jupiter-api:5.6.0&#x27;</span><br>    testRuntimeOnly <span class="hljs-string">&#x27;org.junit.jupiter:junit-jupiter-engine&#x27;</span><br>&#125;<br><br>test &#123;<br>    useJUnitPlatform()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建目标Bean（被增强对象）"><a href="#创建目标Bean（被增强对象）" class="headerlink" title="创建目标Bean（被增强对象）"></a>创建目标Bean（被增强对象）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestBean</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Testing&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setStr</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-built_in">this</span>.str = str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建切面（Aspect）"><a href="#创建切面（Aspect）" class="headerlink" title="创建切面（Aspect）"></a>创建切面（Aspect）</h2><p>这里需要注意几部分：</p><ul><li>切面要交给Spring容器管理，然后使用<code>@Aspect</code>注解来修饰；</li><li>我们定义一个方法来存放切点，并且用<code>@Pointcut</code>注解修饰；</li><li>创建Advice方法，也就是我们在被增强的对象执行前，后会做什么事情；这个就不再描述了；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Aspect</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogAspect</span> &#123;<br><br>    <span class="hljs-comment">// 这里的意思是当前包下的所有对象中的方法都会被增强</span><br>    <span class="hljs-meta">@Pointcut(&quot;execution(* com.hhp.spring..*(..))&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">allMethod</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">// 我们在这里获取被增强的类名和方法名，执行打印输出</span><br>    <span class="hljs-meta">@Before(&quot;allMethod()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(className + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;()开始执行...&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 此处同上，不再赘述</span><br>    <span class="hljs-meta">@After(&quot;allMethod()&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">after</span><span class="hljs-params">(JoinPoint joinPoint)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> joinPoint.getTarget().getClass().getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">methodName</span> <span class="hljs-operator">=</span> joinPoint.getSignature().getName();<br>        System.out.println(className + <span class="hljs-string">&quot;.&quot;</span> + methodName + <span class="hljs-string">&quot;()执行结束...&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p>我们编写一个启动类看看效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);<br>        <span class="hljs-type">TestBean</span> <span class="hljs-variable">testBean</span> <span class="hljs-operator">=</span> (TestBean) ctx.getBean(<span class="hljs-string">&quot;testBean&quot;</span>);<br>        System.out.println(testBean.getStr());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>控制台输出结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">com.hhp.spring.beans.TestBean.getStr()开始执行...<br>com.hhp.spring.beans.TestBean.getStr()执行结束...<br>Testing<br></code></pre></td></tr></table></figure><h1 id="透过底层代码看Spring-AOP"><a href="#透过底层代码看Spring-AOP" class="headerlink" title="透过底层代码看Spring AOP"></a>透过底层代码看Spring AOP</h1><h2 id="它是怎么工作的？"><a href="#它是怎么工作的？" class="headerlink" title="它是怎么工作的？"></a>它是怎么工作的？</h2><p>我们透过源代码来看看在配置类上添加<code>@EnableAspectJAutoProxy</code>注解就可以实现AOP功能，Spring在背后帮我们做了什么工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Registers an AnnotationAwareAspectJAutoProxyCreator against the current BeanDefinitionRegistry as appropriate based on a given @EnableAspectJAutoProxy annotation.</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">AspectJAutoProxyRegister</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span> &#123;<br>    <span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(</span><br><span class="hljs-params">AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;<br><br>AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);<br><br><span class="hljs-type">AnnotationAttributes</span> <span class="hljs-variable">enableAspectJAutoProxy</span> <span class="hljs-operator">=</span><br>AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>英文注释的意思是：</strong>通过指定注释<code>@EnableAspectJAutoProxy</code>并根据当前的<code>BeanDefinitionRegistry</code>来注册一个<code>AnnotationAwareAspectJAutoProxyCreator</code>；所以我们在加了注解后就可以启用ProxyCreator去为我们创建AOP代理对象；</p><p>我们再去看<code>AnnotationAwareAspectJAutoProxyCreator</code>这个类它做了哪些工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationAwareAspectJAutoProxyCreator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AspectJAwareAdvisorAutoProxyCreator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBeanFactory</span><span class="hljs-params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;<br>        <span class="hljs-comment">// 调用父类的方法初始化Bean工厂</span><br>        <span class="hljs-built_in">super</span>.initBeanFactory(beanFactory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>追踪代码到<code>AbstractAutowireCapableBeanFactory</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span> &#123;<br>    <br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">initializeBean</span><span class="hljs-params">(String beanName, Object bean, <span class="hljs-meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">wrappedBean</span> <span class="hljs-operator">=</span> bean;<br>        <span class="hljs-keyword">if</span> (mbd == <span class="hljs-literal">null</span> || !mbd.isSynthetic()) &#123;<br>            <span class="hljs-comment">// 执行beanPostProcessorsBeforeInitialization</span><br>            wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 初始化Bean</span><br>                invokeInitMethod(beanName, wrappedBean, mbd);<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (mbd == <span class="hljs-literal">null</span> || !mbd.isSynthetic()) &#123;<br>                <span class="hljs-comment">// 执行beanPostProcessorsAfterInitialization</span><br>                wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);<br>            &#125;<br>            <span class="hljs-keyword">return</span> wrappedBean;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们看下通知是如何创建的，继续追踪源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutoProxyCreator</span> &#123;<br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">wrapIfNecessary</span><span class="hljs-params">(Object bean, String beanName, Object cacheKey)</span> &#123;<br>        <span class="hljs-comment">// 省略其他不相关的代码...</span><br>        <span class="hljs-comment">// Create proxy if we have advice</span><br>        Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;<br>            <span class="hljs-built_in">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> createProxy(<br>bean.getClass(), beanName, specificInterceptors, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SingletonTargetSource</span>(bean));<br><span class="hljs-built_in">this</span>.proxyTypes.put(cacheKey, proxy.getClass());<br><span class="hljs-keyword">return</span> proxy;<br>        &#125;<br>        <br>        <span class="hljs-built_in">this</span>.advisedBeans.put(cackeKey, Boolean.FALSE);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建代理的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAdvisorAutoProxyCreator</span> &#123;<br>    <span class="hljs-meta">@Override</span><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(<br>Class&lt;?&gt; beanClass, String beanName, <span class="hljs-meta">@Nullable</span> TargetSource targetSource) &#123;<br><br>List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);<br><span class="hljs-keyword">if</span> (advisors.isEmpty()) &#123;<br><span class="hljs-keyword">return</span> DO_NOT_PROXY;<br>&#125;<br><span class="hljs-keyword">return</span> advisors.toArray();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们用一张图再来回顾一下Bean的生命周期</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220306123615086.png" alt="image-20220306123615086"></p><p>用自己的话概括一下就是：</p><ol><li>生成并且注册BeanDefinition对象；</li><li>初始化IoC容器并且加载BeanDefinition对象；</li><li>寻找对应的BeanFactory去实例化Bean;（实例化阶段）<ol><li>使用简单工厂 + 反射去推断构造函数进行实例化</li></ol></li><li>执行Bean的属性赋值动作<ol><li>调用XXXAware接口回调方法；</li><li>调用初始化生命周期的三种回调方法；</li><li>假如Bean实现了AOP，会去创建动态代理对象；</li></ol></li><li>销毁Bean<ol><li>销毁Bean的对象实例，仅在Spring容器关闭的过程中执行销毁；</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Bean的生命周期学习</title>
    <link href="/2022/03/04/spring/spring-bean-lifecycle/"/>
    <url>/2022/03/04/spring/spring-bean-lifecycle/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Spring-Bean"><a href="#什么是Spring-Bean" class="headerlink" title="什么是Spring Bean"></a>什么是Spring Bean</h1><p>用一句话来讲解，Spring Bean就是由Spring的IoC容器所创建出来的对象，就称之为Bean；</p><p>IoC（Inverse of Control）是Spring中最核心的理念。要理解什么是IoC容器，我们先从一个最简单的例子讲起：</p><h2 id="Java中如何创建一个对象？"><a href="#Java中如何创建一个对象？" class="headerlink" title="Java中如何创建一个对象？"></a>Java中如何创建一个对象？</h2><p>相信你只要做过Java肯定都知道，用<code>new</code>关键字来创建一个对象，然后JVM会根据对象的构造函数去成这个对象，从而完成对象的创建。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SomeObject</span> <span class="hljs-variable">someObject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SomeObject</span>();<br></code></pre></td></tr></table></figure><p>除此之外，我们使用反射也可以创建出一个Java对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;类的所在包的全路径&quot;</span>).newInstance();<br></code></pre></td></tr></table></figure><p>这两种方法的本质都是：调用了我们对象的构造函数来实现的，并且需要注意的是：整个对象创建的过程都是有程序员自己手动完成的。</p><h2 id="在Spring中创建的对象跟手动创建的对象有什么区别的？"><a href="#在Spring中创建的对象跟手动创建的对象有什么区别的？" class="headerlink" title="在Spring中创建的对象跟手动创建的对象有什么区别的？"></a>在Spring中创建的对象跟手动创建的对象有什么区别的？</h2><p>也许你发现了，在使用Spring框架的过程中，我们从来都不需要显式地去自己创建对象，而是通过下面这样的代码来实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建Spring IoC容器</span><br><span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;spring.xml&quot;</span>);<br><span class="hljs-comment">// 也可以是这样子</span><br>context = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);<br><br><span class="hljs-comment">// 从Spring IoC容器中获取一个Bean</span><br><span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) context.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br></code></pre></td></tr></table></figure><p>可以看到，我们在指定的Spring IoC容器中通过名称就可以拿到我们的Bean对象；</p><p>这说明，在Spring内部通过IoC设计思想已经帮助我们创建好了我们想要用的对象，这种设计思想就叫做“控制反转”。</p><p>控制反转提现在两个概念：</p><ul><li>控制：对象创建的控制权不再是程序员，而是Spring IoC容器；</li><li>反转：指的就是创建对象的这种控制权交给了第三方容器来实现；</li></ul><p>Spring使用了“依赖注入”的方式实现了这种机制。所以<strong>总结下来：控制反转是设计思想，依赖注入是具体实现。并且依赖注入是控制反转的一种实现方式；</strong></p><h2 id="如何理解依赖注入呢"><a href="#如何理解依赖注入呢" class="headerlink" title="如何理解依赖注入呢"></a>如何理解依赖注入呢</h2><p>我们再通过一个朴素的例子来说明这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义一个AppConfig类</span><br><span class="hljs-meta">@ComponentScan(basePackages = &quot;当前类所在的包&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AppConfig</span> &#123;&#125;<br><br><span class="hljs-comment">// UserService Bean</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>&#125;<br><br><span class="hljs-comment">// OrderService</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderService</span> &#123;&#125;<br><br><span class="hljs-comment">// Main方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ctx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(AppConfig.class);<br>        <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> (UserService) ctx.getBean(<span class="hljs-string">&quot;userService&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们通过Debug来看下userService对象里面有什么内容？</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220304131346171.png" alt="image-20220304131346171"></p><p>可以看到我们在<code>UserService</code>中依赖了<code>OrderService</code>，在Spring Ioc容器中我们的<code>OrderService</code>也顺便被实例化了。这就是Spring IoC容器中依赖注入帮我们实现的业务逻辑；</p><h2 id="这是如何做到的呢？"><a href="#这是如何做到的呢？" class="headerlink" title="这是如何做到的呢？"></a>这是如何做到的呢？</h2><p>很简单，Spring中有个BeanFactory负责创建对象，创建完对象我们可以通过类名拿到对应的对象，这个是反射实现的。因此对于Spring IoC的机制也很简单。就是：</p><p>简单工厂（BeanFactory + 动态代理）</p><h1 id="Spring-Bean的生命周期"><a href="#Spring-Bean的生命周期" class="headerlink" title="Spring Bean的生命周期"></a>Spring Bean的生命周期</h1><p>需要记住的是，Spring Bean的生命周期只有四个阶段：</p><ul><li><strong>实例化</strong><ul><li>借助反射推断构造函数进行实例化；使用的是实例工厂和静态工程；</li></ul></li><li><strong>属性赋值</strong><ul><li>解析自动装配（byName，byType，构造函数，none以及@Autowired）</li><li>此步骤也是依赖注入的实现机制</li><li>除此之外，赋值阶段会解决循环依赖的问题；</li></ul></li><li><strong>初始化</strong><ul><li>调用XXXAware接口（BeanNameAware，BeanClassLoaderAware以及BeanFactoryAware）</li><li>调用初始化生命周期的三种回调方式；（@PostConstruct， InitializeBean以及init-method属性）</li><li>假设Bean实现了AOP，那么会去创建动态代理；</li></ul></li><li><strong>销毁</strong><ul><li>Spring关闭容器时调用并且销毁Bean对象；</li></ul></li></ul><h2 id="1-Bean对象创建的过程中"><a href="#1-Bean对象创建的过程中" class="headerlink" title="1. Bean对象创建的过程中"></a>1. Bean对象创建的过程中</h2><p>我们对应到源码中看下具体的流程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowiredCapableBeanFactory</span> &#123;<br>    <br>    <span class="hljs-comment">// 省略其他无关代码</span><br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">doCreateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span> &#123;<br>        <span class="hljs-type">BeanWrapper</span> <span class="hljs-variable">instanceWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (instanceWrapper == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 实例化阶段</span><br>            instanceWrapper = createBeanInstance(beanName, mbd, args);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> instanceWrapper.getWrappedInstance();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">exposedObject</span> <span class="hljs-operator">=</span> bean;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 属性赋值阶段</span><br>            populateBean(beanName, mbd, instanceWrapper);<br>            <span class="hljs-comment">// 初始化阶段</span><br>            exposedObject = initializeBean(beanName, exposedObject, mbd);<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>            <span class="hljs-keyword">throw</span> (BeanCreationException) ex;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到createBean方法我们继续看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowiredCapableBeanFactory</span> &#123;<br>    <br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">createBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> Object[] args)</span> &#123;<br>        <span class="hljs-type">RootBeanDefinition</span> <span class="hljs-variable">mbdToUse</span> <span class="hljs-operator">=</span> mbd;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 实例化之前</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> resolveBeforeInstantiation(beanName, mbdToUse);<br>        &#125;<br>        <br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 创建Bean的位置</span><br>            <span class="hljs-comment">// 包括实例化、属性赋值和初始化阶段</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">beanInstance</span> <span class="hljs-operator">=</span> doCreateBean(beanName, mbdToUse, args);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">resolveBeforeInstantiation</span><span class="hljs-params">(String beanName, RootDefinition mbd)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;<br>        <span class="hljs-keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeforePostProcessors()) &#123;<br>            <span class="hljs-comment">// 省略下列代码</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasInstantiationAwareBeforePostProcessors</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> !getBeanPostProcessorCache().instantiationAware.isEmpty();<br>&#125;<br><br><span class="hljs-comment">// Method in AbstractBeanFactory</span><br>BeanPostProcessorCache <span class="hljs-title function_">getBeanPostProcessorCache</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">BeanPostProcessorCache</span> <span class="hljs-variable">bpCache</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.beanPostProcessorCache;<br>    <span class="hljs-keyword">if</span> (bpCache == <span class="hljs-literal">null</span>) &#123;<br>        bpCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanPostProcessorCache</span>();<br>        <span class="hljs-keyword">for</span> (BeanPostProcessor pb : <span class="hljs-built_in">this</span>.beanPostProcessors) &#123;<br>            <span class="hljs-keyword">if</span> (bp <span class="hljs-keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;<br>                <span class="hljs-comment">// Ignore other code</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后追踪的代码过程中，我们找到了<code>InstantiationAwareBeanPostProcessor</code>接口，看下它的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InstantiationAwareBeanPostProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BeanPostProcessor</span> &#123;<br>    <span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">default</span> Object <span class="hljs-title function_">postProcessBeforeInstantiation</span><span class="hljs-params">(Class&lt;?&gt; beanClass, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br>    <br>    <span class="hljs-keyword">default</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">postProcessAfterInstantiation</span><span class="hljs-params">(Object bean, String beanName)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>找到属性赋值的方法，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowireCapableBeanFactory</span> &#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">populateBean</span><span class="hljs-params">(String beanName, RootBeanDefinition mbd, <span class="hljs-meta">@Nullable</span> BeanWrapper bw)</span> &#123;<br>        <span class="hljs-comment">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span><br><span class="hljs-comment">// state of the bean before properties are set. This can be used, for example,</span><br><span class="hljs-comment">// to support styles of field injection.</span><br>        <span class="hljs-keyword">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;<br><span class="hljs-keyword">for</span> (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) &#123;<br><span class="hljs-keyword">if</span> (!bp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对此可以总结两点：</p><ul><li>postProcessBeforeInstantiation在doCreateBean之前调用，也就是在bean实例化之前调用的，英文源码注释解释道该方法的返回值会替换原本的Bean作为代理，这也是Aop等功能实现的关键点。</li><li>postProcessAfterInstantiation在属性赋值方法内，但是在真正执行赋值操作之前，返回值为boolean为false时可以阻断属性赋值阶段；</li></ul><h2 id="2-无所不能的Aware"><a href="#2-无所不能的Aware" class="headerlink" title="2. 无所不能的Aware"></a>2. 无所不能的Aware</h2><p>Aware之前的名字就是可以拿到什么资源，例如<code>BeanNameAware</code>可以拿到BeanName，一次类推。调用时机需要注意：所有Aware方法都是在初始化阶段之前就调用；</p><h2 id="第一组"><a href="#第一组" class="headerlink" title="第一组"></a>第一组</h2><ul><li>BeanNameAware</li><li>BeanClassLoaderAware</li><li>BeanFactoryAware</li></ul><h2 id="第二组"><a href="#第二组" class="headerlink" title="第二组"></a>第二组</h2><ul><li>EnvironmentAware</li><li>EmbeddedValueResolverAware</li><li>ApplicationContextAware</li></ul><p>可以通过源码看下具体的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractAutowiredCapableBeanFactory</span> &#123;<br>    <br>    <span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">initializeBean</span><span class="hljs-params">(String beanName, Object bean, <span class="hljs-meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;<br>        <span class="hljs-comment">// 调用第一组的三个Bean开头的Aware</span><br>        invokeAwareMethods(beanName, bean);<br>        <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">wrappedBean</span> <span class="hljs-operator">=</span> bean;<br>        <span class="hljs-comment">// 调用第二组的几个Aware接口</span><br>        <span class="hljs-comment">// BeanPostProcessor调用点1</span><br>        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);<br>        <span class="hljs-comment">// InitializingBean的调用点</span><br>        invokeInitMethods(beanName, wrappedBean, mbd);<br>        <span class="hljs-comment">// BeanPostProcessor调用点2</span><br>        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);<br>        <span class="hljs-keyword">return</span> wrappedBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里区别记忆：</p><ul><li>BeanxxxAware接口是在代码中直接调用的；</li><li>ApplicationContext相关的Aware接口是通过在BeanPostProcessor下的postProcessBeforeInitialization()实现的；</li></ul><h1 id="简单的两个生命周期接口"><a href="#简单的两个生命周期接口" class="headerlink" title="简单的两个生命周期接口"></a>简单的两个生命周期接口</h1><p>剩下的两个接口就比较简单，一个是<code>initializingBean</code>，一个是<code>DisposableBean</code>；前者对应生命周期的初始化阶段；后者对应生命周期的销毁阶段；</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Spring Bean的生命周期分为<code>4个阶段</code>和<code>多个扩展点</code>。扩展点又可以分为<code>影响多个Bean</code>和<code>影响单个Bean</code>：</p><h2 id="4个阶段"><a href="#4个阶段" class="headerlink" title="4个阶段"></a>4个阶段</h2><ul><li>实例化 Instanitiation</li><li>属性赋值 Populate</li><li>初始化 Initialization</li><li>销毁 Destruction</li></ul><h2 id="多个扩展点"><a href="#多个扩展点" class="headerlink" title="多个扩展点"></a>多个扩展点</h2><ul><li>影响多个Bean<ul><li>BeanPostProcessor</li><li>InstantiationAwareBeanPostProcessor</li></ul></li><li>影响单个Bean<ul><li>Aware Group 1<ul><li>BeanNameAware</li><li>BeanClassLoaderAware</li><li>BeanFactoryAware</li></ul></li><li>Aware Group 2<ul><li>EnvironmentAware</li><li>EmbeddedValueResolverAware</li><li>ApplicationContextAware</li></ul></li></ul></li><li>生命周期<ul><li>InitializingBean</li><li>DisposableBean</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分布式概念基础</title>
    <link href="/2022/03/03/distribute/distribute-concept/"/>
    <url>/2022/03/03/distribute/distribute-concept/</url>
    
    <content type="html"><![CDATA[<h1 id="一、CAP理论"><a href="#一、CAP理论" class="headerlink" title="一、CAP理论"></a>一、CAP理论</h1><p><strong>（C）数据一致性：</strong>写操作成功，所有读都能成功；写操作失败，所有读都不能成功；</p><p><strong>（A）服务可用：</strong>所有读写请求在一定时间内得到响应，可终止，不会一直等待；</p><p><strong>（P）分区容错性：</strong>网络分区的情况下，被分隔的节点依然能正常对外服务；</p><p>单体应用下，CA原则是完全没问题的（不存在P）；但是在分布式下架构下只能保证CP或者AP。</p><h1 id="二、Base理论"><a href="#二、Base理论" class="headerlink" title="二、Base理论"></a>二、Base理论</h1><p>CAP理论的一种折衷，由于在分布式架构下CAP只能二选其一，所以Base理论降低了发生分区容错时对可用性和一致性的要求；</p><ol><li><strong>基本可用：</strong>允许可用性降低（可能延长响应时间、可能进行服务降级）</li><li><strong>软状态：</strong>允许系统中的数据存在中间状态，并且认为中间状态不会影响系统整体的可用性；</li><li><strong>最终一致性：</strong>节点数据同步可以存在延时，但在一定期限后必须达成数据一致性，状态变为最终态；</li></ol><h1 id="三、数据一致性模型"><a href="#三、数据一致性模型" class="headerlink" title="三、数据一致性模型"></a>三、数据一致性模型</h1><ul><li><strong>强一致性：</strong>用户上一次写了什么，下一次就能保证读到什么；</li><li><strong>弱一致性：</strong>系统写入数据不承诺立即读到最新写入，也不承诺多久后可以读到；</li><li><strong>最终一致性：</strong>弱一致性的特例，所有数据副本在经过一段时间的同步后最终都能达到一致；</li><li><strong>因果一致性：</strong>要求所有因果关系的操作顺序得到保证，非因果关系的操作顺序无所谓；</li><li><strong>会话一致性：</strong>对系统数据的访问过程框定在一个会话中，约定系统能保证在同一个有效会话中实现读已之所写的一致性；</li></ul><h1 id="四、Quorum机制"><a href="#四、Quorum机制" class="headerlink" title="四、Quorum机制"></a>四、Quorum机制</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>10个副本，一次成功更新3个，那么至少需要读取8个副本的数据，可以保证读到了最新的数据。无法保证强一致性，也就无法实现任何时刻任何用户或节点都可以读到最近一次成功提交的副本数据。需要配合一个获取最新成功提交的版本号metadata服务，这样可以确定最新已经成功提交的版本号，然后从已经读到的数据中可以确认最新写入的数据；</p><blockquote><p>至少读取副本节点数 = 总副本节点数 - 一次成功更新副本数 + 1</p><p>例如上面的例子：</p><p> 8 = 10 - 3 + 1</p></blockquote><h1 id="五、WARO（Write-All-Read-One）机制"><a href="#五、WARO（Write-All-Read-One）机制" class="headerlink" title="五、WARO（Write All Read One）机制"></a>五、WARO（Write All Read One）机制</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>一种简单的副本控制协议。写操作时、只有当所有副本都更新成功后，本次写操作才算成功；否则视为失败；</p><p>优先保证读、任何节点读到的数据都是最新数据，牺牲了更新服务的可用性。</p><blockquote><p>只要有一个副本宕机了，写服务就不会成功，但只要有一个节点存活，仍能提供读写服务</p></blockquote><h1 id="六、负载均衡策略"><a href="#六、负载均衡策略" class="headerlink" title="六、负载均衡策略"></a>六、负载均衡策略</h1><h2 id="1-轮询法"><a href="#1-轮询法" class="headerlink" title="1. 轮询法"></a>1. 轮询法</h2><p>将请求按顺序轮流分配到后端服务上，均衡地等待后端的每台服务器，而不关心服务器的实际连接数和当前的系统负载；</p><h2 id="2-加权轮询法"><a href="#2-加权轮询法" class="headerlink" title="2. 加权轮询法"></a>2. 加权轮询法</h2><p>不同的后端服务器可能的配置与当前系统的负载均衡并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请求；反之给配置低，负载高的机器配置更低的权重，降低系统负载；</p><h2 id="3-随机法"><a href="#3-随机法" class="headerlink" title="3. 随机法"></a>3. 随机法</h2><p>借助于随机算法，根据后端服务器的列表大小值随机选取其中一台服务器进行访问，随着客户端请求次数的增多，实际效果会越来越接近于平均分配调用到后端的每台服务器；</p><h2 id="4-加权随机法"><a href="#4-加权随机法" class="headerlink" title="4. 加权随机法"></a>4. 加权随机法</h2><p>类似于加权轮询法，也是根据后端机器的配置，系统负载分配不同的权重，不同的是权重值随机请求后端服务器，而非顺序；</p><h2 id="5-源地址哈希法"><a href="#5-源地址哈希法" class="headerlink" title="5. 源地址哈希法"></a>5. 源地址哈希法</h2><p>根据获取客户端的IP地址，借助哈希算法计算除一个数值，用数值对服务器列表的大小进行取模运算，得到的结果是客户端要访问服务器的序号</p><blockquote><p>采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，每次都会映射到同一台后端服务器进行访问</p></blockquote><h2 id="6-最小连接数法"><a href="#6-最小连接数法" class="headerlink" title="6. 最小连接数法"></a>6. 最小连接数法</h2><p>根据后端服务的当前连接情况，动态选取其中当前积压连接数最小的一台服务器来作为处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器；</p><blockquote><p>一句话概括：谁空闲谁去处理</p></blockquote><h1 id="七、分布式系统设计"><a href="#七、分布式系统设计" class="headerlink" title="七、分布式系统设计"></a>七、分布式系统设计</h1><ul><li><strong>可扩展：</strong>通过对服务、存储的扩展，提高系统的处理能力。通过对多台服务器协同工作，来完成单台服务器无法处理的任务、尤其是高并发或者大数据量的任务；</li><li><strong>高可用：</strong>单点故障不影响整体，单点故障指的是系统中某个组件一旦失效，会让整个系统瘫痪无法工作；</li><li><strong>无状态：</strong>无状态的服务才能满足部分机器宕机不影响全部，可以随时进行扩展的需求；</li><li><strong>可管理：</strong>便于运维，出问题能否及时发现定位</li><li><strong>高可靠：</strong>同样的请求返回同样的数据，更新能够持久化，数据不丢失；</li></ul><h1 id="八、分布式事务的解决方案"><a href="#八、分布式事务的解决方案" class="headerlink" title="八、分布式事务的解决方案"></a>八、分布式事务的解决方案</h1><ul><li><p><strong>基于XA协议：</strong>两阶段提交和三阶段提交，需要数据库层面支持；</p></li><li><p><strong>基于事务补偿机制：</strong>TCC（Try-Confirm-Cancel），基于业务层面实现；</p><blockquote><p>TCC事务模型：也称为两阶段补偿事务。第一阶段Try只预留资源，第二阶段明确告诉服务提供者，这个资源你到底要不要，对应第二阶段的confirm / cancel。</p><p><strong>直白一点就是：你要这个资源，我先帮你留着，然后要的话我就给你，不要我就扔掉了；</strong></p></blockquote></li><li><p><strong>本地消息表：</strong>基于本地数据库 + MQ，维护本地表状态（进行中），通过MQ调用服务，完成响应后回一条消息回调；将状态更改为完成。需要配合定时任务扫表，重新发送消息调用服务，保证幂等性；</p><blockquote><p><strong>消息幂等</strong>：当出现消费者对某条消息重复消费的情况时，重复消费的结果与消费一次的结果是相同的，并且多次消费并未对业务系统产生任何负面影响</p><p>MQ系统内部必须生成一个inner-msg-id，作为去重和幂等的依赖，并且ID是全局唯一且与业务无关，对消息发送方和接收方都屏蔽</p></blockquote></li><li><p>基于事务消息：例如MQ服务；</p></li></ul><h1 id="九、讲讲TCC事务模型"><a href="#九、讲讲TCC事务模型" class="headerlink" title="九、讲讲TCC事务模型"></a>九、讲讲TCC事务模型</h1><p>TCC补偿事务：Try、Confirm、Cancel</p><p>针对每个操作，都要注册一个与其对应的确认和补偿（撤销）操作；</p><ul><li>Try：操作业务检查以及资源预留；</li><li>Confirm：业务确认操作；</li><li>Cancel：实现一个与Try相反的操作（即回滚操作）</li></ul><p>TCC模型对业务的侵入行较强，改造难度较大，每个操作都需要TCC操作；</p><p>TCC会增加事务日志，如果Confirm或者Cancel阶段出错，则会进行重试，所以这两个截断需要支持幂等；如果充实失败，则需要人工介入进行恢复和处理；</p><h1 id="十、如何理解RPC"><a href="#十、如何理解RPC" class="headerlink" title="十、如何理解RPC"></a>十、如何理解RPC</h1><p>远程过程调用（Remote Process Callable）</p><p>RPC要求在调用方中放置被调用的方法接口，调用方只需要调用了这些接口，就相当于调用了被调用方的实际方法，十分易用。于是调用方可以像调用内部接口一样调用远程方法，而不是封装参数名和参数值等操作；</p><p>包含：</p><ul><li>动态代理，封装调用细节；</li><li>序列化与翻序列化，数据传输与接收；</li><li>通信，可以选择七层http协议，四层tcp/udp协议；</li><li>异常处理机制</li></ul><p>首先，调用方调用的是接口，必须为接口构造一个假的实现，因此需要使用动态代理。这样，调用方的调用就被动态代理接收了。</p><p>其次，动态代理接收到调用后，应该想办法调用远程的实际实现，包括下面几步：</p><ul><li>识别具体要调用的远程方法IP、端口；</li><li>将调用方法的入参进行序列化；</li><li>通过通信将请求发送到远程方法中；</li></ul><p>这样，远程的服务就接收到了调用方法的请求，应该：</p><ul><li>反序列化各个调用参数</li><li>定位到实际要调用的方法，然后输入参数，执行方法；</li><li>按照调用的路径返回调用的结果；</li></ul><h1 id="十一、zookeeper分布式锁实现原理"><a href="#十一、zookeeper分布式锁实现原理" class="headerlink" title="十一、zookeeper分布式锁实现原理"></a>十一、zookeeper分布式锁实现原理</h1>]]></content>
    
    
    <categories>
      
      <category>分布式架构设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Apache Kafka盘点</title>
    <link href="/2022/03/02/middleware/kafka-learning/"/>
    <url>/2022/03/02/middleware/kafka-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="一、基本术语"><a href="#一、基本术语" class="headerlink" title="一、基本术语"></a>一、基本术语</h1><h2 id="消息（Message）"><a href="#消息（Message）" class="headerlink" title="消息（Message）"></a>消息（Message）</h2><p>Kafka中的数据单元称为<code>消息</code>，也被称为记录，可以把它看作数据库表中的某一行记录；</p><h2 id="批次（Batch）"><a href="#批次（Batch）" class="headerlink" title="批次（Batch）"></a>批次（Batch）</h2><p>为了提高效率，消息会<code>分批次</code>写入Kafka，批次就代指的一组消息；</p><h2 id="主题（Topic）"><a href="#主题（Topic）" class="headerlink" title="主题（Topic）"></a>主题（Topic）</h2><p>消息的种类为<code>主题</code>，可以说一个主题代表了一类消息。相当于对消息进行分类，主题就像数据库中的表；</p><h2 id="分区（Partition）"><a href="#分区（Partition）" class="headerlink" title="分区（Partition）"></a>分区（Partition）</h2><p>主题可以被分为若干个分区，同一个主题中的分区可以不在一个机器上，有可能会部署在多个机器上，由此来实现kafka的伸缩性，单一主题中的分区有序，但是无法保证主题中的所有分区有序；</p><h2 id="生产者（Producer）"><a href="#生产者（Producer）" class="headerlink" title="生产者（Producer）"></a>生产者（Producer）</h2><p>向主题发布消息的客户端应用程序称为生产者，生产者用于持续不断的向某个主题发送消息；</p><h2 id="消费者（Consumer）"><a href="#消费者（Consumer）" class="headerlink" title="消费者（Consumer）"></a>消费者（Consumer）</h2><p>订阅主题消息的客户端称为消费者，消费者用于处理生产者产生的消息；</p><h2 id="消费者群组"><a href="#消费者群组" class="headerlink" title="消费者群组"></a>消费者群组</h2><p>由一个或者多个消费者组成的群体；</p><h2 id="偏移量（Consumer-Offset）"><a href="#偏移量（Consumer-Offset）" class="headerlink" title="偏移量（Consumer Offset）"></a>偏移量（Consumer Offset）</h2><p>一种元数据，是一个不断递增的整数值，用来记录消费者发生重平衡的位置，以便用来恢复数据；</p><h2 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h2><p>一个独立的Kafka服务器称为Broker，Broker接收来自生产者的消息，为消息设置偏移量，并提交消息到磁盘保存；</p><h2 id="Broker集群"><a href="#Broker集群" class="headerlink" title="Broker集群"></a>Broker集群</h2><p>是集群的组成部分，有一个或者多个broker组成，每个集群都有一个broker同时充当集群控制器的角色（自动从集群的活跃成员中选举出来）；</p><h2 id="副本（Replica）"><a href="#副本（Replica）" class="headerlink" title="副本（Replica）"></a>副本（Replica）</h2><p>Kafka中消息备份叫副本，副本数量可以配置，并且Kafka定义了两类副本：领导者副本和追随者副本；前者对外提供服务，后者被动跟随；</p><h2 id="重平衡（Rebalance）"><a href="#重平衡（Rebalance）" class="headerlink" title="重平衡（Rebalance）"></a>重平衡（Rebalance）</h2><p>消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalalce是Kafka消费者实现高可用的重要手段；</p><h1 id="二、Kafka的特性（设计原则）"><a href="#二、Kafka的特性（设计原则）" class="headerlink" title="二、Kafka的特性（设计原则）"></a>二、Kafka的特性（设计原则）</h1><ul><li><strong>高吞吐、低延迟：</strong>收发消息快，每秒可以处理几十万条信息，最低延迟只有几毫秒；</li><li><strong>高伸缩性：</strong>每个主题包含多个分区，主题中的分区可以分布在不同的主机中；</li><li><strong>持久性、可靠性：</strong>允许数据持久化存储，消息被持久化到磁盘，并支持数据备份防止数据丢失，Kafka底层的数据存储是基于Zookeeper存储；</li><li><strong>容错性：</strong>允许集群中的节点失败，某个节点宕机，Kafka集群能够正常工作；</li><li><strong>高并发：</strong>支持数千个客户端同时读写；</li></ul><h1 id="三、使用场景"><a href="#三、使用场景" class="headerlink" title="三、使用场景"></a>三、使用场景</h1><ul><li><strong>活动跟踪：</strong>例如跟踪用户行为；</li><li><strong>消息传递：</strong>例如应用程序的发送通知，不需要关心消息格式，不需要关心数据如何发送；</li><li><strong>度量指标：</strong>记录运营监控数据，包括收集各种分布式应用数据，生产各种操作的集中反馈，例如报警和报告；</li><li><strong>日志记录：</strong>日志提交，例如可以把数据库更新发送到Kafka上，记录数据库更新时间，通过Kafka以统一接口服务的方式开放给各种consumer，例如Handoop，Hbase和Solr等；</li><li><strong>流式处理：</strong>这个不清楚</li><li><strong>限流削峰：</strong>某一时刻请求特别多，可以将请求写入Kafka中，避免直接请求后端程序导致服务崩溃；</li></ul><h1 id="四、消息队列"><a href="#四、消息队列" class="headerlink" title="四、消息队列"></a>四、消息队列</h1><h2 id="点对点模式"><a href="#点对点模式" class="headerlink" title="点对点模式"></a>点对点模式</h2><p>一个生产者对一个消费者，就称为点对点模式</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220302144931640.png" alt="image-20220302144931640"></p><h2 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h2><p>多个生产者对多个消费者的情况，就成为发布订阅模式的消息队列</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220302145010631.png" alt="image-20220302145010631"></p><h1 id="五、Kafka系统架构"><a href="#五、Kafka系统架构" class="headerlink" title="五、Kafka系统架构"></a>五、Kafka系统架构</h1><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220302145146617.png" alt="image-20220302145146617"></p><p>一个典型的Kafka集群包括：</p><ul><li>若干个Producer（可以是Web前端的Page View，服务器日志，系统CPU，Memory等）；</li><li>若干个Broker（支持水平扩展，一般broker数量越多，集群吞吐率就越高）；</li><li>若干个Consumer Group：</li><li>Zookeeper集群（选举leader，以及在Consumer Group发生变化时进行rebalalce）</li></ul><p>其中需要注意的是：Producer使用push模式推送消息，Consumer使用pull模式从broker订阅并消费消息；</p><h1 id="六、核心API"><a href="#六、核心API" class="headerlink" title="六、核心API"></a>六、核心API</h1><p>有4个核心API，分别是：</p><ul><li>Producer API：允许应用程序向一个或者多个topics发送消息；</li><li>Consumer API：允许应用程序向一个或多个topics并处理为其生成的记录流；</li><li>Streams API：允许应用程序作为流处理器，从一个或多个主题中消费输入流并为其生成输出流，有效地将输入流转换为输出流；</li><li>Connector API：允许构建和运行将Kafka主题连接到现有应用程序或数据系统的可用生产者和消费者；</li></ul><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220302145817899.png" alt="image-20220302145817899"></p><h1 id="七、Kafka为什么这么快"><a href="#七、Kafka为什么这么快" class="headerlink" title="七、Kafka为什么这么快"></a>七、Kafka为什么这么快</h1><p>实现了零拷贝原理来快速移动数据，避免内核之间的切换。Kafka将数据记录分批发送，从生产者到文件系统（Kafka主题日志）到消费者，可以端到端的查看这些批次的数据；</p><p>总结下来就4个点：</p><ul><li>顺序读写</li><li>零拷贝</li><li>消息压缩</li><li>分批发送</li></ul>]]></content>
    
    
    <categories>
      
      <category>消息中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring知识汇总</title>
    <link href="/2022/02/24/spring/spring-summary/"/>
    <url>/2022/02/24/spring/spring-summary/</url>
    
    <content type="html"><![CDATA[<h1 id="1-为什么使用Spring"><a href="#1-为什么使用Spring" class="headerlink" title="1. 为什么使用Spring"></a>1. 为什么使用Spring</h1><ul><li>IoC技术，容器帮忙管理依赖对象，不需要自己创建和管理依赖对象，更轻松实现程序解耦；</li><li>事务支持，使得操作事务更加方便；</li><li>提供面向切面的编程，可以更方便地处理某一类的问题；</li><li>更方便集成其他框架，比如Mybatis和Hibernate；</li></ul><h1 id="2-什么是AOP"><a href="#2-什么是AOP" class="headerlink" title="2. 什么是AOP"></a>2. 什么是AOP</h1><p>面向切面编程，通过预编译的方式和运行期动态代理实现程序功能的统一维护的技术；简单来说就是统一处理“切面”类问题的编程思想，比如统一处理日志，异常等；</p><h1 id="3-什么是IoC"><a href="#3-什么是IoC" class="headerlink" title="3. 什么是IoC"></a>3. 什么是IoC</h1><p>IoC是Spring的核心，对于Spring框架来说，由Spring来负责控制对象的生命周期和对象之间的关系；</p><p>控制指的是当前对象对内部成员的控制权；控制反转指的是这种控制权不由当前对象管理，由其他（类、第三方容器）来管理；</p><h1 id="4-Spring模块"><a href="#4-Spring模块" class="headerlink" title="4. Spring模块"></a>4. Spring模块</h1><ul><li>spring core：框架基础，提供IoC和依赖注入</li><li>spring context：构建于core封装包基础上的context封装包，提供一种框架式的对象访问方法</li><li>spring dao：提供JDBC抽象层</li><li>spring aop：提供面向切面的编程实现，可以自定义拦截器、切点</li><li>spring web：提供针对web开发的集成特性，例如文件上传，利用servlet listeners进行ioc容器初始化和针对web的ApplicationContext；</li><li>spring web mvc：提供了web应用的Mode-View-Controller的实现；</li></ul><h1 id="5-Spring常见的注入方式"><a href="#5-Spring常见的注入方式" class="headerlink" title="5. Spring常见的注入方式"></a>5. Spring常见的注入方式</h1><ul><li>setter属性注入</li><li>构造方法注入</li><li>注解方式注入</li></ul><h1 id="6-Spring的bean是线程安全的吗？"><a href="#6-Spring的bean是线程安全的吗？" class="headerlink" title="6. Spring的bean是线程安全的吗？"></a>6. Spring的bean是线程安全的吗？</h1><p>Spring的bean默认是单例模式，并且Spring框架没有对单例bean进行多线程的封装处理；但由于大部分时候spring bean是无状态的，因此某种程度上来说bean也是安全的，如果bean有状态的话，就需要开发者自己保证线程安全。</p><p>最简单的就是改变bean的作用域，将singleton变更为prototype，这样请求bean就相当于new Bean了，就可以保证线程安全；</p><ul><li>有状态就是有数据存储功能</li><li>无状态就是不会保存数据</li></ul><h1 id="7-Spring支持的Bean作用域"><a href="#7-Spring支持的Bean作用域" class="headerlink" title="7. Spring支持的Bean作用域"></a>7. Spring支持的Bean作用域</h1><ul><li>singleton：Spring IoC容器只存在一个bean实例，bean以单例模式存在，是系统默认</li><li>prototype：每次从容器调用bean都会创建一个新的实例；</li><li>Web环境下的作用域<ul><li>request：每次http请求都会创建一个bean；</li><li>session：同一个http session共享一个bean实例；</li><li>global-session：用于portlet容器，每个portlet有单独的session，globalsession提供一个全局性的http session;</li></ul></li></ul><p><strong>注意：</strong>使用prototype作用域需要慎重考虑，因为频繁创建和销毁session会带来很大的性能开销；</p><h1 id="8-Spring自动装配Bean的方式"><a href="#8-Spring自动装配Bean的方式" class="headerlink" title="8. Spring自动装配Bean的方式"></a>8. Spring自动装配Bean的方式</h1><ul><li>no：默认值，没有自动装配，使用显式bean引用进行装配</li><li>byName：根据bean名称注入对象依赖项；</li><li>byType：根据类型注入对象依赖项；</li><li>构造函数：通过构造函数注入依赖，需要设置大量参数；</li></ul><h1 id="9-Spring事务实现方式"><a href="#9-Spring事务实现方式" class="headerlink" title="9. Spring事务实现方式"></a>9. Spring事务实现方式</h1><ul><li>声明式事务：基于XML配置文件和注解方式（在类上添加<code>@Transaction</code>注解）；</li><li>编码方式：提供编码的形式管理和维护事务；</li></ul><h1 id="10-Spring事务的隔离"><a href="#10-Spring事务的隔离" class="headerlink" title="10. Spring事务的隔离"></a>10. Spring事务的隔离</h1><ul><li>ISOLATION_DEFAULT：使用底层数据库的隔离级别，数据库设置什么我就用什么；</li><li>ISOLATION_READ_UNCOMMITED：未提交读，最低隔离级别，事务未提交时，就可被其他事务读取（出现幻读、脏读、不可重复读）；</li><li>ISOLATION_READ_COMMITED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），sql server 的默认级别；</li><li>ISOLATION_REPEATABLE_READ：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），mysql 的默认级别；</li><li>ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。</li></ul><h1 id="11-Spring-MVC的运行流程"><a href="#11-Spring-MVC的运行流程" class="headerlink" title="11. Spring MVC的运行流程"></a>11. Spring MVC的运行流程</h1><ul><li>spring mvc 先将请求发送给 DispatcherServlet。</li><li>DispatcherServlet 查询一个或多个 HandlerMapping，找到处理请求的 Controller。</li><li>DispatcherServlet 再把请求提交到对应的 Controller。</li><li>Controller 进行业务逻辑处理后，会返回一个ModelAndView。</li><li>Dispathcher 查询一个或多个 ViewResolver 视图解析器，找到 ModelAndView 对象指定的视图对象。</li><li>视图对象负责渲染返回给客户端。</li></ul><h1 id="12-Spring-MVC的组件"><a href="#12-Spring-MVC的组件" class="headerlink" title="12. Spring MVC的组件"></a>12. Spring MVC的组件</h1><ul><li>前置控制器 DispatcherServlet。</li><li>映射控制器 HandlerMapping。</li><li>处理器 Controller。</li><li>模型和视图 ModelAndView。</li><li>视图解析器 ViewResolver。</li></ul><h1 id="13-Autowired和Resource的区别"><a href="#13-Autowired和Resource的区别" class="headerlink" title="13. @Autowired和Resource的区别"></a>13. @Autowired和Resource的区别</h1><h2 id="Autowired注解"><a href="#Autowired注解" class="headerlink" title="Autowired注解"></a>Autowired注解</h2><ul><li>Autowired有一个问题：当一个类型有多个bean值的时候会造成无法选择具体注入哪一个的情况，此时需要配合@Qualifier使用；</li><li>Autowired为Spring提供的注解；</li></ul><h2 id="Resource注解"><a href="#Resource注解" class="headerlink" title="Resource注解"></a>Resource注解</h2><ul><li>由J2EE提供；</li><li>默认byName自动注入；</li><li>同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛异常；</li><li>指定了name，从上下文查找名称匹配的bean进行装配，找不到抛异常；</li><li>指定了type，从上下文找到类似匹配的唯一bean进行装配，找不到或者找到多个，都会抛异常；</li></ul><p>总结：使用@Resource可以减少代码和Spring之间的耦合</p><h1 id="14-什么是Spring-Boot"><a href="#14-什么是Spring-Boot" class="headerlink" title="14. 什么是Spring Boot"></a>14. 什么是Spring Boot</h1><p>为Spring服务，用来简化Spring应用的初始化搭建以及开发过程；</p><p>Spring Boot有下列好处，这也是为什么现在流行广泛的原因；</p><ul><li>配置简单</li><li>独立运行</li><li>自动装配</li><li>无代码生成和xml配置</li><li>提供应用监控</li><li>容易上手</li><li>提升开发效率</li></ul><h1 id="15-Spring-Boot的核心配置文件"><a href="#15-Spring-Boot的核心配置文件" class="headerlink" title="15. Spring Boot的核心配置文件"></a>15. Spring Boot的核心配置文件</h1><p>Spring Boot核心的两个配置文件：</p><ul><li>bootstrap.yml：有ApplicationContext加载，比application优先加载，且bootstrap里面的属性值不能被覆盖；</li><li>application.yml：用于spring boot项目的自动化配置；</li></ul><h1 id="16-Spring-Boot实现热部署"><a href="#16-Spring-Boot实现热部署" class="headerlink" title="16. Spring Boot实现热部署"></a>16. Spring Boot实现热部署</h1><ul><li>使用Devtools启动热部署，添加devtools库，在配置文件中把spring.devtools.restart.enabled设置为true;</li><li>使用IntelliJ IDEA编译器，勾上自动编译或手动编译；</li></ul>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java多线程面试汇总</title>
    <link href="/2022/02/24/java-core/java-thread-summary/"/>
    <url>/2022/02/24/java-core/java-thread-summary/</url>
    
    <content type="html"><![CDATA[<h1 id="三、多线程"><a href="#三、多线程" class="headerlink" title="三、多线程"></a>三、多线程</h1><h2 id="1-并行和并发的区别"><a href="#1-并行和并发的区别" class="headerlink" title="1. 并行和并发的区别"></a>1. 并行和并发的区别</h2><ul><li>并行：多个处理器或多核处理器同时处理多个任务；</li><li>并发：多个任务在一个CPU按细分的时间片轮流（交替）执行，从逻辑上来看是同时执行；</li></ul><h2 id="2-线程与进程的区别"><a href="#2-线程与进程的区别" class="headerlink" title="2. 线程与进程的区别"></a>2. 线程与进程的区别</h2><p>一个程序至少有一个进程，一个进程至少有一个线程，一个进程下可以有多个线程来增加执行程序的速度；</p><h2 id="3-守护线程"><a href="#3-守护线程" class="headerlink" title="3. 守护线程"></a>3. 守护线程</h2><p>运行在后台的一种特殊进程，独立于控制终端并且周期性执行某种任务或等待处理某些发生的事情。例如java中垃圾回收的线程就是特殊的守护线程；</p><h2 id="4-创建线程的方式"><a href="#4-创建线程的方式" class="headerlink" title="4. 创建线程的方式"></a>4. 创建线程的方式</h2><ul><li>继承Thread类重写run方法；</li><li>实现Runnable接口也是执行run方法；</li><li>实现Callable接口；</li></ul><p>已继承别的类的情况下想要实现多线程，只能使用接口实现；Runnable没有返回值，Callable可以拿到返回值。因此Callable可以看做是Runnable的补充；</p><h2 id="5-线程有哪些状态"><a href="#5-线程有哪些状态" class="headerlink" title="5. 线程有哪些状态"></a>5. 线程有哪些状态</h2><ul><li>NEW 尚未启动</li><li>RUNNABLE 正在执行中</li><li>BLOCKED 阻塞（被同步锁或者IO锁阻塞）</li><li>WAITING 永久等待状态</li><li>TIME_WAITED 等待指定时间重新被唤醒</li><li>TERMINATED 执行完成</li></ul><h2 id="6-线程的生命周期"><a href="#6-线程的生命周期" class="headerlink" title="6. 线程的生命周期"></a>6. 线程的生命周期</h2><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220224190305461.png" alt="image-20220224190305461"></p><h2 id="7-sleep-和wait-的区别"><a href="#7-sleep-和wait-的区别" class="headerlink" title="7. sleep()和wait()的区别"></a>7. sleep()和wait()的区别</h2><ul><li>类不同：sleep()来自Thread，wait()来自Object</li><li>释放锁：sleep()不释放锁，wait()释放锁；</li><li>用法不同：sleep()时间到会自动恢复，wait()可以使用notify() / notifyAll()直接唤醒</li></ul><h2 id="8-notify-notifyAll-的区别"><a href="#8-notify-notifyAll-的区别" class="headerlink" title="8. notify() / notifyAll()的区别"></a>8. notify() / notifyAll()的区别</h2><ul><li>notifyAll()会唤醒所有线程，notify()之后只会唤醒一个线程；</li><li>notifyAll()调用后，会将全部线程由等待转移到锁池，然后参与锁竞争，竞争成功后继续执行；不成功则留在锁池等待锁释放后再次参与竞争；</li><li>notify()只会唤醒一个线程，具体唤醒哪一个有虚拟机控制；</li></ul><h2 id="9-run-和start-的区别"><a href="#9-run-和start-的区别" class="headerlink" title="9. run()和start()的区别"></a>9. run()和start()的区别</h2><p>start()适用于启动线程，run()方法用于执行线程的运行时代码，run()可以重复调用，start()只调用一次；</p><h2 id="10-创建线程池的方式"><a href="#10-创建线程池的方式" class="headerlink" title="10. 创建线程池的方式"></a>10. 创建线程池的方式</h2><ul><li>newSingleThreadExecutor()：它的特点在于工作线程数目被限制为 1，操作一个无界的工作队列，所以它保证了所有任务的都是被顺序执行，最多会有一个任务处于活动状态，并且不允许使用者改动线程池实例，因此可以避免其改变线程数目；</li><li>newCachedThreadPool()：它是一种用来处理大量短时间工作任务的线程池，具有几个鲜明特点：它会试图缓存线程并重用，当无缓存线程可用时，就会创建新的工作线程；如果线程闲置的时间超过 60 秒，则被终止并移出缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用 SynchronousQueue 作为工作队列；</li><li>newFixedThreadPool(int nThreads)：重用指定数目（nThreads）的线程，其背后使用的是无界的工作队列，任何时候最多有 nThreads 个工作线程是活动的。这意味着，如果任务数量超过了活动队列数目，将在工作队列中等待空闲线程出现；如果有工作线程退出，将会有新的工作线程被创建，以补足指定的数目 nThreads；</li><li>newSingleThreadScheduledExecutor()：创建单线程池，返回 ScheduledExecutorService，可以进行定时或周期性的工作调度；</li><li>newScheduledThreadPool(int corePoolSize)：和newSingleThreadScheduledExecutor()类似，创建的是个 ScheduledExecutorService，可以进行定时或周期性的工作调度，区别在于单一工作线程还是多个工作线程；</li><li>newWorkStealingPool(int parallelism)：这是一个经常被人忽略的线程池，Java 8 才加入这个创建方法，其内部会构建ForkJoinPool，利用Work-Stealing算法，并行地处理任务，不保证处理顺序；</li><li>ThreadPoolExecutor()：是最原始的线程池创建，上面1-3创建方式都是对ThreadPoolExecutor的封装。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 以其中一个为例子，后面相同</span><br><span class="hljs-type">ExecutorService</span> <span class="hljs-variable">threadPool</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h2 id="11-线程池的状态"><a href="#11-线程池的状态" class="headerlink" title="11. 线程池的状态"></a>11. 线程池的状态</h2><ul><li>RUNNING：这是最正常的状态，接受新的任务，处理等待队列中的任务。</li><li>SHUTDOWN：不接受新的任务提交，但是会继续处理等待队列中的任务。</li><li>STOP：不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程。</li><li>TIDYING：所有的任务都销毁了，workCount 为 0，线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()。</li><li>TERMINATED：terminated()方法结束后，线程池的状态就会变成这个。</li></ul><h2 id="12-线程池中submit-和execute-的方法区别"><a href="#12-线程池中submit-和execute-的方法区别" class="headerlink" title="12. 线程池中submit()和execute()的方法区别"></a>12. 线程池中submit()和execute()的方法区别</h2><ul><li>execute()：只能执行 Runnable 类型的任务。</li><li>submit()：可以执行 Runnable 和 Callable 类型的任务。</li></ul><p>Callable类型的任务可以获取执行的返回结果，而Runnable执行无返回值；</p><h2 id="13-Java如何保证多线程运行安全"><a href="#13-Java如何保证多线程运行安全" class="headerlink" title="13. Java如何保证多线程运行安全"></a>13. Java如何保证多线程运行安全</h2><ul><li>使用安全类，比如java.util.concurrent下的类；</li><li>使用自动锁synchronized；</li><li>使用手动锁lock;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br>lock.lock();<br><span class="hljs-keyword">try</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;获得锁&quot;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-comment">//todo: handle exception</span><br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;释放锁&quot;</span>);<br>    lock.unlock();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="14-多线程中synchronized锁升级原理是什么"><a href="#14-多线程中synchronized锁升级原理是什么" class="headerlink" title="14. 多线程中synchronized锁升级原理是什么"></a>14. 多线程中synchronized锁升级原理是什么</h2><p>在锁对象的对象头里面有一个 threadid 字段，在第一次访问的时候 threadid 为空，jvm 让其持有偏向锁，并将 threadid 设置为其线程 id，再次进入的时候会先判断 threadid 是否与其线程 id 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁，此过程就构成了 synchronized 锁的升级。</p><p>锁升级是为了减低了锁带来的性能消耗。在 Java 6 之后优化 synchronized 的实现方式，使用了偏向锁升级为轻量级锁再升级到重量级锁的方式，从而减低了锁带来的性能消耗。</p><h2 id="15-死锁"><a href="#15-死锁" class="headerlink" title="15. 死锁"></a>15. 死锁</h2><h3 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁"></a>什么是死锁</h3><p>当线程A持有独占锁a，并尝试去获取独占锁b的同时，线程B持有独占锁b，并尝试获取独占锁a的情况下，就会发生AB两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。</p><h3 id="如何防范死锁"><a href="#如何防范死锁" class="headerlink" title="如何防范死锁"></a>如何防范死锁</h3><ul><li>尽量使用 tryLock(long timeout, TimeUnit unit)的方法(ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁。</li><li>尽量使用 java.util.concurrent 并发类代替自己手写锁。</li><li>尽量降低锁的使用粒度，尽量不要几个功能用同一把锁。</li><li>尽量减少同步的代码块。</li></ul><h4 id=""><a href="#" class="headerlink" title=" "></a> </h4><h2 id="16-ThreadLocal是什么，有哪些应用场景"><a href="#16-ThreadLocal是什么，有哪些应用场景" class="headerlink" title="16. ThreadLocal是什么，有哪些应用场景"></a>16. ThreadLocal是什么，有哪些应用场景</h2><p>为每个使用该变量的线程提供独立的变量副本，每个线程都可以独立改变自己的副本，并且不会影响其他线程对应的副本；</p><h2 id="17-说一下atomic原理"><a href="#17-说一下atomic原理" class="headerlink" title="17. 说一下atomic原理"></a>17. 说一下atomic原理</h2><p>利用CAS（Compare And Swap）、volatile和native方法保证原子操作，从而避免synchronized的高开销，执行效率大大提升；</p><h1 id="18-讲讲进程、线程和协程的区别"><a href="#18-讲讲进程、线程和协程的区别" class="headerlink" title="18. 讲讲进程、线程和协程的区别"></a>18. 讲讲进程、线程和协程的区别</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程是具有一定独立功能的程序在一个数据集上的一次动态执行过程，是操作系统分配和调度的独立单位。也是应用程序的载体。</p><p>进程一般由程序、数据集和进程控制块三部分组成。</p><ul><li>程序用于描述进程需要完成的功能；</li><li>数据集是程序在执行过程中所需要的数据和工作区；</li><li>程序控制块包括进程的描述信息和控制信息，是进程存在的唯一标识；</li></ul><p>进程具有下列特征：</p><ul><li>动态性：进程是程序的一次执行过程，是临时的、有生命周期的、动态产生/消亡的；</li><li>并发性：任何进程都可以同其他进程一起并发执行；</li><li>独立性：进程是系统进行数据分配和调度的一个独立单位；</li><li>结构性：进程由程序、数据和进程控制块三部分组成；</li></ul><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程是程序执行中的一个单一顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以拥有一个或多个线程，各个线程之间共享程序的内存空间（也就是所在进程的内存空间）。</p><h2 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h2><ul><li>线程是程序执行的最小单位，进程是操作系统分配资源的最小单位；</li><li>一个进程由一个或多个线程组成，线程是一个进程代码的不同执行路线；</li><li>进程之间相互独立，同一个进程下的各个线程之间共享程序的内存空间；</li><li>调度和切换：线程的上下文切换要比进程的上下文切换快得多；</li></ul><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220302152529598.png" alt="image-20220302152529598"></p><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>一种基于线程之上但又比线程更加轻量级的存在，这种由程序自己写程序来管理的轻量级线程叫做“用户空间线程”</p>]]></content>
    
    
    <categories>
      
      <category>面试盘点</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java面试汇总</title>
    <link href="/2022/02/24/java-core/java-summary/"/>
    <url>/2022/02/24/java-core/java-summary/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Java基础"><a href="#一、Java基础" class="headerlink" title="一、Java基础"></a>一、Java基础</h1><h2 id="1-JDK和JRE有什么区别？"><a href="#1-JDK和JRE有什么区别？" class="headerlink" title="1. JDK和JRE有什么区别？"></a>1. JDK和JRE有什么区别？</h2><ul><li>JDK：Java Development Kit的简称，提供Java开发环境和运行环境；</li><li>JRE：Java Runtime Environment的简称，Java运行环境；</li></ul><p>简单来说：JDK包含JRE，想要开发Java程序需要安装JDK；想要运行Java运行只需要JRE；</p><h2 id="2-和-equals的区别"><a href="#2-和-equals的区别" class="headerlink" title="2. == 和 equals的区别"></a>2. == 和 equals的区别</h2><h3 id="2-1-基本区别"><a href="#2-1-基本区别" class="headerlink" title="2.1 基本区别"></a>2.1 基本区别</h3><ul><li>基本类型：比较值是否相同</li><li>引用类型：比较引用是否相同</li></ul><p>equals本质上也是 ==，只不过String和Integer重写了equals方法，所以变成了值比较；</p><p>如果要保证两个对象相等就要重写它的equals方法</p><h3 id="2-2-equals和hashCode的区别"><a href="#2-2-equals和hashCode的区别" class="headerlink" title="2.2 equals和hashCode的区别"></a>2.2 equals和hashCode的区别</h3><ul><li>两个对象的hashCode()相同，equals()不一定相同；</li><li>两个对象equals()相同，hashCode()一定相同；</li></ul><h2 id="3-final在java类中的作用"><a href="#3-final在java类中的作用" class="headerlink" title="3. final在java类中的作用"></a>3. final在java类中的作用</h2><ul><li>final修饰的类不能被继承；</li><li>final修饰的方法不能被重写；</li><li>final修饰的量叫常量，常量必须初始化，初始化后的值不能被修改；</li></ul><h2 id="4-Java的基础类型"><a href="#4-Java的基础类型" class="headerlink" title="4. Java的基础类型"></a>4. Java的基础类型</h2><p>有8种，分别是：byte, boolean, char, short, float, long和double</p><p>String不属于Java的基本类型，属于对象；</p><h2 id="5-Java操作字符串的类"><a href="#5-Java操作字符串的类" class="headerlink" title="5. Java操作字符串的类"></a>5. Java操作字符串的类</h2><p>有：String，StringBuilder和StringBuffer。其中StringBuffer是线程安全的，而StringBuilder是非线程安全的。但是StringBuilder的性能高于StringBuffer。所以单线程环境下使用StringBuilder，多线程环境下使用StringBuffer；</p><h2 id="6-String-str-“i”和String-str-new-String-“i”-区别"><a href="#6-String-str-“i”和String-str-new-String-“i”-区别" class="headerlink" title="6. String str = “i”和String str = new String(“i”)区别"></a>6. String str = “i”和String str = new String(“i”)区别</h2><ul><li><p>String str = “i”会在JVM虚拟机中分配到常量池</p></li><li><p>String str = new String(“i”)会被分配到堆内存中（并且会产生冗余对象）；</p></li></ul><h2 id="7-String类的常用方法"><a href="#7-String类的常用方法" class="headerlink" title="7. String类的常用方法"></a>7. String类的常用方法</h2><ul><li>indexOf()：返回指定字符串的索引</li><li>charAt()：返回指定索引处的字符</li><li>replace()：字符串替换；</li><li>trim()：去除字符串两端的空白</li><li>split()：分割字符串，返回一个分割后的字符串数组</li><li>getBytes()：返回字符串的byte类型数组</li><li>length()：返回字符串长度</li><li>toLowerCase()：字符串转小写</li><li>toUpperCase()：字符串转大写</li><li>substring()：截取字符串</li><li>equals()：字符串比较</li></ul><h2 id="8-抽象类必须要有抽象方法吗？"><a href="#8-抽象类必须要有抽象方法吗？" class="headerlink" title="8. 抽象类必须要有抽象方法吗？"></a>8. 抽象类必须要有抽象方法吗？</h2><p>不需要，抽象类不一定非要有抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHi</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;hi~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>普通类不能包括抽象方法，抽象类可以包括抽象方法；</li><li>抽象类不能直接实例化，普通类可以直接实例化；</li><li>抽象类不能被final修饰（因为final 修饰的类不能被继承）</li></ul><h2 id="9-接口和抽象类的区别"><a href="#9-接口和抽象类的区别" class="headerlink" title="9. 接口和抽象类的区别"></a>9. 接口和抽象类的区别</h2><p>实现：抽象子类使用<code>extends</code>继承，接口必须使用<code>implements</code>实现；</p><p>构造函数：抽象类有构造函数，接口没有（当然1.8中接口可以有default方法）</p><p>实现数量：类可以实现很多个接口，但是只能继承一个抽象类；</p><p>访问修饰符：接口的方法默认使用public修饰，抽象类无此限制；</p><h2 id="10-Java-I-O流"><a href="#10-Java-I-O流" class="headerlink" title="10. Java I/O流"></a>10. Java I/O流</h2><ul><li>功能分类：输入流、输出流</li><li>类型分类：字节流（8位）和字符流（16位）</li></ul><h2 id="11-BIO、NIO、AIO区别"><a href="#11-BIO、NIO、AIO区别" class="headerlink" title="11. BIO、NIO、AIO区别"></a>11. BIO、NIO、AIO区别</h2><ul><li>BIO：Block IO同步阻塞式IO，平常使用的传统IO，特点是简单方便使用，并发能力低；</li><li>NIO：同步非阻塞IO，客户端和服务端通过Channel（通道）通讯，实现了多路复用；</li><li>AIO：异步非阻塞IO，异步IO的操作基于事件和回调机制；</li></ul><h2 id="12-File常用方法"><a href="#12-File常用方法" class="headerlink" title="12. File常用方法"></a>12. File常用方法</h2><ul><li>exists()：检测文件路径是否存在；</li><li>createFile()：创建文件；</li><li>createDirectory()：创建目录；</li><li>delete()：删除一个文件或者目录</li><li>copy()：复制文件</li><li>move()：移动文件</li><li>size()：查看文件个数</li><li>read()：读取文件</li><li>write()：写入文件</li></ul><h1 id="二、容器"><a href="#二、容器" class="headerlink" title="二、容器"></a>二、容器</h1><h2 id="13-java容器分类"><a href="#13-java容器分类" class="headerlink" title="13. java容器分类"></a>13. java容器分类</h2><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220224165841246.png" alt="image-20220224165841246"></p><h2 id="14-HashMap和Hashtable的区别"><a href="#14-HashMap和Hashtable的区别" class="headerlink" title="14. HashMap和Hashtable的区别"></a>14. HashMap和Hashtable的区别</h2><ul><li>存储：HashMap允许key和value为null，而Hashtable不允许；</li><li>线程安全：Hashtable是线程安全的，而HashMap是非线程安全的；</li><li>推荐使用：Hashtable是保留类不建议使用，单线程环境用HashMap，多线程用ConcurrentHashMap；</li></ul><h2 id="15-如何决定使用HashMap还是TreeMap"><a href="#15-如何决定使用HashMap还是TreeMap" class="headerlink" title="15. 如何决定使用HashMap还是TreeMap"></a>15. 如何决定使用HashMap还是TreeMap</h2><ul><li>想要对一个key集合进行有序遍历，使用TreeMap；</li><li>只做插入、删除、定位一个元素的操作，使用HashMap；</li></ul><h2 id="16-HashMap-HashSet的实现原理"><a href="#16-HashMap-HashSet的实现原理" class="headerlink" title="16. HashMap/HashSet的实现原理"></a>16. HashMap/HashSet的实现原理</h2><p>开个专题学习</p><h2 id="17-ArrayList和LinkedList的区别"><a href="#17-ArrayList和LinkedList的区别" class="headerlink" title="17. ArrayList和LinkedList的区别"></a>17. ArrayList和LinkedList的区别</h2><ul><li><p><strong>数据结构：</strong>ArrayList是动态数组，LinkedList是双链表结构；</p></li><li><p><strong>随机访问：</strong>ArrayList是数组结构，所以随机访问效率高；LinkedList是线性数据存储，所以需要移动指针从前往后遍历；</p></li><li><p><strong>增加和删除效率：</strong>非首尾增加删除操作，LinkedList效率比ArrayList高；</p></li></ul><p>综述：需要频繁读取集合中的元素，推荐使用ArrayList，插入删除操作比较多就用LinkedList；</p><h2 id="18-数组和List的转换"><a href="#18-数组和List的转换" class="headerlink" title="18. 数组和List的转换"></a>18. 数组和List的转换</h2><ul><li>数组转List：<code>Arrays.asList(array)</code>；</li><li>List转数组：List自带的toArray()方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;sdv&quot;</span>);<br>list.add(<span class="hljs-string">&quot;drgd&quot;</span>);<br>Object[] objects = list.toArray();<br>System.out.println(Arrays.toString(objects));<br><br>String[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;ssdv&quot;</span>, <span class="hljs-string">&quot;svsdfb&quot;</span>&#125;;<br>System.out.println(Arrays.asList(array));<br></code></pre></td></tr></table></figure><h2 id="19-ArrayList和Vector的区别"><a href="#19-ArrayList和Vector的区别" class="headerlink" title="19. ArrayList和Vector的区别"></a>19. ArrayList和Vector的区别</h2><ul><li>线程安全：Vector使用Synchronized实现同步，是线程安全的；而ArrayList是非线程安全的；</li><li>性能：ArrayList性能优于Vector；</li><li>扩容：两者都会根据实际需要动态扩容，但是Vector扩容每次增加1倍，ArrayList只会增加50%；</li></ul><h2 id="20-Queue中的poll-和remove-的区别"><a href="#20-Queue中的poll-和remove-的区别" class="headerlink" title="20. Queue中的poll()和remove()的区别"></a>20. Queue中的poll()和remove()的区别</h2><ul><li>相同：返回第一个元素，并在队列中删除返回的对象；</li><li>不同：poll()没元素返回null，remove()会直接抛出NoSuchElementException异常；</li></ul><h2 id="21-哪些集合类是线程安全的"><a href="#21-哪些集合类是线程安全的" class="headerlink" title="21. 哪些集合类是线程安全的"></a>21. 哪些集合类是线程安全的</h2><p>Vector、Hashtable、Stack是线程安全的，HashMap是非线程安全的，对应的线程安全类是ConcurrentHashMap;</p><h2 id="22-迭代器iterator是什么"><a href="#22-迭代器iterator是什么" class="headerlink" title="22. 迭代器iterator是什么"></a>22. 迭代器iterator是什么</h2><p>提供遍历任何Collection的接口，可以从一个Collection中使用迭代器方法获取迭代器实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Iterator&lt;String&gt; it = List.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext()) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> it.next();<br>    System.out.println(obj);<br>&#125;<br></code></pre></td></tr></table></figure><p>Iterator特点是安全，因为可以确保在当前遍历集合元素被更改时，抛出ConcurrentModificationException异常；</p><h2 id="23-怎么确保一个集合不能被更改"><a href="#23-怎么确保一个集合不能被更改" class="headerlink" title="23. 怎么确保一个集合不能被更改"></a>23. 怎么确保一个集合不能被更改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-string">&quot;x&quot;</span>);<br>Collection&lt;String&gt; clist = Collections.unmodifiableCollection(list);<br>clist.add(<span class="hljs-string">&quot;y&quot;</span>); <span class="hljs-comment">// throw error</span><br>System.out.println(list.size());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>面试技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM知识汇总</title>
    <link href="/2022/02/21/jvm/jvm-learning/"/>
    <url>/2022/02/21/jvm/jvm-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="1-JVM内存区域"><a href="#1-JVM内存区域" class="headerlink" title="1. JVM内存区域"></a>1. JVM内存区域</h1><h2 id="1-1-JVM内存组成及其作用"><a href="#1-1-JVM内存组成及其作用" class="headerlink" title="1.1. JVM内存组成及其作用"></a>1.1. JVM内存组成及其作用</h2><p>如下图所示：</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220221232111788.png" alt="image-20220221232111788"></p><p>JVM总共包含两个子系统和两个组件。分别是：</p><ul><li>两个子系统：类加载器和执行引擎；</li><li>两个子组件：运行时数据区和本地接口；</li></ul><p>它们各自有不同的作用：</p><ul><li>类加载器：根据给定的全限定类型装在class文件到运行数据域中的方法域中；</li><li>执行引擎：执行classes文件中的指令；</li><li>本地接口：与本地方法库交互，是其它编程语言交互的接口；</li><li>运行时数据区域：也就是常说的JVM内存；</li></ul><h2 id="1-2-JVM运行机制"><a href="#1-2-JVM运行机制" class="headerlink" title="1.2 JVM运行机制"></a>1.2 JVM运行机制</h2><ol><li>Java文件源码编译成.class字节码文件，加载至类加载器中；</li><li>类加载器再将.class文件加载到JVM中；</li></ol><p>通俗来说：类加载器将类的.class文件读入内存，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构；</p><h2 id="1-3-JVM运行时数据"><a href="#1-3-JVM运行时数据" class="headerlink" title="1.3 JVM运行时数据"></a>1.3 JVM运行时数据</h2><ul><li>程序计数器：当前线程执行字节码的行号指示器，字节码解析的工作是通过改变计数器的值，来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能；</li><li>Java虚拟机栈：存储局部变量表、操作数栈、动态链接以及方法出口等；</li><li>本地方法栈：作用与虚拟机栈一样，只是针对的是虚拟机调用Native方法服务的；</li><li>Java堆：虚拟机中内存最大的一块，被所有线程共享，几乎所有对象的实例都在这里分配内存；</li><li>方法区：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据；</li></ul><h2 id="1-4-深拷贝浅拷贝"><a href="#1-4-深拷贝浅拷贝" class="headerlink" title="1.4 深拷贝浅拷贝"></a>1.4 深拷贝浅拷贝</h2><ul><li>浅拷贝：增加一个指针指向已存在的内存地址；</li><li>深拷贝：增加一个指针并且申请一个新内存，使这个增加的指针指向新的内存；</li></ul><blockquote><p>使用深拷贝时，释放内存不会因为出现浅拷贝释放同一个内存的错误</p></blockquote><ul><li>浅复制：仅仅指向被复制的内存地址，如果原地址变化，浅复制出来的对象也会改变；</li><li>深复制：在计算机内存中开辟一块新的内存地址用于存放复制的对象；</li></ul><h2 id="1-5-堆栈的区别"><a href="#1-5-堆栈的区别" class="headerlink" title="1.5 堆栈的区别"></a>1.5 堆栈的区别</h2><h3 id="堆-Heap"><a href="#堆-Heap" class="headerlink" title="堆 Heap"></a>堆 Heap</h3><ol><li>内存空间不连续，内存分配在<strong>运行期</strong>确认，大小不固定；</li><li>GC有不同的算法回收（标记-清除，标记-复制，标记，压缩，分代算法）</li><li>存放的是对象（包括静态对象）的实例和数组，因此更关注数据的存储；</li><li>对于整个应用程序可见，并且共享；</li></ol><h3 id="栈-Stack"><a href="#栈-Stack" class="headerlink" title="栈 Stack"></a>栈 Stack</h3><ol><li>先进后出原则，物理地址分配连续，性能快；</li><li>内存分配是在<strong>编译期</strong>确认，大小固定；</li><li>局部变量、操作数栈，返回结果，静态变量等；</li><li>线程私有，生命周期和线程相同；</li></ol><h1 id="2-Hotspot虚拟机对象探索"><a href="#2-Hotspot虚拟机对象探索" class="headerlink" title="2. Hotspot虚拟机对象探索"></a>2. Hotspot虚拟机对象探索</h1><h2 id="2-1-对象创建"><a href="#2-1-对象创建" class="headerlink" title="2.1 对象创建"></a>2.1 对象创建</h2><p>记住一点：只有clone和反序列化创建对象没调用构造函数，其他的创建对象方式都调用了构造函数。</p><p>对象创建的流程如下：</p><ul><li>检查常量池中是否有已经加载的类<ul><li>没有：执行对应的类加载器；</li><li>有：从内存中直接加载，不需要调用对应的类加载器；</li></ul></li><li>当前内存区域是否规整？<ul><li>是：使用“指针碰撞”来分配内存</li><li>不是：从空闲列表中分配内存</li></ul></li><li>考虑并发问题，比如CAS同步处理以及本地线程分配缓冲（TLAB）</li><li>设置对象的必要信息（元信息、哈希码）；</li><li>执行<code>&lt;init&gt;</code>方法，完成对象创建；</li></ul><h2 id="2-2-对象内存分配"><a href="#2-2-对象内存分配" class="headerlink" title="2.2 对象内存分配"></a>2.2 对象内存分配</h2><p>对象分配内存（在堆中分配）也有两种方式：</p><ul><li>指针碰撞：规整内存的前提下，将用过的内存放一边，空闲放另一边。分配时将位于中间的指针指示器向空闲的内存移动一段与对象大小同等的距离，从而完成分配工作；</li><li>空闲列表：不规整内存的前提下，需要有JVM维护一个列表记录哪些内存空间课哟就那个，这样在分配的时候可以从列表中查询到足够大的内存分配给对象；</li></ul><h2 id="2-3-并发安全问题处理"><a href="#2-3-并发安全问题处理" class="headerlink" title="2.3 并发安全问题处理"></a>2.3 并发安全问题处理</h2><p>处理并发安全问题也有如下两个方式：</p><ul><li>采用CAS（什么是CAS）+失败重试来保障更新操作的原子性；</li><li>按照线程划分在不同空间进行内存分配，即在每个线程在Java堆中预先分配一小块内存，成为TLAB。哪个线程要分配内存，就在哪个线程的TLAB上分配。只有TLAB用完并分配新的TLAB才需要同步锁。借助<code>-XX:+/-UserTLAB</code>参数设定JVM是否使用TLAB；</li></ul><h2 id="2-4-对象的访问定位"><a href="#2-4-对象的访问定位" class="headerlink" title="2.4 对象的访问定位"></a>2.4 对象的访问定位</h2><p>Java需要通过JVM栈上的引用访问堆中的具体对象，对象访问直接取决于JVM虚拟机的实现。主流的方式有<strong>句柄</strong>和<strong>直接指针</strong>两种方式：</p><ul><li>句柄：指向指针的指针，维护对象的指针。不直接指向对象，而是指向对象的地址（句柄不发生变化，指向固定的内存地址），再由对象的指针指向对象的真是内存地址；</li><li>指针：指向对象，代表一个对象在内存中的起始地址；</li></ul><h3 id="句柄访问"><a href="#句柄访问" class="headerlink" title="句柄访问"></a>句柄访问</h3><p>句柄池是Java堆中的一块内存，引用存储对象的句柄地址，句柄包含了<strong>对象实例数据</strong>与<strong>对象类型数据</strong>各自的<strong>具体地址</strong>信息，具体构造如下：</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220222115625143.png" alt="image-20220222115625143"></p><p>优点：引用中存储的是<strong>稳定</strong>的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变<strong>句柄中的实例数据指针</strong>，而引用本身不需要修改；</p><h3 id="直接指针"><a href="#直接指针" class="headerlink" title="直接指针"></a>直接指针</h3><p>使用直接指针访问，引用中存储的是对象地址，在Java堆对象内部的布局中就必须考虑如何放置访问<strong>类型数据</strong>的相关信息；</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220222120220653.png" alt="image-20220222120220653"></p><p>优势：速度快，节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多后也是非常可观的成本。HotSpot虚拟机使用的就是这种方式。</p><h1 id="3-内存溢出异常"><a href="#3-内存溢出异常" class="headerlink" title="3. 内存溢出异常"></a>3. 内存溢出异常</h1><h2 id="3-1-什么是内存泄露，Java存在内存泄露"><a href="#3-1-什么是内存泄露，Java存在内存泄露" class="headerlink" title="3.1 什么是内存泄露，Java存在内存泄露"></a>3.1 什么是内存泄露，Java存在内存泄露</h2><p>内存泄露指的是不再被使用的对象或者变量一直占据在内存中，理论上说Java有GC垃圾回收机制，不再被使用的对象，会被GC自动回收，自动从内存中清除；</p><p>但即便如此，Java依然存在内存泄露的情况：即<strong>长生命周期的对象持有短声明周期对象的引用</strong>就可能发生内存泄露，尽管短生命周期对象已经不再需要，但由于长生命周期的对象一直持有短生命周期的引用导致它不能被GC回收。这样就会产生JVM内存泄露；</p><h1 id="4-GC垃圾收集器"><a href="#4-GC垃圾收集器" class="headerlink" title="4. GC垃圾收集器"></a>4. GC垃圾收集器</h1><h2 id="4-1简述Java垃圾回收机制"><a href="#4-1简述Java垃圾回收机制" class="headerlink" title="4.1简述Java垃圾回收机制"></a>4.1简述Java垃圾回收机制</h2><p>在Java中程序不需要显示释放一个对象的内存，一切都是交给JVM虚拟机完成。在JVM中存在一个垃圾回收线程为低优先级，正常情况下不会执行，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行。扫描那些没有被任何对象引用的对象，并将其添加到要回收的集合中，完成回收。</p><h2 id="4-2-什么是GC？为什么要GC"><a href="#4-2-什么是GC？为什么要GC" class="headerlink" title="4.2 什么是GC？为什么要GC"></a>4.2 什么是GC？为什么要GC</h2><p>GC是（Garbage Collection）的意思，内存处理是编程人员容易出问题的地方，忘记或错误的内存回收会导致程序或系统不稳定甚至崩溃。Java提供GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的。</p><p>需要注意的是：和C++不同，<strong>Java没有提供释放已分配内存的显式操作；</strong></p><h2 id="4-3-垃圾回收的优点和原理"><a href="#4-3-垃圾回收的优点和原理" class="headerlink" title="4.3 垃圾回收的优点和原理"></a>4.3 垃圾回收的优点和原理</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>对于GC来说，当程序员创建对象时，GC就开始监控对象的地址、大小以及使用情况。</p><p>通常来说，GC采用有向图的方式记录和管理堆（Heap）中的所有对象，通过这种方式确定哪些对象是“可达的”；哪些对象是“不可达的”，当GC确定一些对象“不可达”时，GC就有责任回收这些内存空间；</p><blockquote><p>程序员可以显式调用<code>System.gc()</code>来通知GC运行，但是Java语言不能保证GC一定会执行。</p></blockquote><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>可以看出，垃圾回收机制有效地防止了内存泄露，可以有效地使用可使用的内存。并且作为一个单独的低级别线程运行，在不可预知的情况下对内存堆中已经死亡或者很长时间没有使用的对象进行清除和回收。</p><h3 id="垃圾回收的方式"><a href="#垃圾回收的方式" class="headerlink" title="垃圾回收的方式"></a>垃圾回收的方式</h3><p>有下面三种回收方式：</p><ul><li>复制垃圾回收</li><li>标记垃圾回收</li><li>增量垃圾回收</li></ul><h2 id="4-4-Java中的引用类型"><a href="#4-4-Java中的引用类型" class="headerlink" title="4.4 Java中的引用类型"></a>4.4 Java中的引用类型</h2><ul><li>强引用：发生gc时不会被回收；(最经典的：去看ArrayList的clear方法)<ul><li><strong>被GC回收的时间：</strong>从来不会被回收</li><li><strong>用途：</strong>对象的一般状态</li><li><strong>生存时间：</strong>JVM停止运行时终止</li></ul></li><li>软引用：有用但不是必须的对象，在发生内存溢出之前会被回收；<ul><li><strong>被GC回收的时间：</strong>内存不足时</li><li><strong>用途：</strong>对象缓存</li><li><strong>生存时间：</strong>内存不足时终止</li></ul></li><li>弱引用：有用但不是必须的对象，在下次GC时会被回收；<ul><li><strong>被GC回收的时间：</strong>正常垃圾回收</li><li><strong>用途：</strong>对象缓存</li><li><strong>生存时间：</strong>垃圾回收后终止</li></ul></li><li>虚引用：（幽灵引用/幻引用）：无法通过虚拟引用获得对象，用PhantomReference实现幻引用，虚引用的用途是在GC时返回一个通知；<ul><li><strong>被GC回收的时间：</strong>正常垃圾回收时</li><li><strong>用途：</strong>跟踪对象的垃圾回收</li><li><strong>生存时间：</strong>垃圾回收后终止</li></ul></li></ul><h2 id="4-5-JVM对象回收"><a href="#4-5-JVM对象回收" class="headerlink" title="4.5 JVM对象回收"></a>4.5 JVM对象回收</h2><h3 id="判断对象能否被回收"><a href="#判断对象能否被回收" class="headerlink" title="判断对象能否被回收"></a>判断对象能否被回收</h3><p>有两种方法：</p><ul><li>引用计数器法：每个对象创建一个引用计数，有对象引用计数器+1，引用释放计数器-1，计数器为0代表没有引用。缺点就是当出现循环引用，该对象无法被回收；</li><li>可达性分析法：从GC Roots开始向下搜索，搜索所走过的路径成为引用链，当一个对象到GC Roots没有任何引用链相连时，证明此对象是可以被回收的；</li></ul><h3 id="对象什么时候可以被垃圾回收"><a href="#对象什么时候可以被垃圾回收" class="headerlink" title="对象什么时候可以被垃圾回收"></a>对象什么时候可以被垃圾回收</h3><p>当对象对当前使用这个对象的应用程序变得不可触及时，这个对象就可以被回收；</p><p>需要注意的是：通常垃圾回收不会发生在永久代，如果永久代满了或超过临界值会触发Full GC。因此<strong>正确的永久代大小对避免Full GC是非常至关重要的。</strong></p><h2 id="4-6-JVM垃圾清除算法"><a href="#4-6-JVM垃圾清除算法" class="headerlink" title="4.6 JVM垃圾清除算法"></a>4.6 JVM垃圾清除算法</h2><h3 id="标记——清除算法"><a href="#标记——清除算法" class="headerlink" title="标记——清除算法"></a>标记——清除算法</h3><p>标记无用对象，然后清除回收；</p><p><strong>优点：</strong>实现简单，不需要对象进行移动；</p><p><strong>缺点：</strong>效率不高，无法清除垃圾碎片；</p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>按照容量划分两个大小相等的内存区域，一块用完后将活着的对象复制到另一块上，然后再把已使用的内存空间一次性清理；</p><p><strong>优点：</strong>按顺序分配内存即可，实现简单，运行高效，不用考虑内存碎片；</p><p><strong>缺点：</strong>可用的内存大小缩小为原来的一半，对象存活率高时会频繁进行复制；</p><h3 id="标记——整理算法"><a href="#标记——整理算法" class="headerlink" title="标记——整理算法"></a>标记——整理算法</h3><p>标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存；</p><p><strong>优点：</strong>解决了标记——清理算法存在的内存碎片问题；</p><p><strong>缺点：</strong>仍需要进行局部对象移动，一定程度上降低了效率；</p><h3 id="分代算法"><a href="#分代算法" class="headerlink" title="分代算法"></a>分代算法</h3><p>根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代采用复制算法，老年代采用标记——整理算法；</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220222141359995.png" alt="image-20220222141359995"></p><h2 id="4-7-垃圾回收器的工作原理"><a href="#4-7-垃圾回收器的工作原理" class="headerlink" title="4.7 垃圾回收器的工作原理"></a>4.7 垃圾回收器的工作原理</h2><p>有7种作用不同分代的收集器，如下图：</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220222141536146.png" alt="image-20220222141536146"></p><p>回收新生代的收集器：</p><ul><li>Serial</li><li>ParNew</li><li>Parallel Scavenge</li></ul><p>回收老年带的收集器：</p><ul><li>Serial Old</li><li>Parallel Old</li><li>CMS</li></ul><p>回收整个Java堆的收集器：G1</p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul><li><strong>Serial（复制算法）</strong>：新生代单线程收集器，标记和清理都是单线程，优点是简单高效；</li><li><strong>ParNew（复制算法）</strong>：新生代并行收集器，实际上是Serial收集器的多线程版本，在多核CPU环境下有着比Serial更好的表现；</li><li><strong>Parallel Scavenge（复制算法）</strong>：新生代并行收集器，高吞吐量，高效利用CPU，适合后台应用等对交互响应要求不高的场景；</li><li><strong>Serial Old（标记——整理）</strong>：老年代单线程收集，Serial收集器的老年代版本；</li><li><strong>Parallel Old（标记——整理）</strong>：老年代并行收集器，吞吐量优先；Parallel Scavenge收集器的老年代版本；</li><li><strong>CMS（标记——清除算法）</strong>：老年代并行收集器，以获取最短回收停顿时间为目标的收集器，具有高并发、低停顿的特点，追求最短GC回收停顿时间；</li><li><strong>G1（标记——整理算法）</strong>：Java堆并行收集器，G1收集器是JDK1.7提供的新收集器，此外G1回收的范围是整个Java堆（包括新生代、老年代），前6种收集器回收的范围仅限于新生代和老年代；</li></ul><h3 id="CMS垃圾回收器"><a href="#CMS垃圾回收器" class="headerlink" title="CMS垃圾回收器"></a>CMS垃圾回收器</h3><p>英文全称Concurrent Mark-Sweep简称，以牺牲吞吐量为代价获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上非常适合。在JVM参数上用<code>-XX:+UseConcMarkSweepGC</code>来指定使用CMS垃圾回收器。</p><p>由于使用“标记——清除”算法来实现，因此在gc过程中容易产生大量内存碎片，当剩余内存不能满足程序运行要求，系统会出现<code>Concurrent Mode Failure</code>，临时CMS会采用Serial Old回收器进行垃圾清除，此时性能将会被降低；</p><h3 id="垃圾回收器的工作原理"><a href="#垃圾回收器的工作原理" class="headerlink" title="垃圾回收器的工作原理"></a>垃圾回收器的工作原理</h3><p>分代回收器有两个分区：新生代和老年代，新生代默认空间占比总空间的1/3，老生代的默认占比是2/3；</p><p>分区如下：</p><ul><li>新生代：Eden，To Survivor，From Survivor。默认占比是8:1:1，执行流程如下：<ul><li>将Eden + From Survivor存活的对象放入To Survivor区；</li><li>清空Eden和From Survivor分区；</li><li>交换From Survivor 和 To Survivor分区</li></ul></li></ul><p>每次在From Survivor到To Survivor移动时都存活的对象，年龄+1；当年龄达到15升级为老年代，大对象也会直接进入老年代；</p><ul><li><p>老年代当空间占用达到某个值后就会触发Full GC，一般通过标记——整理算法执行</p></li><li><p>以此循环往复就构成了整个分代垃圾回收的整体执行流程；</p></li></ul><h1 id="5-内存分配策略"><a href="#5-内存分配策略" class="headerlink" title="5. 内存分配策略"></a>5. 内存分配策略</h1><h2 id="5-1-内存分配以及回收策略"><a href="#5-1-内存分配以及回收策略" class="headerlink" title="5.1 内存分配以及回收策略"></a>5.1 内存分配以及回收策略</h2><p>自动内存管理，最终要解决的问题也是内存分配和内存回收，这里谈谈内存分配：</p><ul><li>通常在Java堆上分配（随着JVM优化技术，某些场景下也在栈上分配）</li><li>分配的区域有下面两种：<ul><li>未开启TLAB，在新生代的Eden区分配，少数情况直接会在老年代分配；</li><li>开启TLAB，按照线程优先在TLAB上分配；</li></ul></li></ul><h2 id="5-2-对象在内存区域的分配"><a href="#5-2-对象在内存区域的分配" class="headerlink" title="5.2 对象在内存区域的分配"></a>5.2 对象在内存区域的分配</h2><h3 id="普世规则"><a href="#普世规则" class="headerlink" title="普世规则"></a>普世规则</h3><h4 id="对象优先在Eden区分配"><a href="#对象优先在Eden区分配" class="headerlink" title="对象优先在Eden区分配"></a>对象优先在Eden区分配</h4><p>多数情况下，对象都是在新生代的Eden区分配，当Eden区没有足够的空间，虚拟机就会触发一次Minor GC。如果Minor GC后还是没有足够的空间，则<strong>启用分配担保机制</strong>在老年代分配；</p><ul><li><strong>Minor GC：</strong>发生在新生代的GC，Java对象大多都是朝生夕死，所有Minor GC非常频繁，一般回收速度也非常快；</li><li><strong>Major GC / Full GC：</strong>发生在老年代GC，出现Major GC通常会伴随至少一次Minor GC，Major GC的速度会比Minor GC慢10倍以上（知道为什么嘛？因为老年代的GC不经常发生）</li></ul><h4 id="大对象直接进老年代"><a href="#大对象直接进老年代" class="headerlink" title="大对象直接进老年代"></a>大对象直接进老年代</h4><p>大对象指的是需要大量连续内存空间的对象，频繁出现大量对象是致命的，会导致内存还有不少空间的情况下提前触发GC以获取足够的连续空间来安置新对象；</p><p>由于新生代使用的是复制算法回收垃圾，假如大对象一开始就在新生代分配就会导致Eden区和两个Survivor区之间发生大量内存复制。<strong>所以大对象直接进老年代；</strong></p><h4 id="长期存活对象将进入老年代"><a href="#长期存活对象将进入老年代" class="headerlink" title="长期存活对象将进入老年代"></a>长期存活对象将进入老年代</h4><p>由于JVM采用分代收集来管理内存，那么在内存回收时必须判断哪些对象放在新生代，哪些对象放在老年代。</p><p>虚拟机给每个对象定义了一个对象年龄计数器：</p><ul><li>如果在Eden区出生，并且被Survivor容纳，年龄对象为1；</li><li>对象每在Survivor区逃过一次Minor GC，年龄就+1；</li><li>当年龄达到15，就会晋升到老年代；</li></ul><h1 id="6-虚拟机类加载机制"><a href="#6-虚拟机类加载机制" class="headerlink" title="6. 虚拟机类加载机制"></a>6. 虚拟机类加载机制</h1><h2 id="6-1-Java类加载机制"><a href="#6-1-Java类加载机制" class="headerlink" title="6.1 Java类加载机制"></a>6.1 Java类加载机制</h2><p>虚拟机把类的描述从Class文件加载到内存，并对数据进行校验，解析和初始化。最终形成可以被虚拟机直接使用的java类型；</p><h2 id="6-2-JVM加载Class文件的原理机制"><a href="#6-2-JVM加载Class文件的原理机制" class="headerlink" title="6.2 JVM加载Class文件的原理机制"></a>6.2 JVM加载Class文件的原理机制</h2><p>Java中的所有类，都需要类加载器装载到JVM中才能运行，类加载器本身也是一个类，而它的工作就是把class文件从硬盘读到内存中。写程序的时候，几乎不需要关心类加载，因为整个过程都是隐式装载的，除非有特殊用法，例如反射；</p><h2 id="6-3-类加载器过程"><a href="#6-3-类加载器过程" class="headerlink" title="6.3 类加载器过程"></a>6.3 类加载器过程</h2><h3 id="类装载的方式"><a href="#类装载的方式" class="headerlink" title="类装载的方式"></a>类装载的方式</h3><p>有下面两种：</p><ul><li>隐式装载：程序在运行过程中碰到new等方式生成的对象，隐式调用类装载器加载对应的类到jvm中；</li><li>显式装载：借助<code>Class.forName()</code>等方法显式加载需要的类；</li></ul><p>Java类的加载是动态的，为了节省内存开销，除了将程序运行的基础类完全加载到jvm中，剩下的其他类则在需要的时候再加载；</p><h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><p>定义：实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器；</p><p>主要有以下4种类加载器：</p><ul><li>启动类加载器（Bootstrap ClassLoader）：用来加载Java核心类库，无法被Java程序直接引用；</li><li>扩展类加载器（Extensions ClassLoader）：用来加载Java扩展库，Java虚拟机的实现会提供一个扩展库目录，该类加载器在此目录里面查找并加载Java类；</li><li>系统类加载器（System ClassLoader）：一般来说，Java应用的类都是由它完成加载的。可以通过<code>ClassLoader.getSystemClassLoader()</code>来获取；</li><li>用户自定义类加载器，通过继承<code>java.lang.ClassLoader</code>类实现；</li></ul><h3 id="类装载的执行过程"><a href="#类装载的执行过程" class="headerlink" title="类装载的执行过程"></a>类装载的执行过程</h3><ol><li><strong>加载：</strong>根据查找路径找到对应的class文件然后导入；</li><li><strong>验证：</strong>检查加载的class文件的正确性；</li><li><strong>准备：</strong>给类中的静态变量分配内存空间；</li><li><strong>解析：</strong>虚拟机将常量池中的符号引用替换成直接引用。符号引用就理解为一个标识，而在直接引用中指向内存中的地址；</li><li><strong>初始化：</strong>对静态变量和静态代码块执行初始化工作；</li></ol><h2 id="6-4-双亲委派模型"><a href="#6-4-双亲委派模型" class="headerlink" title="6.4 双亲委派模型"></a>6.4 双亲委派模型</h2><p>对于任何一个类，都需要由加载它的类加载器和这个类本身一同确立在JVM中的唯一性，每一个类加载器，都有一个独立的类名称空间，类加载器就是根据指定全限定名称将class文件加载到JVM内存，然后再转化为class对象。</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220222181549279.png" alt="image-20220222181549279"></p><ul><li>启动类加载器（Bootstrap ClassLoader）：虚拟机自身的一部分，用来加载JAVA_HOME/lib目录中的，或者被<code>-Xbootclasspath</code>参数指定的路径并且被虚拟机识别的类库；</li><li>扩展类加载器（Extension ClassLoader）：负责加载/lib/ext/目录或者Java.ext.dirs系统变量指定的路径中的所有类库；</li><li>应用程序类加载器（Application ClassLoader）：负责加载用户类路径上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认使用的就是这个加载器；</li></ul><h3 id="什么是双亲委派模型"><a href="#什么是双亲委派模型" class="headerlink" title="什么是双亲委派模型"></a>什么是双亲委派模型</h3><p>如果一个类加载器收到类加载的请求，它首先不会自己去加载这个类，而是把这个请求委派给父类加载器去完成，每一层加载器都是如此，这样所有的加载请求都会被传送到顶层的启动类加载器中，只有当父加载器无法完成加载请求，子加载器才会尝试去加载类；</p><h1 id="7-JVM调优"><a href="#7-JVM调优" class="headerlink" title="7. JVM调优"></a>7. JVM调优</h1><h2 id="7-1-JVM调优工具"><a href="#7-1-JVM调优工具" class="headerlink" title="7.1 JVM调优工具"></a>7.1 JVM调优工具</h2><p>JVM调优常用的是下面这两个工具：</p><ul><li>jconsole：用于对JVM中的内存、线程和类进行监控；</li><li>jvisualvm：JDK自带分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存变化以及gc变化；</li></ul><h2 id="7-2-JVM调优参数"><a href="#7-2-JVM调优参数" class="headerlink" title="7.2 JVM调优参数"></a>7.2 JVM调优参数</h2><p>常用的JVM调优参数如下：</p><ul><li>-Xms2g：初始化堆大小为2g</li><li>-Xmx2g：堆最大内存为2g</li><li>-XX:NewRatio=4：设置年轻代和老年代的内存比例为1:4</li><li>-XX:SurvivorRatio=8：设置新生代Eden和Survivor比例为8:2</li><li>-XX:+UseParNewGC：指定使用ParNew + Serial Old垃圾回收器组合</li><li>-XX:+UseParallelOldGC：指定使用ParNew + ParNew Old垃圾回收器组合</li><li>-XX:+UseConcMarkSweepGC：指定使用CMS + Serial Old垃圾回收器组合</li><li>-XX:+PrintGC：开启打印gc信息</li><li>-XX:+PrintGCDetails：打印gc详细信息；</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis盘点梳理</title>
    <link href="/2022/02/21/middleware/redis-learning/"/>
    <url>/2022/02/21/middleware/redis-learning/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul><li>字符串 String</li><li>列表 List</li><li>哈希 Hash</li><li>集合 Set</li><li>有序集合 Zset</li><li><strong>Bitmaps</strong></li><li><strong>HyperLogLogs</strong></li><li><strong>GEO</strong></li></ul><h2 id="底层数据类型"><a href="#底层数据类型" class="headerlink" title="底层数据类型"></a>底层数据类型</h2><ul><li>简单动态数组 SDS</li><li>链表</li><li>字典</li><li>跳跃链表</li><li>整数集合</li><li>压缩列表</li><li>对象</li></ul><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220311151509865.png" alt="image-20220311151509865"></p><p>ziplist压缩列表可以作为Zset、Hash、List三种数据类型的底层实现，其中Zset使用到了跳跃链表；</p><h1 id="SDS-Simple-Dynamic-String"><a href="#SDS-Simple-Dynamic-String" class="headerlink" title="SDS (Simple Dynamic String)"></a>SDS (Simple Dynamic String)</h1><h2 id="什么是SDS"><a href="#什么是SDS" class="headerlink" title="什么是SDS"></a>什么是SDS</h2><p>SDS是Redis中String类型数据的数据结构，Redis作者没有使用C字符串，而是自己设计了一种数据结构来存储字符串数据；</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">attribute__</span> ((__<span class="hljs-title">packed__</span>)) <span class="hljs-title">sdshdr8</span> &#123;</span><br>    <span class="hljs-type">uint8_t</span> len; <span class="hljs-comment">/* used */</span><br>    <span class="hljs-type">uint8_t</span> alloc; <span class="hljs-comment">/* excluding the header and null terminator */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> flags; <span class="hljs-comment">/* 3 lsb of type, 5 unused bits */</span><br>    <span class="hljs-type">char</span> buf[];<br>&#125;<br></code></pre></td></tr></table></figure><p>贴个图来展示SDS的数据结构：</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220312181132451.png" alt="image-20220312181132451"></p><p>这里说一下flags，在Redis中当你给String赋值不同类型的字符，它所展示的数据类型是不同的；</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220312181513762.png" alt="image-20220312181513762"></p><h2 id="SDS和C字符串的区别"><a href="#SDS和C字符串的区别" class="headerlink" title="SDS和C字符串的区别"></a>SDS和C字符串的区别</h2><ul><li><strong>获取字符串的长度：</strong>O(1)，C字符串是O(N)；</li><li><strong>缓冲区溢出：</strong>API是安全的，不会造成缓冲区溢出，C字符串会；</li><li><strong>惰性分配：</strong>修改N次长度最多需要进行N次内存重分配；而C字符串是必然会进行N次内存分配；</li><li><strong>数据存储：</strong>C字符串只能存储文本数据，SDS既可以存储文本也可以存储二进制数据；</li></ul><h2 id="SDS的优点"><a href="#SDS的优点" class="headerlink" title="SDS的优点"></a>SDS的优点</h2><ul><li>常数获取字符串的复杂度，无需遍历；</li><li>杜绝缓冲区溢出；</li><li>减少修改字符串修改分配内存的次数；</li><li>二进制安全；</li><li>兼容部分C字符串；</li></ul><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>链表的数据结构在我们日常的使用中已经非常常见了，所以这里我稍微介绍一点Redis中所不同的概念：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">listNode</span> &#123;</span><br>    <span class="hljs-comment">// 前置节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">listNode</span>* <span class="hljs-title">prev</span>;</span><br>    <span class="hljs-comment">// 后置节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">listNode</span>* <span class="hljs-title">next</span>;</span><br>    <span class="hljs-comment">// 节点值</span><br>    <span class="hljs-type">void</span>* value;<br>&#125;listNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> &#123;</span><br>    <span class="hljs-comment">// 表头节点</span><br>    listNode* head;<br>    <span class="hljs-comment">// 表尾节点</span><br>    listNode* tail;<br>    <span class="hljs-comment">// 节点值复制函数</span><br>    <span class="hljs-type">void</span>* (*dup)(<span class="hljs-type">void</span>* ptr);<br>    <span class="hljs-comment">// 节点值释放函数</span><br>    <span class="hljs-type">void</span>* (*<span class="hljs-built_in">free</span>)(<span class="hljs-type">void</span>* ptr);<br>    <span class="hljs-comment">// 节点值对比函数</span><br>    <span class="hljs-type">void</span>* (*match)(<span class="hljs-type">void</span>* ptr);<br>    <span class="hljs-comment">// 链表包含的节点数量</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> len;<br>&#125;<span class="hljs-built_in">list</span>;<br></code></pre></td></tr></table></figure><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220312185100094.png" alt="image-20220312185100094"></p><p>可以总结出Redis的链表存在下列特点：</p><ul><li>存在prev和next指针，因此获取某个节点的前置和后置节点时间复杂度都是O(1)；</li><li>表头的prev指针和表尾的next指针都指向NULL，所以它一定是无环结构；</li><li>存在表头和表尾指针，因此获取链表的头节点和尾节点时间复杂度都是O(1)；</li><li>自带链表长度的计数器，获取链表长度的时间复杂度也是O(1)；</li><li>使用void*保存节点值，所以可以存储不同类型的数据；</li></ul><p>基于上述特点，我们可以发现链表广泛使用发布订阅、慢查询、监视器以及列表键。（为什么呢？）</p><p>因为上述数据结构采用了空间换时间的概念，所以在数据量大的情况下使用链表能够很好的提高性能；而在数据量较小的时候，这种浪费就显得没有必要了，一般会使用压缩链表来实现；</p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>字典是一种用于保存键值对的抽象数据结构；字典中每个键都是独一无二的，程序可以在字典中根据键值查找与之相关联的值；同样C语言没有内置这种数据结构，Redis自己实现了字典；</p><h2 id="字典底层的数据结构"><a href="#字典底层的数据结构" class="headerlink" title="字典底层的数据结构"></a>字典底层的数据结构</h2><p>字典使用了哈希表作为底层实现，一个哈希表可以有多个哈希节点，每个哈希表节点保存了字典的键值对；</p><h1 id="Redis缓存"><a href="#Redis缓存" class="headerlink" title="Redis缓存"></a>Redis缓存</h1><h2 id="Redis缓存雪崩"><a href="#Redis缓存雪崩" class="headerlink" title="Redis缓存雪崩"></a>Redis缓存雪崩</h2><h3 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h3><p>同一时间大批量数据失效导致Redis变成不存在，请求压力全部落到数据源导致系统压力增加；</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>分布式部署，设置热点数据永不过期，有更新操作再刷新Redis缓存，或者是给Redis缓存key失效时间加随机值</p><h2 id="Redis缓存击穿"><a href="#Redis缓存击穿" class="headerlink" title="Redis缓存击穿"></a>Redis缓存击穿</h2><h3 id="成因-1"><a href="#成因-1" class="headerlink" title="成因"></a>成因</h3><p>某个热点数据失效，大量针对这个数据的请求会穿透缓存到数据库</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>可以使用互斥锁更新，保证同一个进程中针对同一个数据不会并发请求到 DB，减小 DB 压力。</p><p>使用随机退避方式，失效时随机 sleep 一个很短的时间，再次查询，如果失败再执行更新。</p><p>针对多个热点 key 同时失效的问题，可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。</p><h2 id="Redis缓存穿透"><a href="#Redis缓存穿透" class="headerlink" title="Redis缓存穿透"></a>Redis缓存穿透</h2><h3 id="成因-2"><a href="#成因-2" class="headerlink" title="成因"></a>成因</h3><p>缓存和数据库中都没有的数据，用户不断发起请求，导致数据库的压力增大，从而搞垮系统；一般出现这种情况是因为没有对参数做校验导致。</p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li><p>对于不存在的用户，在缓存中保存一个空对象标记，防止相同ID再次访问DB；但是这个方法不能解决问题；</p></li><li><p>使用布隆过滤器，特点是数据的唯一性校验，存在为true，不存在为false，非常适合解决这些问题；</p></li></ul><h1 id="Redis持久化操作"><a href="#Redis持久化操作" class="headerlink" title="Redis持久化操作"></a>Redis持久化操作</h1><p>RDB：<strong>RDB</strong> 持久化机制，是对 <strong>Redis</strong> 中的数据执行<strong>周期性</strong>的持久化。</p><p>AOF：<strong>AOF</strong> 机制对每条写入命令作为日志，以 <strong>append-only</strong> 的模式写入一个日志文件中，因为这个模式是只追加的方式，所以没有任何磁盘寻址的开销，所以很快，有点像Mysql中的<strong>binlog</strong>。</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2>]]></content>
    
    
    <categories>
      
      <category>消息中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈MySQL索引</title>
    <link href="/2022/02/21/mysql/mysql-index/"/>
    <url>/2022/02/21/mysql/mysql-index/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h1><p>存储引擎中一种用于快速找到记录的数据结构。索引对于良好性能非常关键，尤其是当表中的数据量越来越大的时候，索引对性能的影响愈发重要。</p><h1 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h1><h2 id="B-Tree索引"><a href="#B-Tree索引" class="headerlink" title="B-Tree索引"></a>B-Tree索引</h2><p>毋庸置疑，B-Tree索引使用的是B-Tree数据结构来存储数据。索引类型在创建表的过程中是可以指定的。</p><p>B-Tree意味着所有的值都是按照顺序存储的，并且每一个叶子页到根的距离相同。</p><p>所以B-Tree索引能加快访问数据的速度，因为存储引擎不再需要进行全表扫描来获取需要的数据，取而代之的是从索引根节点开始进行搜索。</p><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+Tree"></a>B+Tree</h2><p>MySQL中最常用的索引数据结构是B+树，存在以下特点：</p><ol><li>所有数据记录节点按照键值大小存放在同层叶子节点上，非叶子结点只存储key的信息，这样可以大大减少每个节点存储key的数量，降低B+树的高度；</li><li>叶子节点的关键字从小到大排序，左边结尾数据会保存右边节点开始数据的指针；</li><li>层级更少意味着查询数据更快；</li><li>查询速度稳定，所有关键字数据地址都存在叶子节点上，所以每次查找的次数都相同；</li><li>天然具备排序功能，所有叶子节点就是一个有序链表，所以在查询大小取件的数据更方便，数据紧密性好，缓存的命中率也比B树高；</li><li>全节点遍历更快，有利于做数据库全表扫描；</li></ol><h3 id="主键目录"><a href="#主键目录" class="headerlink" title="主键目录"></a>主键目录</h3><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220221123200692.png" alt="image-20220221123200692"></p><ul><li>MySQL是以数据页为最小单位，数据页中的数据是连续存储的；</li><li>数据页的数据是按照主键排序的（若无主键由MySQL中的ROW_ID来排序）；</li><li>数据页之间使用双向链表关联；</li><li>数据之间使用单链表进行关联；</li></ul><h3 id="索引页"><a href="#索引页" class="headerlink" title="索引页"></a>索引页</h3><p>为了避免单个主键目录过大（例如1000万条记录，5000万条记录）。使用前面说的二分法查找效率就十分低下了。所以为了解决这个问题MySQL又提出了一种新的数据结构，索引页。</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220221124810004.png" alt="image-20220221124810004"></p><p>索引页的记录是每页数据页的页号和该数据页中最小的主键记录，也就是说最小主键和数据页号不是单纯的维护在主键目录中，而是演变成了索引页，索引页和数据页类似。一张不够就分裂到下一张；</p><p>因此：此时MySQL应该需要维护索引页的，MySQL也是这样设计的。也就是说MySQL同时也设计出用于维护索引页的数据结构。也称为索引页。类似下面的结构：</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220221125453613.png" alt="image-20220221125453613"></p><p>也就是说维护索引的索引页是真正存储记录和数据页的索引页的上一层，如果想要查找就从最上层的索引页开始查找。通过二分法，很快就能定位到该条记录在索引页的具体位置上。</p><h3 id="索引页分层"><a href="#索引页分层" class="headerlink" title="索引页分层"></a>索引页分层</h3><p>同样的，索引页一大也会出现类似的问题，那怎么办呢？好说。继续分裂</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220221132129655.png" alt="image-20220221132129655"></p><p>综上所述，MySQL的查找流程如下，假设我们要找的记录是37：</p><ul><li>先从最顶层的索引页开始查找，根据id = 37定位到索引页16；</li><li>在索引页16中继续搜索，此时定位到id = 37在索引页3中；</li><li>最终定位到数据在数据页8中，遍历数据页8中的数据链表，发现元素37；</li><li>查找完毕</li></ul><p>最后需要注意的是：索引页 + 数据页组成的B+树称之为聚簇索引。</p><blockquote><p>聚簇索引是MySQL基于主键索引结构创建的</p></blockquote><h1 id="非主键索引"><a href="#非主键索引" class="headerlink" title="非主键索引"></a>非主键索引</h1><p>非主键索引和主键索引的引用原理一样，都是去维护一颗B+树，建立多少个索引，就会帮忙维护多少个B+树。因为索引会占用磁盘空间，不能盲目建索引；</p><h2 id="它是怎么工作的呢？"><a href="#它是怎么工作的呢？" class="headerlink" title="它是怎么工作的呢？"></a>它是怎么工作的呢？</h2><p>如果对<code>name + age</code>建立索引，此时MySQL会根据name + age维护一个单独的B+树结构。数据依然存放在数据页中。类似于下图：</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220221133527771.png" alt="image-20220221133527771"></p><p>插入数据时，MySQL会根据name进行排序，如果name一样。就根据联合索引中的age字段排序，如果还一样就根据主键字段排序。</p><h1 id="什么是回表？"><a href="#什么是回表？" class="headerlink" title="什么是回表？"></a>什么是回表？</h1><p>根据非主键索引查询的结果并没有查找的字段，此时就需要再次根据主键从聚簇索引的根节点开始查找，这样再次查找到的记录才是完整的。</p><p>针对上面的结构，假设存在如下查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;xx&#x27;</span>;<br></code></pre></td></tr></table></figure><p>由于name字段是索引，所以查询是非常完美的；</p><p>假设是这样子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;xy&#x27;</span>;<br></code></pre></td></tr></table></figure><p>虽然通过name很快定位到了索引，但由于name + age并不是聚簇索引，所以B+树的数据页存放的仅仅是和自己关联的索引和主键字段，并不存在其他字段。这个时候<strong>MySQL会根据定位记录的id再次进行聚簇索引查找</strong>，这个过程就叫做回表。</p><h1 id="索引的优缺点"><a href="#索引的优缺点" class="headerlink" title="索引的优缺点"></a>索引的优缺点</h1><p>说了这么多，索引总结下来有三个优点：</p><ul><li>大大减少服务器需要扫描的数据量；</li><li>帮助服务器避免排序和临时表；</li><li>将随机I/O变为顺序I/O（因为数据页本身就是有序的）；</li></ul><p>当然再好的工具也并不一定是解决问题的通用方案，索引也有缺点：</p><ul><li>对于非常小的数据表，全表扫描更加高效，不需要使用索引，对于中大型的表来说索引比较高效；</li><li>对于特大型的表，应当直接区分查询需要的数据组，例如分区技术；</li><li>如果表的数量特别大，可以建立一个元数据信息表，用来查询需要用到的特性；</li></ul><h1 id="高性能索引策略"><a href="#高性能索引策略" class="headerlink" title="高性能索引策略"></a>高性能索引策略</h1><h2 id="独立列"><a href="#独立列" class="headerlink" title="独立列"></a>独立列</h2><p>索引列不能是表达式的一部分，也不能是函数参数，比如下面这两种写法会令索引失效；</p><p>因此我们必须养成简化WHERE条件的习惯，始终将索引列单独放在比较符号的一侧；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> actor_id <span class="hljs-keyword">FROM</span> actor <span class="hljs-keyword">WHERE</span> actor_id <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">SELECT</span> ... <span class="hljs-keyword">WHERE</span> TO_DAYS(<span class="hljs-built_in">CURRENT_DATE</span>) <span class="hljs-operator">-</span> TO_DAYS(date_col) <span class="hljs-operator">&lt;=</span> <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h2 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h2><p>索引很长的字符列会使得索引变得大且慢，这时候可以索引开始的部分字符，这样可以大大节约索引空间，提高索引效率。</p><p>诀窍在于：选择足够长的前缀以保证较高的选择性（也就是可以过滤掉绝大多数不相关的数据），同时又不能太长（节约空间）。因此前缀应该足够长，以使得前缀索引的选择性接近与索引整个列；</p><h2 id="计算完整列选择性"><a href="#计算完整列选择性" class="headerlink" title="计算完整列选择性"></a>计算完整列选择性</h2><p>用查询条件的索引字段除以总记录数，通常如果前缀选择性能够接近0.031基本上就可以用了。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> <span class="hljs-keyword">LEFT</span>(city, <span class="hljs-number">3</span>)) <span class="hljs-operator">/</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> sel3,<br>   <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> <span class="hljs-keyword">LEFT</span>(city, <span class="hljs-number">4</span>)) <span class="hljs-operator">/</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> sel4,<br>   <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> <span class="hljs-keyword">LEFT</span>(city, <span class="hljs-number">5</span>)) <span class="hljs-operator">/</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> sel5,<br>   <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> <span class="hljs-keyword">LEFT</span>(city, <span class="hljs-number">6</span>)) <span class="hljs-operator">/</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> sel6,<br>   <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> <span class="hljs-keyword">LEFT</span>(city, <span class="hljs-number">7</span>)) <span class="hljs-operator">/</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> sel7<br><span class="hljs-keyword">FROM</span> city_demo;<br></code></pre></td></tr></table></figure><h2 id="多列索引（这个看不懂，先放着）"><a href="#多列索引（这个看不懂，先放着）" class="headerlink" title="多列索引（这个看不懂，先放着）"></a>多列索引（这个看不懂，先放着）</h2><p>在多个列上建立独立索引大部分情况下并不能提高MySQL的查询性能，好在MySQL提供了一种“索引合并”的策略，一定程度上可以使用表上的多个单列索引来定位指定的行。</p><h2 id="合适的索引列顺序"><a href="#合适的索引列顺序" class="headerlink" title="合适的索引列顺序"></a>合适的索引列顺序</h2><p>依赖于使用该索引的查询，并且同时需要考虑如何更好地满足排序和分组的需要。当不需要考虑排序和分组时，将选择性最高的列放在前面通常是很好的。这样索引确实可以够快过滤出需要的行。</p><p>还有一个方法，在你不确定怎样排列查询的效果最好时，可以跑一下查询确定在这个表中值的分布情况，并确定哪个列的选择性更高。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> payment <span class="hljs-keyword">WHERE</span> staff_id <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">AND</span> customer_id <span class="hljs-operator">=</span> <span class="hljs-number">584</span>;<br></code></pre></td></tr></table></figure><p>如法炮制，我们可以计算一下索引列选择性：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> staff_id) <span class="hljs-operator">/</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> staff_id_selectivity,<br>   <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> customer_Id) <span class="hljs-operator">/</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">AS</span> customer_id_selectivity,<br>   <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br>   <span class="hljs-keyword">FROM</span> payment\G;<br></code></pre></td></tr></table></figure><p>最后数字大的那一个就是索引列的第一项；尽管关于选择性和基数的经验法则值得去研究和分析，但一定要注意WHERE字句中的排序、分组和范围条件等其他因素，这些因素可能对查询的性能会造成非常大的影响。</p><h2 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h2><blockquote><p>聚簇索引：找到了索引就找到了需要的数据，因此主键就是一种聚簇索引；</p><p>非聚簇索引：结合上面的意思，找到了索引但没找到数据，需要根据索引的主键再次进行回表查询；</p></blockquote><p>聚簇索引一般是主键，前面已经介绍过了相关概念，就不再啰嗦。它也有优缺点：</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>相关数据聚合在一起，只需要从磁盘读取少数数据就可以拿到全部信息，减少磁盘I/O；</li><li>数据访问快，在聚簇索引中获取数据通常比非聚簇索引查找要快；</li><li>索引覆盖扫描的查询可以直接使用页节点中的主键值；</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>数据全在内存中，聚簇索引的访问顺序性就没那么重要了；</li><li>插入速度严重依赖插入顺序，按照主键顺序插入是速度最快的，否则会特别慢；</li><li>更新聚簇索引代价很高，会强制InnoDB将每个被更新的行移动到新的位置；</li><li>当主键被更新导致需要移动行时会触发“页分裂”操作，这样会使得表占用更多的磁盘空间；</li><li>导致全表扫描变慢，尤其在数据比较稀疏或者由于页分裂导致数据存储不连续的时候；</li><li>二级索引可能比想象的要大，因为二级索引的叶子节点包含了引用行的主键列；</li><li>二级索引访问需要两次索引查找；</li></ul><h3 id="注意的点"><a href="#注意的点" class="headerlink" title="注意的点"></a>注意的点</h3><p>使用InnoDB表中按主键顺序插入行，最简单的办法是使用AUTO_INCREMENT自增列。这样既可以保证数据行是按照顺序写入，对于根据主键做关联操作的性能也会更好。</p><p>最好避免随机的聚簇索引（比如使用UUID来做聚簇索引会很糟糕），它会使得索引插入变得完全随机，这是最坏的情况。</p><h2 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h2><p>即从非主键索引中就能查询到的记录，而不需要查询主键索引（回表操作）中的记录。避免回表的产生减少了对树的搜索次数，从而提升性能。</p><p>由于InnoDB的聚簇索引，覆盖索引对InnoDB表特别有用。二级索引（非聚簇索引）的叶子节点如果保存了行的主键值，所以如果二级主键能够覆盖查询就可以避免回表操作的产生。</p><h3 id="如何查看使用了覆盖查询？"><a href="#如何查看使用了覆盖查询？" class="headerlink" title="如何查看使用了覆盖查询？"></a>如何查看使用了覆盖查询？</h3><p>使用explain关键字解释查询，如果在Extra行显示”Using index”则说明使用了覆盖索引。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>假设inventory中存在多列索引(store_id, film_id)，并且MySQL只需要这两列数据，那么此时就是使用了覆盖索引；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> store_id, film_id <span class="hljs-keyword">FROM</span> inventory\G;<br></code></pre></td></tr></table></figure><p>假设是下面这种情况，索引就无法实现查询覆盖：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> products <span class="hljs-keyword">WHERE</span> actor <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SEAM CARREY&#x27;</span><br>    <span class="hljs-keyword">AND</span> title <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%APOLLO%&#x27;</span>\G<br></code></pre></td></tr></table></figure><p>原因有二：</p><ul><li>没有任何索引能够覆盖查询，因为查询从表中选择了所有列，且没有任何索引覆盖了所有列；</li><li>MySQL不能在索引中执行LIKE操作；</li></ul><h3 id="如何优化呢？"><a href="#如何优化呢？" class="headerlink" title="如何优化呢？"></a>如何优化呢？</h3><p>将索引列扩展覆盖至三个数据列（artist, title, prod_id），然后重写查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">EXPLAIN <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br>    <span class="hljs-keyword">FROM</span> products<br>    <span class="hljs-keyword">JOIN</span>(<br>            <span class="hljs-keyword">SELECT</span> prod_id<br>                <span class="hljs-keyword">FROM</span> products<br>                <span class="hljs-keyword">WHERE</span> actor <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SEAM CARREY&#x27;</span><br>                <span class="hljs-keyword">AND</span> title <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%APOLLO%&#x27;</span><br>            ) <span class="hljs-keyword">AS</span> t1 <span class="hljs-keyword">ON</span> (t1.prod_id <span class="hljs-operator">=</span> products.prod_id)\G<br></code></pre></td></tr></table></figure><p>这种方式成为延迟关联，由于延迟了对列的访问，因此在第一阶段可以使用覆盖索引，然后再根据prod_id的值在外层查询匹配获得需要的所有列值。</p><h2 id="索引扫描排序-这个不是很理解"><a href="#索引扫描排序-这个不是很理解" class="headerlink" title="索引扫描排序(这个不是很理解)"></a>索引扫描排序(这个不是很理解)</h2><p>MySQL可以通过两种方式做排序：</p><ul><li>排序操作</li><li>索引顺序扫描（EXPLAIN后的结果为“index”则是索引扫描）</li></ul><p>索引本身是有序的，所以索引扫描应该很快，但如果索引无法覆盖查询所需的全部列，就不得不每扫描一跳记录都回表查询一次对应的行。</p><blockquote><p>只有当索引列顺序和ORDER BY子句的顺序完全一致，并且所有列的排序方向都一样，MySQL才能够使用索引来对结果做排序</p></blockquote><h2 id="冗余和重复索引"><a href="#冗余和重复索引" class="headerlink" title="冗余和重复索引"></a>冗余和重复索引</h2><p>在 MySQL 中允许在相同的列上创建多个索引。</p><ul><li><p>重复索引是指在相同列上按照相同的顺序创建的相同类型的索引。</p></li><li><p>冗余索引和重复索引有些不同，例如创建了索引（A,B），在创建索引（A）就是冗余索引。</p></li></ul><p>下面的例子是重复索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test(<br>    id <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">primary</span> key,<br>    A <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    B <span class="hljs-type">int</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br>    <span class="hljs-keyword">UNIQUE</span>(id),<br>    INDEX(id)<br> ) ENGINE<span class="hljs-operator">=</span>InnoDB;<br></code></pre></td></tr></table></figure><blockquote><p>TIP：</p><ol><li>MySQL需要单独维护重复索引和冗余索引</li><li>优化器在优化查询时，也需要对每个索引进行过滤，也会影响性能；</li><li>表中索引多，会影响对数据进行CRUD的速度；</li></ol></blockquote><h2 id="未使用的索引"><a href="#未使用的索引" class="headerlink" title="未使用的索引"></a>未使用的索引</h2><p>未使用的索引应当删除，最简单的办法是打开<code>userstates</code>服务器变量（默认关闭），然后让服务器正常运行一段时间，再通过<code>INFORMATION_SCHEMA.INDEX_STATISTICS</code>就可以查到每个索引的使用频率；</p><h2 id="索引和锁"><a href="#索引和锁" class="headerlink" title="索引和锁"></a>索引和锁</h2><p>索引可以让查询锁定更少的行，如果查询从不访问那些不需要的行，就会锁定更少的行。虽然InnoDB的行锁效率很高，内存使用也少，但是锁定行的时候也会带来额外的开销，其次锁定超过需要的行会增加锁争用并减少并发性。</p><h1 id="MySQL索引失效"><a href="#MySQL索引失效" class="headerlink" title="MySQL索引失效"></a>MySQL索引失效</h1><h2 id="为什么会出现索引失效"><a href="#为什么会出现索引失效" class="headerlink" title="为什么会出现索引失效"></a>为什么会出现索引失效</h2><p>索引可以加快查找速度是因为，在每层兄弟节点之间索引是有序的，因此可以通过二分查找快速定位到相应的位置。假如有一些操作破坏了索引排列顺序的有序性或者不能利用索引的有序性，那么这个索引自然而然就失效了；</p><h2 id="哪些情况会出现索引失效"><a href="#哪些情况会出现索引失效" class="headerlink" title="哪些情况会出现索引失效"></a>哪些情况会出现索引失效</h2><ul><li>不符合最左匹配前缀原则导致索引失效;</li><li>对索引字段做函数操作；优化器会放弃树的搜索功能；</li><li>存在NULL值条件；</li><li>使用模糊搜索时，尽量采用后置通配符，因为走索引的过程中，其会从前去匹配索引列；</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>索引失效是优化器不能很好的利用索引的有序性，因此在使用索引的过程中要尽量满足最左前缀匹配原则，范围查询放在最后，不使用%like、%like%等模糊查询；</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud分布式配置中心</title>
    <link href="/2022/02/20/spring/spring-cloud-distribute-config/"/>
    <url>/2022/02/20/spring/spring-cloud-distribute-config/</url>
    
    <content type="html"><![CDATA[<h1 id="分布式配置中心"><a href="#分布式配置中心" class="headerlink" title="分布式配置中心"></a>分布式配置中心</h1><p>我们回顾一下到目前为止已经接触过得微服务：</p><ul><li>服务发现注册中心</li><li>服务消费者</li><li>服务提供者</li><li>配置中心</li><li>配置客户端</li></ul><p>所以可以发现：除了注册中心以外，其他的服务都可以抽象成一个微服务，因此也可以借鉴先前的经验做成高可用分布式架构。要做到上述配置，我们只需要遵守一个规则：将所有的Config Server都指向同一个Git仓库，这样所有配置的内容通过统一的共享文件系统来维护。</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/3-13.png" alt="img"></p><p>等到客户端指定Config Server位置时，只需要配置Config Server外的负载均衡即可。</p><p>由此，我们可以得出一个结论：配置服务只是提供不同请求的一个微服务而已，所以只需要将其也注册为服务，这样所有客户端就可以通过服务的方式进行访问。</p><h1 id="配置刷新"><a href="#配置刷新" class="headerlink" title="配置刷新"></a>配置刷新</h1><p>有时候需要对配置内容做实时更新，只需要集成Spring Boot Actuator即可。其中包括<code>/refresh</code>端点可以用于刷新配置。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>不难想到，当Git仓库的Web Hook与此功能进行关联。当Git提交变化时，就给对应配置主机发送<code>/refresh</code>请求实现配置信息的实时变更。</p><p>当我们的系统发展壮大之后，维护这样的刷新清单也将成为一个非常大的负担，而且很容易犯错，那么有什么办法可以解决这个复杂度呢？后续我们将继续介绍如何通过Spring Cloud Bus来实现以消息总线的方式进行通知配置信息的变化，完成集群上的自动化更新。</p><h1 id="文章引用"><a href="#文章引用" class="headerlink" title="文章引用"></a>文章引用</h1>]]></content>
    
    
    <categories>
      
      <category>微服务架构学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud配置中心</title>
    <link href="/2022/02/20/spring/spring-cloud-config/"/>
    <url>/2022/02/20/spring/spring-cloud-config/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是Spring-Cloud-Config"><a href="#什么是Spring-Cloud-Config" class="headerlink" title="什么是Spring Cloud Config"></a>什么是Spring Cloud Config</h1><p>是Spring Cloud团队创建的一个用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为服务端与客户端两个部分。</p><ul><li>服务端：也称为分布式配置中心，是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息、加密/解密信息等访问接口</li><li>客户端：微服务架构中各个微服务应用或者基础设施，通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动时从配置中心获取和加载配置信息</li></ul><h1 id="有什么特点"><a href="#有什么特点" class="headerlink" title="有什么特点"></a>有什么特点</h1><ul><li>实现了对服务端和客户端中环境变量和属性配置的抽象映射；</li><li>除了适用于Spring构建的应用还可以在任何其他语言运行的应用程序中使用；</li><li>由于返回的配置结果为JSON，因此可以结合Git客户端工具管理和访问配置内容；</li></ul><h1 id="具体实例"><a href="#具体实例" class="headerlink" title="具体实例"></a>具体实例</h1><p>下面构建一个基于Git存储的分布式配置中心，并对客户端进行改造，并让其从配置中心获取配置信息并绑定到代码中的整个过程。</p><h2 id="构建配置中心"><a href="#构建配置中心" class="headerlink" title="构建配置中心"></a>构建配置中心</h2><p>准备一个git仓库，创建一个<code>config-server</code>的Spring Boot项目，假设我们需要读取的配置中心为<code>config-client</code>，那么我们声明git仓库中该项目的默认配置文件为<code>config-client.yml</code></p><p>默认环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">profile:</span> <span class="hljs-string">default</span><br></code></pre></td></tr></table></figure><p>dev环境</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">info:</span><br>  <span class="hljs-attr">profile:</span> <span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><h2 id="构建配置中心-1"><a href="#构建配置中心-1" class="headerlink" title="构建配置中心"></a>构建配置中心</h2><p>借助Spring Cloud Config构建一个分布式配置中心非常简单，只需要三步：</p><ul><li><p>创建基础Spring Boot工程，命名为<code>config-server-git</code>，并且引入spring-cloud-config-server依赖；</p></li><li><p>在Spring Boot主类上添加<code>@EnableConfigServer</code>注解，开启Spring Cloud Config的服务端功能；</p></li><li><p>在<code>application.yml</code>添加配置服务的基本信息以及Git仓库信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-server</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">server:</span><br>        <span class="hljs-attr">git:</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">&lt;这里的git仓库uri只能写到目录层，不能包括仓库名&gt;</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1201</span><br></code></pre></td></tr></table></figure><p>至此，使用一个通过Spring Cloud Config实现，并使用Git管理配置内容的分布式配置中心完成，可以先将应用启动起来，确保没问题再进行下面的操作。</p><p>完成了这些准备工作之后，我们就可以通过浏览器、POSTMAN或CURL等工具直接来访问到我们的配置内容了。访问配置信息的URL与配置文件的映射关系如下：</p><ul><li>/{application}/{profile}[/{label}]</li><li>/{application}-{profile}.yml</li><li>/{label}/{application}-{profile}.yml</li><li>/{application}-{profile}.properties</li><li>/{label}/{application}-{profile}.properties</li></ul><p>假设访问<code>http://localhost:1201/config-client/dev/master</code>，获得如下返回：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;config-client&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;dev&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;master&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;state&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">null</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;propertySources&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://git.oschina.net/didispace/config-repo-demo/config-client-dev.yml&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;info.profile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dev&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://git.oschina.net/didispace/config-repo-demo/config-client.yml&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;info.profile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="构建客户端"><a href="#构建客户端" class="headerlink" title="构建客户端"></a>构建客户端</h2><p>接下来构建客户端，确保配置中心正常运作。创建一个Spring Boot应用，命名为<code>config-client</code>，引入下述依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span> version <span class="hljs-string">&#x27;2.6.3&#x27;</span><br>    id <span class="hljs-string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="hljs-string">&#x27;1.0.11.RELEASE&#x27;</span><br>    id <span class="hljs-string">&#x27;java&#x27;</span><br>&#125;<br><br>group = <span class="hljs-string">&#x27;com.hhp.config&#x27;</span><br>version = <span class="hljs-string">&#x27;0.0.1&#x27;</span><br>sourceCompatibility = <span class="hljs-string">&#x27;1.8&#x27;</span><br><br>repositories &#123;<br>    maven &#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span> &#125;<br>    mavenLocal()<br>    mavenCentral()<br>&#125;<br><br>ext &#123;<br>    set(<span class="hljs-string">&#x27;springCloudVersion&#x27;</span>, <span class="hljs-string">&quot;2021.0.1&quot;</span>)<br>&#125;<br><br>dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.cloud:spring-cloud-starter-config&#x27;</span><br>    <span class="hljs-comment">// 从Spring Cloud 2.0.4开始起禁用了bootstrap，所以需要引入这个依赖才会生效</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.cloud:spring-cloud-starter-bootstrap&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br>&#125;<br><br>dependencyManagement &#123;<br>    imports &#123;<br>        mavenBom <span class="hljs-string">&quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span><br>    &#125;<br>&#125;<br><br>tasks.named(<span class="hljs-string">&#x27;test&#x27;</span>) &#123;<br>    useJUnitPlatform()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建<code>bootstrap.yml</code>配置文件，制定获取配置文件中的config-server-git的位置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">config-client</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">config:</span><br>      <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:1201/</span><br>      <span class="hljs-attr">profile:</span> <span class="hljs-string">default</span><br>      <span class="hljs-attr">label:</span> <span class="hljs-string">master</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">2001</span><br></code></pre></td></tr></table></figure><p>上述配置参数与Git中存储的配置文件中各个部分的对应关系如下：</p><ul><li>spring.application.name：对应配置文件规则中的<code>&#123;application&#125;</code>部分</li><li>spring.cloud.config.profile：对应配置文件规则中的<code>&#123;profile&#125;</code>部分</li><li>spring.cloud.config.label：对应配置文件规则中的<code>&#123;label&#125;</code>部分</li><li>spring.cloud.config.uri：配置中心<code>config-server</code>的地址</li></ul><p>另外，也可以通过修改config-client中的profile为dev观察加载配置的变化；</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>微服务架构学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud服务消费（Feign)</title>
    <link href="/2022/02/20/spring/spring-cloud-open-feign/"/>
    <url>/2022/02/20/spring/spring-cloud-open-feign/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Open-Feign"><a href="#Spring-Cloud-Open-Feign" class="headerlink" title="Spring Cloud Open Feign"></a>Spring Cloud Open Feign</h1><p>一套基于Netflix Feign实现的声明式服务调用客户端。它使得编写Web服务客户端变得更加简单。我们只需要通过创建接口并用注解来配置它即可完成对Web服务接口的绑定，并且支持可插拔的支持。除此之外，Spring Cloud Feign还扩展了对Spring MVC注解的支持，同时还整合了Ribbon和Eureka来提供负载均衡的HTTP客户端。</p><h1 id="动手试试"><a href="#动手试试" class="headerlink" title="动手试试"></a>动手试试</h1><p>下面我们演示一下Spring Cloud Open Feign的基本使用：</p><blockquote><p>还是需要有eureka-server，eureka-client的支持</p></blockquote><p>复制一个项目，命名为<code>eureka-consumer-feign</code>，在Gradle配置文件中写入下列依赖：</p><figure class="highlight groovy"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs groovy">dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-actuator&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.cloud:spring-cloud-starter-openfeign&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里和普通的<code>eureka-client</code>不同的是，多了个<code>openfeign</code>的启动依赖；</p><h2 id="修改应用主类"><a href="#修改应用主类" class="headerlink" title="修改应用主类"></a>修改应用主类</h2><p>修改应用主类，通过<code>@EnableFeignClients</code>注解并且开启扫描Spring Cloud Feign客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaConsumerApplication</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaConsumerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建Feign客户端接口"><a href="#创建Feign客户端接口" class="headerlink" title="创建Feign客户端接口"></a>创建Feign客户端接口</h2><p>我们实现一个客户端接口，并且使用<code>@FeignClient</code>指定接口所需要调用的服务名称，接口中定义的各个函数使用Spring MVC注解就可以用来绑定服务提供方的REST接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;eureka-client&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DcClient</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/dc&quot;)</span><br>    String <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改Controller"><a href="#修改Controller" class="headerlink" title="修改Controller"></a>修改Controller</h2><p>通过定义的feign客户端来调用服务提供方接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DcController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> DcClient dcClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/consumer&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">dc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> dcClient.consumer();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>在应用主类启用Open Feign服务</li><li>定义Feign客户端接口，接口中的函数只需要使用Spring MVC注解就可以绑定；</li><li>通过在控制器层定义feign客户端来调用服务提供方接口；</li></ol><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>跟之前一样，依次启动<code>eureka-server</code>, <code>eureka-client</code>以及<code>eureka-consumer-feign</code>来查看效果。</p>]]></content>
    
    
    <categories>
      
      <category>微服务架构学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud服务消费（Ribbon)</title>
    <link href="/2022/02/20/spring/spring-cloud-ribbon/"/>
    <url>/2022/02/20/spring/spring-cloud-ribbon/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Ribbon是什么"><a href="#Spring-Cloud-Ribbon是什么" class="headerlink" title="Spring Cloud Ribbon是什么"></a>Spring Cloud Ribbon是什么</h1><p>是基于Netflix Ribbon实现的一套<strong>客户端负载均衡工具</strong>，是一个基于HTTP和TCP的客户端负载均衡器。它可以通过在客户端中配置ribbonServerList来设置服务端列表去轮询访问达到负载均衡的作用。</p><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><p>我们将继续利用之前的<code>eureka-server</code>作为服务注册中心，<code>eureka-client</code>作为服务提供者。还是跟之前一样，使用Spring Initializer来新建Spring Boot应用。</p><h2 id="修改应用主类"><a href="#修改应用主类" class="headerlink" title="修改应用主类"></a>修改应用主类</h2><p>为<code>RestTemplate</code>增加<code>@LoadBalanced</code>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改Controller"><a href="#修改Controller" class="headerlink" title="修改Controller"></a>修改Controller</h2><p>去掉原来通过<code>LoadBalancerClient</code>选取实例和拼接URL的步骤，直接通过RestTemplate来发起请求；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DcController</span> &#123;<br>    <br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/consumer&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">dc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://eureka-client/dc&quot;</span>, String.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="有什么不同呢？"><a href="#有什么不同呢？" class="headerlink" title="有什么不同呢？"></a>有什么不同呢？</h1><p>可以看到，我们去除了与<code>LoadBalancerClient</code>相关的逻辑之外，对于<code>RestTemplate</code>的使用，我们的第一个url参数有一些特别，直接采用了服务名的方式组成。</p><p>这里的实现细节是Ribbon实现了一个拦截器，能够在进行实际调用的同时，自动选取服务实例。并将实际请求的IP地址和端口替换成服务名，从而完成服务接口的调用。</p>]]></content>
    
    
    <categories>
      
      <category>微服务架构学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Cloud服务消费（基础）</title>
    <link href="/2022/02/19/spring/springcloud-service-consumer/"/>
    <url>/2022/02/19/spring/springcloud-service-consumer/</url>
    
    <content type="html"><![CDATA[<h1 id="使用LoadBalancerClient"><a href="#使用LoadBalancerClient" class="headerlink" title="使用LoadBalancerClient"></a>使用LoadBalancerClient</h1><p>这是一个负载均衡客户端的抽象定义，负载均衡的好处在于：</p><ul><li>提供动态的负载均衡功能，可以将所有请求动态分布到其所管理的所有服务实例中进行处理；</li></ul><p>所以在分布式系统设计中，负载均衡可以用来实现系统的高可用、集群扩容等功能。负载均衡也分为“客户端负载均衡”和“服务端负载均衡”两种模式。</p><p>我们的Spring Cloud Eureka属于客户端负载均衡的情况，所以这里我们用一个具体的例子来演示客户端负载均衡的具体实现。</p><blockquote><p>此Demo需要结合前面已有的eureka-server和eureka-client一起看效果</p></blockquote><h1 id="创建消费服务"><a href="#创建消费服务" class="headerlink" title="创建消费服务"></a>创建消费服务</h1><p>还是按照之前的套路，使用Spring Initializer新建一个Spring Boot工程，叫<code>eureka-consumer</code>。</p><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>对应的gradle文件如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span> version <span class="hljs-string">&#x27;2.6.3&#x27;</span><br>    id <span class="hljs-string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="hljs-string">&#x27;1.0.11.RELEASE&#x27;</span><br>    id <span class="hljs-string">&#x27;java&#x27;</span><br>&#125;<br><br>group = <span class="hljs-string">&#x27;com.hhp.registry&#x27;</span><br>version = <span class="hljs-string">&#x27;0.0.1&#x27;</span><br>sourceCompatibility = <span class="hljs-string">&#x27;1.8&#x27;</span><br><br>repositories &#123;<br>    maven &#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span> &#125;<br>    mavenLocal()<br>    mavenCentral()<br>&#125;<br><br>ext &#123;<br>    set(<span class="hljs-string">&#x27;springCloudVersion&#x27;</span>, <span class="hljs-string">&quot;2021.0.1&quot;</span>)<br>&#125;<br><br>dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-actuator&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br>&#125;<br><br>dependencyManagement &#123;<br>    imports &#123;<br>        mavenBom <span class="hljs-string">&quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span><br>    &#125;<br>&#125;<br><br>tasks.named(<span class="hljs-string">&#x27;test&#x27;</span>) &#123;<br>    useJUnitPlatform()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置服务发现"><a href="#配置服务发现" class="headerlink" title="配置服务发现"></a>配置服务发现</h2><p>打开<code>application.yml</code>文件，贴入下列配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-consumer</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">2101</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1001/eureka/</span><br></code></pre></td></tr></table></figure><p>找到Spring Boot启动入口类，在上面加上<code>@EnableDiscoveryClient</code>注解，这里我们把RestTemplate带入我们的配置中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaConsumerApplication</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaConsumerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="创建服务消费接口"><a href="#创建服务消费接口" class="headerlink" title="创建服务消费接口"></a>创建服务消费接口</h2><p>我们新建一个接口来消费eureka-client服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DcController</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> LoadBalancerClient loadBalancerClient;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/consumer&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">dc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">serviceInstance</span> <span class="hljs-operator">=</span> loadBalancerClient.choose(<span class="hljs-string">&quot;eureka-client&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://&quot;</span> + serviceInstance.getHost() + <span class="hljs-string">&quot;:&quot;</span> + serviceInstance.getPort() + <span class="hljs-string">&quot;/dc&quot;</span>;<br>        System.out.println(url);<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(url, String.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看出：</p><ol><li>我们注入了<code>LoadBalancerClient</code>和<code>RestTemplate</code>，并在<code>/consumer</code>接口中实现；</li><li>通过<code>LoadBalancerClient.choose</code>选择出<code>eureka-client</code>的服务实例；</li><li>然后通过<code>ServiceInstance</code>服务的信息拼接出<code>/dc</code>接口的详细地址；</li><li>利用<code>RestTemplate</code>对象实现对服务提供者接口的调用；</li></ol><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>将<code>eureka-server</code>，<code>eureka-client</code>和<code>eureka-consumer</code>三个服务同时运行起来，然后访问<code>http://localhost:2101/consumer</code>。可以看到当服务器请求过程中，真正调用的是<code>eureka-client</code>，而<code>eureka-consumer</code>会把请求通过网络分发出去。</p>]]></content>
    
    
    <categories>
      
      <category>微服务架构学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Spring Cloud</title>
    <link href="/2022/02/19/spring/springcloud-getting-started/"/>
    <url>/2022/02/19/spring/springcloud-getting-started/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud是什么？"><a href="#Spring-Cloud是什么？" class="headerlink" title="Spring Cloud是什么？"></a>Spring Cloud是什么？</h1><p>一个基于Spring Boot实现的云应用开发工具，为基于JVM的云应用开发中涉及的配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话以及集群状态管理等操作提供了一种简单的开发方式。</p><h1 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h1><p>“微服务架构”这几年非常火热，以至于关注微服务架构相关的开源产品被反复提及（比如：Netflix和Dubbo），Spring Cloud也因Spring社区强大的知名度和影响力被广大架构师和开发者备受关注。</p><p>简单来说：微服务架构是将一个完整的应用从数据存储开始垂直拆分成多个不同的服务，每隔服务都能独立部署、独立维护、独立扩展，服务之间通过诸如RESTful API的方式相互调用。</p><h1 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h1><p>服务治理就是提供了微服务架构中各个微服务实例的快速上线或下线且保持各服务能正常通信的能力方案总称。</p><h2 id="服务治理可以带来什么好处呢"><a href="#服务治理可以带来什么好处呢" class="headerlink" title="服务治理可以带来什么好处呢"></a>服务治理可以带来什么好处呢</h2><ul><li><p><strong>更高的可用性</strong></p><p>支持动态的服务实例集群环境，任何服务实例都可以随时上线下线。并且当一个微服务实例不可用时，治理服务器可以将请求转发其他服务提供者，当新服务上线时，也能够快速分担服务调用请求；</p></li></ul><ul><li><p><strong>负载均衡</strong></p><p>提供动态的负载均衡功能，可以将所有请求动态分布到其所管理的所有服务实例中进行处理；</p></li></ul><ul><li><p><strong>提升应用弹性</strong></p><p>服务治理客户端定时从服务治理服务器中复制一份实例信息缓存到本地，即使当服务治理服务器不可用时，服务消费者也可以使用本地的缓存去访问相应的服务，而不至于中断服务。通过这种机制，极大提高应用的弹性；</p></li></ul><ul><li><p><strong>高可用性集群</strong></p><p>可以构建服务治理集群，通过互相注册机制，将每隔治理服务器所管辖的服务信息列表进行交换，使服务治理拥有更高的可用性；</p></li></ul><h1 id="Spring-Cloud的基本使用"><a href="#Spring-Cloud的基本使用" class="headerlink" title="Spring Cloud的基本使用"></a>Spring Cloud的基本使用</h1><p>从上面对于微服务的治理和定义，我们搭建一个最基础和简单的微服务架构：</p><ul><li>服务注册中心</li><li>服务提供方</li></ul><p>这里我们使用Spring Cloud Eureka的基础服务来搭建，下面按照操作手册来做一下看看。</p><h2 id="创建服务发现中心"><a href="#创建服务发现中心" class="headerlink" title="创建服务发现中心"></a>创建服务发现中心</h2><p>使用IntelliJ IDEA创建一个Spring Boot项目，依赖管理工具选择Gradle。你可以使用Spring Initializer来生成项目：</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/WX20220219-143445@2x.png" alt="s" style="zoom:50%;" /></p><p>生成项目后，我们找到项目目录的启动入口文件</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 新增EnableEurekaServer注解，将该工程标识为一个服务注册中心</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServerApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaServerApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>找到<code>application.properties</code>文件，将其更改为<code>application.yml</code>（只是习惯用YML文件），修改一下Eureka Server的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 服务注册中心的名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span><br><br><span class="hljs-comment"># 服务注册中心监听的端口</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">1001</span><br><br><span class="hljs-comment"># 暂时禁用服务端注册客户端的行为</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></code></pre></td></tr></table></figure><p>到此，服务注册中心搭建完成，运行这个项目并且打开浏览器输入<code>http://localhost:1001/</code>就可以看到服务注册中心的基本页面了：</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/WX20220219-144301@2x.png" alt=""></p><h2 id="创建服务提供方"><a href="#创建服务提供方" class="headerlink" title="创建服务提供方"></a>创建服务提供方</h2><p>如法炮制，我们通过Spring Initializer再创建一个Spring Boot项目，名为eureka-client，对应的gradle依赖如下：</p><p>主要提供的是：</p><ul><li>spring-cloud-starter-netflix-eureka-client</li><li>spring-boot-starter-web</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs groovy">plugins &#123;<br>    id <span class="hljs-string">&#x27;org.springframework.boot&#x27;</span> version <span class="hljs-string">&#x27;2.6.3&#x27;</span><br>    id <span class="hljs-string">&#x27;io.spring.dependency-management&#x27;</span> version <span class="hljs-string">&#x27;1.0.11.RELEASE&#x27;</span><br>    id <span class="hljs-string">&#x27;java&#x27;</span><br>&#125;<br><br>group = <span class="hljs-string">&#x27;com.hhp.registry&#x27;</span><br>version = <span class="hljs-string">&#x27;0.0.1&#x27;</span><br>sourceCompatibility = <span class="hljs-string">&#x27;1.8&#x27;</span><br><br>repositories &#123;<br>    maven &#123; url <span class="hljs-string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span> &#125;<br>    mavenLocal()<br>    mavenCentral()<br>&#125;<br><br>ext &#123;<br>    set(<span class="hljs-string">&#x27;springCloudVersion&#x27;</span>, <span class="hljs-string">&quot;2021.0.1&quot;</span>)<br>&#125;<br><br>dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span><br>    implementation <span class="hljs-string">&#x27;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span><br>&#125;<br><br>dependencyManagement &#123;<br>    imports &#123;<br>        mavenBom <span class="hljs-string">&quot;org.springframework.cloud:spring-cloud-dependencies:$&#123;springCloudVersion&#125;&quot;</span><br>    &#125;<br>&#125;<br><br>tasks.named(<span class="hljs-string">&#x27;test&#x27;</span>) &#123;<br>    useJUnitPlatform()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们新建一个Rest接口：</p><blockquote><p>需要注意的是：这里的DiscoveryClient会出现Netflix和Spring Cloud的，选择Spring Cloud的官方依赖</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DcController</span> &#123;<br><br>    <span class="hljs-comment">// 选择Spring Cloud的依赖包导入</span><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/dc&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">dc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">services</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Service: &quot;</span> + discoveryClient.getServices();<br>        System.out.println(services);<br>        <span class="hljs-keyword">return</span> services;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>回到eureka-client的启动类，我们加上<code>@EnableDiscoveryClient</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaClientApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaClientApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>打开eureka-client的<code>application.yml</code>文件，将下列的配置贴进去：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-client</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">2001</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:1001/eureka/</span><br></code></pre></td></tr></table></figure><p>至此，服务提供方也创建成功。将服务注册中心和服务提供方都运行起来，打开注册中心可以看到eureka-client已经成功被注册。</p><p><img src="https://humphrey-blogs-bucket.oss-cn-shenzhen.aliyuncs.com/img/image-20220219162841266.png" alt="image-20220219162841266"></p><h1 id="Spring-Cloud-Consul服务注册"><a href="#Spring-Cloud-Consul服务注册" class="headerlink" title="Spring Cloud Consul服务注册"></a>Spring Cloud Consul服务注册</h1><p>使用Spring Cloud Consul实现，可以轻松将基于Spring Boot的微服务应用注册到Consul上，并通此实现微服务架构中的服务治理。</p><p>如果需要将上述的eureka-client转换成使用consul来，只需要按照下面2步操作即可：</p><ul><li>将spring-cloud-eureka-client依赖替换成spring-cloud-consul-discovery依赖</li><li>修改application.yml中的配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">consul:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">8500</span><br></code></pre></td></tr></table></figure><p>其他配置不需要更改，并且由于Consul本身已经集成了服务端，所以不需要额外创建<code>eureka-server</code>这样的服务。直接通过下载consul服务端程序即可使用。此过程不再赘述。</p><p>更多关于Consul的使用指南，可以查看官方文档：<a href="https://www.consul.io/">https://www.consul.io/</a></p>]]></content>
    
    
    <categories>
      
      <category>微服务架构学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3之Sass学习</title>
    <link href="/2022/02/18/frontend/css3/css3-ch03/"/>
    <url>/2022/02/18/frontend/css3/css3-ch03/</url>
    
    <content type="html"><![CDATA[<h1 id="Sass-基本教程"><a href="#Sass-基本教程" class="headerlink" title="Sass 基本教程"></a>Sass 基本教程</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Sass一个CSS预处理器，属于CSS的扩展语言，因此语法完全兼容CSS；最早是由Hampton Catlin设计并由Natalie Weizenbaum开发的层叠样式表语言。Sass全称（Syntactically Awesome Stylesheets）</p><p>Sass的文件后缀为<code>.scss</code>，因此Scss生成的格式化良好的代码，易于组织和维护；出现Scss的原因是CSS原本的语法不够强大，导致重复编写一些代码，无法实现复用，而且维护起来也不方便；</p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><p>安装也非常简单，可以用NPM来安装，如果是苹果用户可以用Homebrew；</p><figure class="highlight sh"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs sh">$ npm install -g sass<br><br>$ brew install sass/sass/sass<br></code></pre></td></tr></table></figure><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><p>安装好scss后就可以使用了，可以贴上一个例子：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$bgcolor</span>: lightblue;<br><span class="hljs-variable">$textcolor</span>: darkblue;<br><span class="hljs-variable">$fontsize</span>: <span class="hljs-number">18px</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-variable">$bgcolor</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$textcolor</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-variable">$fontsize</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量用于存储一些信息，它可以重复使用，可以存储以下信息：</p><ul><li>字符串</li><li>数字</li><li>颜色值</li><li>布尔值</li><li>列表</li><li>null值</li></ul><p>Sass变量使用<code>$</code>符号，Sass变量的作用域只能在当前层级上有效果</p><p>如果要设置全局作用域，可以使用<code>!global</code>关键词来设置，例子如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$myColor</span>: red;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>    <span class="hljs-variable">$myColor</span>: green !global;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$myColor</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="嵌套规则与属性"><a href="#嵌套规则与属性" class="headerlink" title="嵌套规则与属性"></a>嵌套规则与属性</h2><p>Sass嵌套CSS选择器类似于HTML的嵌套规则，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">nav</span> &#123;<br>    <span class="hljs-selector-tag">ul</span> &#123;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">list-style</span>: none;<br>    &#125;<br>    <br>    <span class="hljs-selector-tag">li</span> &#123;<br>        <span class="hljs-attribute">display</span>: inline-block;<br>    &#125;<br>    <br>    <span class="hljs-selector-tag">a</span> &#123;<br>        <span class="hljs-attribute">display</span>: block;<br>        <span class="hljs-attribute">padding</span>: <span class="hljs-number">6px</span> <span class="hljs-number">12px</span>;<br>        <span class="hljs-attribute">text-decoration</span>: none;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很多CSS属性都有同样的前缀，例如font-family，font-size和font-weight，text-align，text-transform和text-overflow，在Sass中可以使用嵌套属性来编写，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-attribute">font</span>: &#123;<br>    family: Helvetica, sans-serif;<br>    size: <span class="hljs-number">18px</span>;<br>    weight: bold;<br>&#125;<br><br>text: &#123;<br>    align: center;<br>    <span class="hljs-attribute">transform</span>: lowercase;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码会被转换成如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font-family</span>: Helvetica, sans-serif;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br><span class="hljs-attribute">font-weight</span>: bold;<br><br><span class="hljs-attribute">text-align</span>: center;<br><span class="hljs-attribute">text-transform</span>: lowercase;<br><span class="hljs-attribute">text-overflow</span>: hidden;<br></code></pre></td></tr></table></figure><h2 id="import-和-Partials"><a href="#import-和-Partials" class="headerlink" title="@import 和 Partials"></a>@import 和 Partials</h2><h3 id="import"><a href="#import" class="headerlink" title="@import"></a>@import</h3><p>Sass可以帮助减少重复的CSS代码，节省开发时间。</p><p>类似CSS，Sass支持<code>@import</code>指令，可以让我们导入其他文件等内容；例如：</p><p>创建一个<code>reset.scss</code>文件</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">html</span>,<br><span class="hljs-selector-tag">body</span>,<br><span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">ol</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在<code>standard.scss</code>文件中使用<code>@import</code>指令导入<code>reser.scss</code>文件；</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;reset&quot;</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: Helvetica, sans-serif;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Partials"><a href="#Partials" class="headerlink" title="Partials"></a>Partials</h3><p>如果你不希望将一个Sass代码编译到CSS文件中，可以在文件名的开头添加一个下划线。这将告诉Sass不要将Sass编译到CSS文件中。</p><p>例如我创建一个<code>_colors.sass</code>文件，但是不会被编译成<code>_colors.css</code>；</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-variable">$myPink</span>: <span class="hljs-number">#ee82ee</span>;<br><span class="hljs-variable">$myBlue</span>: <span class="hljs-number">#4169e1</span>;<br><span class="hljs-variable">$myGreen</span>: <span class="hljs-number">#8fbc8f</span>;<br></code></pre></td></tr></table></figure><p>如果需要导入该文件，则不需要使用下划线；</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;colors&quot;</span>;<br><br><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: Helvetica, sans-serif;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-variable">$myBlue</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是：不要将待下划线与不带下划线的同名文件放置在同一个文件目录下，比如：<code>_colors.scss</code>和<code>colors.scss</code>不能同时存在于一个目录下，否则带下划线的文件将会被忽略；</p><h2 id="mixin-和-include"><a href="#mixin-和-include" class="headerlink" title="@mixin 和 @include"></a>@mixin 和 @include</h2><p><code>@mixin</code>指令允许我们定义一个可以在争个光样式表中重复使用的样式，语法为<code>@mixin name &#123;property: value&#125;</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> important-text &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@include</code>指令可以将混入（mixin）引入文档中；同样地，包含important-text混入代码如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.danger</span> &#123;<br>    <span class="hljs-keyword">@include</span> important-text;<br>    <span class="hljs-attribute">background-color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>除此之外，混入可以接收参数，我们可以向混入传递变量，定义可以接收参数的混入：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> bordered(<span class="hljs-variable">$color</span>, <span class="hljs-variable">$width</span>) &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-variable">$width</span> solid <span class="hljs-variable">$color</span>;<br>&#125;<br><br><span class="hljs-selector-class">.myArticle</span> &#123;<br>    <span class="hljs-keyword">@include</span> bordered(blue, <span class="hljs-number">1px</span>);<br>&#125;<br><br><span class="hljs-selector-class">.myNotes</span> &#123;<br>    <span class="hljs-keyword">@include</span> bordered(red, <span class="hljs-number">2px</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>除此之外，混入也可以定义默认值，语法格式如下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> bordered(<span class="hljs-variable">$color</span>: blue, <span class="hljs-variable">$width</span>: <span class="hljs-number">1px</span>) &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-variable">$width</span> solid <span class="hljs-variable">$color</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>有时候不能确定混入（mixin）或者一个函数（function）使用多少个参数，这个时候我们就可以使用<code>...</code>来设置可变参数，例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> box-shadow(<span class="hljs-variable">$shadows</span>...) &#123;<br>    -moz-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">$shadows</span>;<br>    -webkit-<span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">$shadows</span>;<br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-variable">$shadows</span>;<br>&#125;<br><br><span class="hljs-selector-class">.shadows</span> &#123;<br>    <span class="hljs-keyword">@include</span>: box-shadow(<span class="hljs-number">0px</span> <span class="hljs-number">4px</span> <span class="hljs-number">5px</span> <span class="hljs-number">#666</span>, <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">10px</span> <span class="hljs-number">#999</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>浏览器前缀使用混入也是十分方便的；</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@mixin</span> transform(<span class="hljs-variable">$property</span>) &#123;<br>    -webkit-<span class="hljs-attribute">transform</span>: <span class="hljs-variable">$property</span>;<br>    -ms-<span class="hljs-attribute">transform</span>: <span class="hljs-variable">$property</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-variable">$property</span>;<br>&#125;<br><br><span class="hljs-selector-class">.myBox</span> &#123;<br>    <span class="hljs-keyword">@include</span>: transform(rotate(<span class="hljs-number">20deg</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="extend-和继承"><a href="#extend-和继承" class="headerlink" title="@extend 和继承"></a>@extend 和继承</h2><p><code>@extend</code>指令告诉Sass一个选择器的样式从另一个选择器继承；</p><p>如果一个样式与另一个样式几乎相同，只有少量区别，则使用@extend就显得更有用；例如：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-class">.button-basic</span> &#123;<br>    <span class="hljs-attribute">border</span>: none;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">text-align</span>: center;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-selector-class">.button-reporter</span> &#123;<br>    <span class="hljs-keyword">@extend</span> .button-basic;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br><br><span class="hljs-selector-class">.button-submit</span> &#123;<br>    <span class="hljs-keyword">@extend</span> .button-basic;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-attribute">color</span>: white;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过将公共代码抽离出来公用给其他CSS样式从而实现代码的复用，真棒；</p><h2 id="Sass函数"><a href="#Sass函数" class="headerlink" title="Sass函数"></a>Sass函数</h2><p>Sass定义了各种类型的函数，可以通过CSS语句直接调用；这里就不再赘述，有需要可以自行查询文档了解；</p><ul><li>字符串相关函数</li><li>数字相关函数</li><li>列表相关函数</li><li>映射相关函数</li><li>选择器相关函数</li><li>Introspection相关函数</li><li>颜色相关函数</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3进阶操作</title>
    <link href="/2022/02/18/frontend/css3/css3-ch02/"/>
    <url>/2022/02/18/frontend/css3/css3-ch02/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS3-进阶操作"><a href="#CSS3-进阶操作" class="headerlink" title="CSS3 进阶操作"></a>CSS3 进阶操作</h1><h2 id="CSS3-边框"><a href="#CSS3-边框" class="headerlink" title="CSS3 边框"></a>CSS3 边框</h2><p>在CSS3中你可以创建圆角边框、阴影边框。属性如下：</p><ul><li>border-radius：边框圆角</li><li>box-shadow：盒子阴影</li><li>border-image：边框图片</li></ul><h2 id="CSS3-圆角"><a href="#CSS3-圆角" class="headerlink" title="CSS3 圆角"></a>CSS3 圆角</h2><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#cornenr1</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">25px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#a8bcf4</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">20px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#corner2</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>:<span class="hljs-number">15px</span> <span class="hljs-number">50px</span> <span class="hljs-number">30px</span> <span class="hljs-number">5px</span>;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#fe5cb9</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现第二个例子有四个值：顺序为：左上、右上、右下和左下；</p><p>一个值就是默认四个角都是一样的，没什么毛病。</p><p>初次之外还有其他属性，可以自己熟悉一下：</p><ul><li>border-top-left-radius</li><li>border-top-right-radius</li><li>border-bottom-left-radius</li><li>border-bottom-right-radis</li></ul><h2 id="CSS3-背景"><a href="#CSS3-背景" class="headerlink" title="CSS3 背景"></a>CSS3 背景</h2><p>CSS3中新增几个背景属性，提供了更大背景元素控制；</p><ul><li>background-image：添加背景图片，不同背景用逗号分隔开；</li><li>background-size：指定背景图像的大小；</li><li>background-origin：指定背景图像的位置区域，有：border-box, padding-box和content-box;</li><li>background-clip：从指定位置开始绘制背景图形；</li></ul><h2 id="CSS3-渐变"><a href="#CSS3-渐变" class="headerlink" title="CSS3 渐变"></a>CSS3 渐变</h2><p>可以在两个或者多个指定的颜色之间显示平稳的过渡，CSS3中定义了两种类型的渐变（gradients）：</p><ul><li>线性渐变：向上下左右对角方向</li><li>径向渐变：由中心定义</li></ul><p>语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(direction, color-stop1, color-stop2, ...)<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">  direction: 默认上下，左右为to right</span><br><span class="hljs-comment">  对角渐变：to bottom right</span><br><span class="hljs-comment">  还可以使用角度：angle (这里指的是弧度)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>重复的线性渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">repeating-linear-gradient</span>(red, yellow <span class="hljs-number">10%</span>, green <span class="hljs-number">20%</span>);<br></code></pre></td></tr></table></figure><p>径向渐变</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>(shape size at position, start-color, ... ,last-color);<br></code></pre></td></tr></table></figure><p>shape参数定义了形状。可以是circle和ellipse，圆形和椭圆形；</p><p>和重复地线性渐变一样，径向渐变也有重复地属性，这里就不再演示了。</p><h2 id="CSS3-文本效果-amp-字体"><a href="#CSS3-文本效果-amp-字体" class="headerlink" title="CSS3 文本效果 &amp; 字体"></a>CSS3 文本效果 &amp; 字体</h2><p>文本效果包括下面的这几个：</p><ul><li>text-shadow：文本阴影，可以定义多个，可以做字体发光效果</li><li>box-shadow：盒子阴影，可以定义多个，做成发光盒子</li><li>text-overflow：指定用户如何显示溢出内容；</li><li>word-wrap：自动换行属性允许强制文本换行，这意味着分裂它中间的一个字；</li><li>word-break：单词拆分换行属性指定换行规则；</li></ul><p>需要使用自定义字体可以使用<code>@font-face</code>属性。例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: myFirstFont;<br>  <span class="hljs-attribute">src</span> url(<span class="hljs-attribute">font</span><span class="hljs-selector-class">.ttf</span>);<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: myFirstFont;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS3-2D-amp-3D转换"><a href="#CSS3-2D-amp-3D转换" class="headerlink" title="CSS3 2D &amp; 3D转换"></a>CSS3 2D &amp; 3D转换</h2><h3 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h3><p>2D变换方法有下面5种：</p><ul><li>translate：根据x轴和y轴位置给定的参数，从当前元素位置移动；</li><li>rotate：在一个给定读书顺时针旋转元素，负值代表逆时针旋转；</li><li>scale：该元素增加或者减少大小，取决于宽度（x轴）和高度（y轴）的参数；</li><li>skew：表示x轴和y轴倾斜的角度，如果第二个参数为空，则默认为0，参数为负数表示像反方向倾斜；</li><li>matrix：和2D变换方法合并成一个，一共有六个参数，包括：旋转、缩放、移动和倾斜的功能；</li></ul><p>具体语法可以再查阅</p><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><p>3D转换会使用到两个方法：</p><ul><li>rotateX：围绕其在一个给定度数X轴旋转的元素；</li><li>rotateY：围绕其在一个给定读书Y轴旋转的元素；</li></ul><p>你也可以使用transform属性做2D和3D变换，一般来说建议使用transform属性，特别是在使用一些库来实现高级动画效果的时候；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">transform</span>: none | transform-functions;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">transform-functions包括：</span><br><span class="hljs-comment">matrix, matrix3d;</span><br><span class="hljs-comment">translate, translate3d, translateX, translateY, translateZ;</span><br><span class="hljs-comment">scale, scale3d, scaleX, scaleY, scaleZ;</span><br><span class="hljs-comment">rotate, rotate3d, rotateX, rotateY, rotateX;</span><br><span class="hljs-comment">skew, skewX, skewY;</span><br><span class="hljs-comment">perspective：为3D转换元素定义透视视图；</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="CSS3-过渡"><a href="#CSS3-过渡" class="headerlink" title="CSS3 过渡"></a>CSS3 过渡</h2><p>CSS3过渡是元素从一种样式逐渐改变为另一种效果，要实现这一点，必须规定两项内容；</p><ul><li>指定要添加效果的CSS属性；</li><li>指定效果的持续时间；</li></ul><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span>;<br>    -webkit-<span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span>; <span class="hljs-comment">/* Safari or Chrome */</span><br>&#125;<br><br><span class="hljs-comment">/* 要添加多个样式的变换效果，可以使用逗号分隔属性 */</span><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">transition</span>: width <span class="hljs-number">2s</span>, height <span class="hljs-number">2s</span>, transform <span class="hljs-number">2s</span>;<br>    -webkit-<span class="hljs-attribute">transform</span>: width <span class="hljs-number">2s</span>, height <span class="hljs-number">2s</span>, transform <span class="hljs-number">2s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h2><p>CSS3可以创建动画，可以取代一些JavaScript实现的动画效果；</p><p>CSS3使用<code>@keyframes</code>创建动画，语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> myfirst &#123;<br>    <span class="hljs-selector-tag">from</span> &#123; <span class="hljs-attribute">background</span>: red; &#125;<br>    <span class="hljs-selector-tag">to</span> &#123; <span class="hljs-attribute">background</span>: yellow; &#125;<br>&#125;<br><br><span class="hljs-keyword">@-webkit-keyframes</span> myfirst &#123;<br>    <span class="hljs-selector-tag">from</span> &#123; <span class="hljs-attribute">background</span>: red; &#125;<br>    <span class="hljs-selector-tag">to</span> &#123; <span class="hljs-attribute">background</span>: yellow; &#125;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">animation</span>: myfirst <span class="hljs-number">5s</span>;<br>&#125;<br><br><span class="hljs-comment">/* 除此之外还可以这样定义 */</span><br><span class="hljs-keyword">@keyframes</span> myfirst &#123;<br>    <span class="hljs-number">0%</span> &#123; <span class="hljs-attribute">background</span>: red; &#125;<br>    <span class="hljs-number">25%</span> &#123; <span class="hljs-attribute">background</span>: yellow; &#125;<br>    <span class="hljs-number">50%</span> &#123; <span class="hljs-attribute">background</span>: blue; &#125;<br>    <span class="hljs-number">100%</span> &#123; <span class="hljs-attribute">background</span>: green; &#125;<br>&#125;<br><br><span class="hljs-keyword">@-webkit-keyframes</span> myfirst &#123;<br>    <span class="hljs-number">0%</span> &#123; <span class="hljs-attribute">background</span>: red; &#125;<br>    <span class="hljs-number">25%</span> &#123; <span class="hljs-attribute">background</span>: yellow; &#125;<br>    <span class="hljs-number">50%</span> &#123; <span class="hljs-attribute">background</span>: blue; &#125;<br>    <span class="hljs-number">100%</span> &#123; <span class="hljs-attribute">background</span>: green; &#125;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">animation</span>: myfirst <span class="hljs-number">5s</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CSS3媒体查询"><a href="#CSS3媒体查询" class="headerlink" title="CSS3媒体查询"></a>CSS3媒体查询</h2><p>顾名思义，针对不同媒体类型的设备定制不同的样式规则，例如：手机、电视、平板、电脑以及阅读器设置不同的样式规则；语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> <span class="hljs-keyword">not</span> | <span class="hljs-keyword">only</span> mediatype <span class="hljs-keyword">and</span> (expression) &#123;<br>    <span class="hljs-comment">/* Write CSS Code here... */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>解释一下参数的含义：</p><ul><li>not：用于排除某些特定设备的；</li><li>only：用来指定某种特别的媒体设备；</li><li>all：适用于所有媒体设备，这个最常见；</li></ul><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">min-width</span>: <span class="hljs-number">480px</span>) &#123;<br>    <span class="hljs-selector-id">#leftsidebar</span> &#123; <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>; <span class="hljs-attribute">float</span>: left; &#125;<br>    <span class="hljs-selector-id">#main</span> &#123; <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">216px</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上实例在屏幕可视窗口尺寸大于480px像素时将菜单浮动到页面左侧；</p><h2 id="CSS3-Flex布局"><a href="#CSS3-Flex布局" class="headerlink" title="CSS3 Flex布局"></a>CSS3 Flex布局</h2><p>弹性布局是CSS3的一种新布局模式，当页面需要适应不同的屏幕大小以及设备类型时确保元素拥有恰当的行为布局方式，引入弹性布局模型的目的是提供一种更加有效地方式来对一个容器中的元素进行排列、对齐和分配空白空间；</p><p>下面以例子来说明：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.flex-container</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">250px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">background</span>: lightgray;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.flex-item</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">                <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">                <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-container&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-item&quot;</span>&gt;</span>flex item 1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-item&quot;</span>&gt;</span>flex item 2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;flex-item&quot;</span>&gt;</span>flex item 3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="弹性容器布局属性"><a href="#弹性容器布局属性" class="headerlink" title="弹性容器布局属性"></a>弹性容器布局属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>指定了弹性子元素在父容器中的位置，值有：</p><ul><li>row：默认值，从左到右排列；</li><li>row-reverse：反转横向排列，从右到左排列；</li><li>column：纵向排列；</li><li>column-reverse：反转纵向排列，从后往前排；</li></ul><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>内容对齐属性应用在弹性容器上，把弹性项沿着弹性容器的主轴线对齐，值有：</p><ul><li>flex-start：弹性项目向行头紧挨着填充。这个是默认值。第一个弹性项的main-start外边距边线被放置在该行的main-start边线，而后续弹性项依次平齐摆放。</li><li>flex-end：弹性项目向行尾紧挨着填充。第一个弹性项的main-end外边距边线被放置在该行的main-end边线，而后续弹性项依次平齐摆放。</li><li>center：弹性项目居中紧挨着填充。（如果剩余的自由空间是负的，则弹性项目将在两个方向上同时溢出）。</li><li>space-between：弹性项目平均分布在该行上。如果剩余空间为负或者只有一个弹性项，则该值等同于flex-start。否则，第1个弹性项的外边距和行的main-start边线对齐，而最后1个弹性项的外边距和行的main-end边线对齐，然后剩余的弹性项分布在该行上，相邻项目的间隔相等。</li><li>space-around：弹性项目平均分布在该行上，两边留有一半的间隔空间。如果剩余空间为负或者只有一个弹性项，则该值等同于center。否则，弹性项目沿该行分布，且彼此间隔相等（比如是20px），同时首尾两边和弹性容器之间留有一半的间隔（1/2*20px=10px）。</li></ul><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>设置或检索弹性盒子元素在侧轴（纵轴）方向上的对齐方式；值有：</p><ul><li>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li><li>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</li><li>strench：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>指定弹性盒子的子元素换行方式，值有：</p><ul><li>nowrap：默认， 弹性容器为单行。该情况下弹性子项可能会溢出容器。</li><li>wrap：弹性容器为多行。该情况下弹性子项溢出的部分会被放置到新行，子项内部会发生断行</li><li>wrap-reverse：反转 wrap 排列。</li></ul><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>用于修改flex-wrap属性的行为，类似align-items，但它不是设置弹性子元素的对齐，而是设置各个行的对齐，值有：</p><ul><li>strench：默认。各行将会伸展以占用剩余的空间。</li><li>flex-start：各行向弹性盒容器的起始位置堆叠。</li><li>flex-end：各行向弹性盒容器的结束位置堆叠。</li><li>center：各行向弹性盒容器的中间位置堆叠。</li><li>space-between：各行在弹性盒容器中平均分布。</li><li>space-around：各行在弹性盒容器中平均分布，两端保留子元素与子元素之间间距大小的一半。</li></ul><h3 id="弹性元素布局属性"><a href="#弹性元素布局属性" class="headerlink" title="弹性元素布局属性"></a>弹性元素布局属性</h3><h4 id="排序order"><a href="#排序order" class="headerlink" title="排序order"></a>排序order</h4><p>用整数值来定义排列顺序，数值小的排在前面，可以为负值；例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flex-item</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: cornflowerblue;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.flex-item</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>    <span class="hljs-attribute">order</span>: -<span class="hljs-number">1</span>;<br>    -webkit-<span class="hljs-attribute">order</span>: -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><p>设置margin值为auto，自动获取弹性容器中剩余空间，因此设置垂直方向margin值为’auto’</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flex-item</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: cornflowerblue;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">75px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">75px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.flex-item</span><span class="hljs-selector-pseudo">:first</span>-child &#123;<br>    <span class="hljs-attribute">margin-right</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="完美居中"><a href="#完美居中" class="headerlink" title="完美居中"></a>完美居中</h4><p>可以看出，使用弹性盒子后，居中变得非常简单。下面演示一下完美居中的实现方法；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flex-item</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: cornflowerblue;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">75px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">75px</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p>用于设置弹性元素自身在纵轴方向上的对齐方式，值有：</p><ul><li>auto：如果’align-self’的值为’auto’，则其计算值为元素的父元素的’align-items’值，如果其没有父元素，则计算值为’stretch’。</li><li>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。</li><li>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。</li><li>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。</li><li>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与’flex-start’等效。其它情况下，该值将参与基线对齐。</li><li>strench：如果指定侧轴大小的属性值为’auto’，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照’min/max-width/height’属性的限制。</li></ul><p>以下演示了不同值的效果，可以在<a href="https://codepen.io">Code Pen</a>上直接试验：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flex-item</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: cornflowerblue;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;<br>    <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item1</span> &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-start;<br>    -webkit-<span class="hljs-attribute">align-self</span>: flex-start;<br>&#125;<br><br><span class="hljs-selector-class">.item2</span> &#123;<br>    <span class="hljs-attribute">align-self</span>: flex-end;<br>    -webkit-<span class="hljs-attribute">align-self</span>: flex-end;<br>&#125;<br><br><span class="hljs-selector-class">.item3</span> &#123;<br>    <span class="hljs-attribute">align-self</span>: center;<br>    -webkit-<span class="hljs-attribute">align-self</span>: center;<br>&#125;<br><br><span class="hljs-selector-class">.item4</span> &#123;<br>    <span class="hljs-attribute">align-self</span>: baseline;<br>    -webkit-<span class="hljs-attribute">align-self</span>: baseline;<br>&#125;<br><br><span class="hljs-selector-class">.item5</span> &#123;<br>    <span class="hljs-attribute">align-self</span>: strench;<br>    -webkit-<span class="hljs-attribute">align-self</span>: strench;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h4><p>用于指定弹性子元素如何分配空间，值有：</p><ul><li>auto：计算值为1 1 auto</li><li>initial：计算值为0 1 auto</li><li>none：计算值为0 0 auto</li><li>inherit：从父元素继承</li><li>flex-grow：定义弹性盒子元素的扩展比率</li><li>flex-shrink：定义弹性盒子元素的搜索比率</li><li>flex-basis：定义弹性盒子元素的默认基准值</li></ul><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.flex-item</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: cornflowerblue;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item1</span> &#123;<br>    -webkit-<span class="hljs-attribute">flex</span>: <span class="hljs-number">2</span>;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item2</span> &#123;<br>    -webkit-<span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-selector-class">.item3</span> &#123;<br>    -webkit-<span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3基础回顾</title>
    <link href="/2022/02/18/frontend/css3/css3-ch01/"/>
    <url>/2022/02/18/frontend/css3/css3-ch01/</url>
    
    <content type="html"><![CDATA[<h1 id="CSS3-基础回顾"><a href="#CSS3-基础回顾" class="headerlink" title="CSS3 基础回顾"></a>CSS3 基础回顾</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>全称“层叠样式表”（Cascade Style Sheet），用来修饰HTML元素的外观：包括大小、位置、颜色和形状等等；</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs css">selector &#123;<br>  property-type: property-value;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单来说：需要对哪个元素做修饰，首先要选中需要修饰的元素，然后再使用CSS对其作修改。</p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p>比较常用的选择器有：class选择器和id选择器，除此之外还有一些高级的选择器，在日常使用中我们可以通过查阅文档来了解一些更高级的选择器用法。</p><ul><li>class选择器</li><li>id选择器</li><li>nth-child选择器等</li></ul><p>一个例子来说明这些选择器的用法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.className</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>&#125;<br><br><span class="hljs-selector-id">#id-name</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>n) &#123;<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#4f5b62</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面列举了三个选择器的语法：可以看到class选择器的语法是<code>.className</code>，id选择器的语法是<code>#idName</code>；掌握这两个基本就能满足90%以上的应用场景了；</p><p>最后还有一个选择器值得关注：它的语义是：选择className为box并且顺序为偶数序的元素。这属于高级选择器中的其中一个，还有其他的一些可以通过上网查阅来了解；</p><p>一般在前端开发中会遵循一个编码规范：就是class选择器专门用来修饰样式；id选择器专门用来编写逻辑；</p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>具有特定属性的HTML元素样式不仅仅是class和id，语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[title]</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">background-color</span>: yellow;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;button&quot;</span>]</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">35px</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="嵌套和分组"><a href="#嵌套和分组" class="headerlink" title="嵌套和分组"></a>嵌套和分组</h3><p>给很多样式相同的元素设置样式，可以使用分组选择器，语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>,<br><span class="hljs-selector-tag">h2</span>,<br><span class="hljs-selector-tag">p</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></td></tr></table></figure><p>嵌套选择器可以用于选择器内部的样式，有下面几种实践：</p><ul><li><code>p&#123;&#125;</code>：为所有p元素指定一个样式；</li><li><code>.marked &#123;&#125;</code>：为所有<code>class=&quot;marked&quot;</code>的元素设置样式；</li><li><code>.marked p &#123;&#125;</code>为所有<code>class=&quot;marked&quot;</code>元素内部的<code>p</code>元素设置样式；</li><li><code>p.marked &#123;&#125;</code>为所有<code>p</code>元素内部<code>class=&quot;marked&quot;</code>的元素设置样式；</li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>所有的HTML元素都可以看作是盒子，在CSS中，“box model”是用来设计和布局使用的；</p><p>一个盒子有下列几部分构成：</p><ul><li>外边距(margin)：清除边框外的区域，外边距是透明的；</li><li>边框(border)：围绕在内边距和内容外的边框，这部分是可以看见的；</li><li>内边距(padding)：清除内容周围的区域，内边距是透明的；</li><li>内容(content)：盒子的内容，显示文本和图像；</li></ul><p>所以你需要知道：给一个元素设置宽高的时候要加上它的外边距、边框、内边距的宽高，这样才是一个元素的宽高；</p><p>盒子模型可以通过浏览器的开发者工具看到，如果需要检视页面上的HTML元素，你可以通过查看元素在控制台的信息来查看它的边距情况。</p><p>总结一下：最终元素的总宽高计算公式是这样的；</p><ul><li>总元素的宽度：宽度 + 左右填充 + 左右边框 + 左右边距；</li><li>总元素的高度：高度 + 上下填充 + 上下边框 + 上下边距；</li></ul><h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>可以给字体，盒子设置颜色，下面举一部分例子：</p><ul><li>盒子背景：<code>background-color</code>，背景有一个简写的属性叫<code>background</code>;</li><li>字体颜色：<code>font-color</code>，同样地，字体也有一个简写属性叫<code>font</code>;</li><li>边框：边框使用<code>border</code>属性也可以给其上色，具体语法可以查阅相关文档；</li><li>还有一个CSS属性叫<code>color</code>，这个是给文本设置颜色的；</li></ul><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><p>字体是HTML中的重要显示元素，CSS中字体的设置有下列几个：</p><ul><li>font：all in one属性，可以设置字体的所有属性</li><li>font-family：字体</li><li>font-size：字体大小</li><li>font-style：字体样式，粗体和斜体之类的</li><li>font-variant：以小型大写字体或者正常字体显示文本；</li><li>font-weight：指定字体的粗细；</li></ul><p>介绍一下all-on-one属性的语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">font</span>: <span class="hljs-string">&quot;&lt;font-style&gt; &lt;font-variant&gt; &lt;font-weight&gt; &lt;font-size&gt; / &lt;line-height&gt; &lt;font-family&gt;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="All-in-one-属性语法"><a href="#All-in-one-属性语法" class="headerlink" title="All-in-one 属性语法"></a>All-in-one 属性语法</h3><h4 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h4><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>  marign: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span> <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>; // 次序分别为上、右、下、左<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span> <span class="hljs-number">15px</span>; // 次序分别为上，左右，下<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>; // 上下，左右<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">15px</span>; //上下左右全都一样<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="填充（padding）"><a href="#填充（padding）" class="headerlink" title="填充（padding）"></a>填充（padding）</h4><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span> <span class="hljs-number">15px</span> <span class="hljs-number">30px</span>; // 次序分别为上、右、下、左<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  padidng: <span class="hljs-number">15px</span> <span class="hljs-number">30px</span> <span class="hljs-number">15px</span>; // 次序为上，左右，下<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span>; <span class="hljs-number">30px</span>; // 上下，左右<br>&#125;<br><br><span class="hljs-selector-tag">h1</span> &#123;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">25px</span>; // 上下左右全都一样<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><p>display设置一个元素该如何在页面上显示，visibility属性指定一个元素应可见还是隐藏；</p><h4 id="隐藏元素"><a href="#隐藏元素" class="headerlink" title="隐藏元素"></a>隐藏元素</h4><p>这里提供两种方法：</p><ul><li><code>display: none</code>：除了会隐藏，还会清除元素原本占用的页面空间；</li><li><code>visibility: hidden</code>：虽然也能隐藏，但是并不会清除元素原本占用的页面空间；</li></ul><h4 id="块级元素和内联元素"><a href="#块级元素和内联元素" class="headerlink" title="块级元素和内联元素"></a>块级元素和内联元素</h4><p>需要注意的是：块级元素默认占用一行，元素在页面上垂直排列；可以设置宽度和高度；</p><p>内联元素则相反：其大小由内容决定，只有填满了一行才会在换行继续，默认情况下不能设置宽和高；但是可以设置边距和填充并且只在水平方向有效；</p><p>了解了上面的知识以后，我们就会知道，使用display方法可以改变元素的显示方式是以块级来显示还是以内联方式来显示。相应的属性如下：</p><ul><li>block</li><li>inline</li></ul><p>举个例子：加入你想给<code>&lt;span&gt;</code>设置元素宽高，但由于其为内联元素，无法设置宽高；这个时候你可以使用display属性为其设置显示模式为<code>block</code>，然后就可以给<code>&lt;span&gt;</code>设置宽高了；</p><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>定位属性叫<code>position</code>，其指定了元素的定位类型，属性有5个值；</p><ul><li>static：默认设置，没有定位，遵循正常的文档流（即从上到下，从左到右）</li><li>relative：相对定位元素的定位是相对其正常位置</li><li>fixed：元素的位置相对于浏览器窗口是固定的</li><li>absolute：相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>html</code>；</li><li>stickly：基于用户的滚动位置来定位；</li></ul><p>除此之外，还有一个元素叫做<code>z-index</code>，其指定了一个元素的堆叠顺序（哪个元素该放在前面，哪个元素该放在后面），一个元素可以有正数和负数的堆叠顺序；</p><h2 id="溢出"><a href="#溢出" class="headerlink" title="溢出"></a>溢出</h2><p>CSS overflow属性用于控制内容溢出元素框时的显示方式，有下面5个属性值；</p><ul><li>visible：默认值，内容不会被裁剪，会显示在元素框之外</li><li>hidden：内容会被裁剪，并且其余部分的内容是不可见的；</li><li>scroll：内容会被裁剪，但是浏览器会显示滚动条以便于查看其余内容</li><li>auto：如果内容被裁剪，浏览器会显示滚动条以便于查看其余内容</li><li>inherit：规定应该从父元素继承overflow属性的值</li></ul><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><p>浮动的框可以向左或者向右移动，直到它的外边框边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档流的普通流中，所以文档的普通流中的浮动框之后的块框表现地像浮动框不存在一样。</p><p>需要注意的是：当初float被设计的时候就是用来完成文本环绕的效果，所以文本不会被挡住，这是float的特性，因此float是一种不彻底的脱离文档流方式。无论多么复杂的布局，其基本出发点均是：“如何在一行显示多个div元素”。</p><p>于是在浮动布局中会存在下面这个现象：</p><ul><li>如果元素A是浮动元素并且其上一个元素也是浮动元素，那么A元素就会跟随在上一个元素的后边；（如果一行放不下就会挤到下一行）</li><li>如果元素A是浮动元素，但是其上一个元素是标准流元素，那么A的相对垂直位置不会改变，也就是说A的顶部总是和上一个元素的底部对齐；</li><li>浮动框之后的block元素会认为这个框不存在，但其中的文本依然会认为这个元素让出位置。浮动的框之后的inline元素，会为这个框空出位置，然后按顺序排列；</li></ul><p>使用浮动的原则如下：</p><p>要么都使用浮动，要么都不使用浮动；要么对没使用浮动的DIV设置margin样式；</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>在非IE浏览器的环境下，当容器高度为auto，且容器内容有浮动的元素，在这种情况下，容器的高度不能自动伸长以适应内容的高度，使得内容溢出到容器外面而影响（甚至是破坏）布局的现象。这个现象就叫做浮动溢出，为了防止这个现象出现而进行的CSS处理，就叫做CSS清除浮动。</p><p>引用W3C的一个例子来解释浮动溢出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.news</span>: &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="language-css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--虽然从HTML上看news是包裹着图片和文字的--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--实际上由于浮动元素不占据空间，所以news的高度直接塌陷了--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;news-pic.jpg&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>some text<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>既然出现了元素的“高度塌陷”，那么可以使用清除浮动的方法来解决这个问题：</p><p><strong>方法1：在浮动元素后使用一个空元素，并在CSS中赋予<code>.clear &#123;clear: both&#125;</code>属性即可清除浮动；例如：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;news-pic.jpg&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Some Text<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>优点：简单、代码少，浏览器兼容性好；</p><p>缺点：需要添加大量无语义的html元素，代码不够优雅，后期也不容易维护；</p><p><strong>方法2：使用CSS的overflow属性（BFC机制）</strong></p><p>给浮动元素的容器添加<code>overflow: hidden</code>或者<code>overflow: auto</code>可以清除浮动，在添加了相关属性后，浮动元素又回到了容器层，把容器高度撑起，达到清除浮动的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="language-css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">                <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">                <span class="hljs-comment">/* 触发IE6 / IE7的haslayout机制 */</span></span><br><span class="language-css">                *zoom: <span class="hljs-number">1</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;news-pic.jpg&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>some text<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方法3：给浮动元素的容器添加浮动</strong></p><p>给浮动元素的容器添加浮动属性即可清除内部浮动，但是这样做会使其整体浮动，影响布局，不推荐使用；</p><p><strong>方法4：使用邻接元素处理</strong></p><p>什么都不做，给浮动元素后面的元素添加clear属性；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="language-css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">clear</span>: both;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;news-pic.jpg&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Some text<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>方法5：使用CSS的:after伪元素</strong></p><p>给浮动元素的容器添加一个clearfix的class，然后给这个class添加一个<code>:after</code>伪元素实现方法1的那种效果。此方法兼容性好；推荐这种方法；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">background-color</span>: gray;</span><br><span class="language-css">                <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">img</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.news</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">float</span>: right;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">:after</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;020&quot;</span>;</span><br><span class="language-css">                <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">                <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">                <span class="hljs-attribute">clear</span>: both;</span><br><span class="language-css">                <span class="hljs-attribute">visibility</span>: hidden;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-selector-class">.clearfix</span> &#123;</span><br><span class="language-css">                <span class="hljs-comment">/* 触发 IE6/IE7的haslayout机制 */</span></span><br><span class="language-css">                zoom: <span class="hljs-number">1</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news clearfix&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;news-pic.jpg&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Some text<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><p>CSS伪类是用来添加一些选择器的特殊效果，语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* 基础语法 */</span><br>selector:pseudo-class &#123; property: value; &#125;<br><br><span class="hljs-comment">/* CSS类选择器 */</span><br>selector<span class="hljs-selector-class">.class</span>:pseudo-class &#123; property: value; &#125;<br></code></pre></td></tr></table></figure><h3 id="anchor伪类"><a href="#anchor伪类" class="headerlink" title="anchor伪类"></a>anchor伪类</h3><p>链接的不同状态都可以以不同的方式显示，例如：</p><ul><li><code>a:link</code>：未访问的链接</li><li><code>a:visited</code>：已访问的链接</li><li><code>a:hover</code>：鼠标划过的链接</li><li><code>a:active</code>：已选中的链接</li></ul><h3 id="CSS伪元素"><a href="#CSS伪元素" class="headerlink" title="CSS伪元素"></a>CSS伪元素</h3><p>CSS伪元素用来添加一些选择器的特殊效果，语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* 伪元素语法 */</span><br>selector:pseudo-element &#123; property: value; &#125;<br><br><span class="hljs-comment">/* CSS类也可以使用伪元素 */</span><br>selector<span class="hljs-selector-class">.class</span>:pseudo-element &#123; property: value; &#125;<br></code></pre></td></tr></table></figure><p>下面列举一些伪元素的使用：</p><ul><li><code>:first-line</code>：用于向文本的首行设置特殊样式；</li><li><code>:first-letter</code>：用于向文本的首字母设置特殊样式；</li><li><code>:before</code>：可以在元素的内容前插入新内容；</li><li><code>:after</code>：可以在元素的内容后插入新内容；</li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas文本</title>
    <link href="/2022/02/18/frontend/canvas/canvas-text/"/>
    <url>/2022/02/18/frontend/canvas/canvas-text/</url>
    
    <content type="html"><![CDATA[<h1 id="Canvas文本"><a href="#Canvas文本" class="headerlink" title="Canvas文本"></a>Canvas文本</h1><h2 id="文本API"><a href="#文本API" class="headerlink" title="文本API"></a>文本API</h2><p>使用Canvas显示字体分下面三步：</p><ul><li>使用<code>font</code>设置字体；</li><li>使用<code>fillStyle</code>设置字体颜色；</li><li>使用<code>fillText()</code>方法显示字体；</li></ul><p>默认情况下<code>font</code>属性可以不指定，如果不指定字体，则默认使用10px无衬字体；贴上一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>    canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br>    <br>    <span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <br>    context.<span class="hljs-property">font</span> = <span class="hljs-string">&quot;50px serif&quot;</span>;<br>    context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#00AAAA&quot;</span>;<br>    context.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;Canvas -- Draw on the web&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">300</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="文本渲染"><a href="#文本渲染" class="headerlink" title="文本渲染"></a>文本渲染</h2><p>和图形一样，文本也提供了<code>fillText()</code>和<code>strokeText()</code>两种方法。具体看例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>    canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br>    <br>    <span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <br>    context.<span class="hljs-title function_">beginPath</span>();<br>    context.<span class="hljs-property">font</span> = <span class="hljs-string">&quot;50px Verdana&quot;</span>;<br>    <span class="hljs-keyword">var</span> gradient = context.<span class="hljs-title function_">createLinearGradient</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">800</span>, <span class="hljs-number">0</span>);<br>    gradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-string">&quot;magenta&quot;</span>);<br>    gradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-string">&quot;0.5&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>);<br>    gradient.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-string">&quot;1.0&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>);<br>    <br>    context.<span class="hljs-property">fillStyle</span> = gradient;<br>    context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#00AAAA&quot;</span>;<br>    context.<span class="hljs-title function_">strokeText</span>(<span class="hljs-string">&quot;Text&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>);<br>    context.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;Text&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">100</span>);<br>    <br>    context.<span class="hljs-title function_">fillText</span>(<span class="hljs-string">&quot;Text&quot;</span>, <span class="hljs-number">50</span>, <span class="hljs-number">300</span>, <span class="hljs-number">200</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas非零环绕原则</title>
    <link href="/2022/02/18/frontend/canvas/canvas-around-principle/"/>
    <url>/2022/02/18/frontend/canvas/canvas-around-principle/</url>
    
    <content type="html"><![CDATA[<h1 id="非零环绕原则"><a href="#非零环绕原则" class="headerlink" title="非零环绕原则"></a>非零环绕原则</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>非零环绕原则描述了一种计算机该如何给封闭图形上色的规则，非常简单，我们只需要记住一个下面一条规则就行。</p><p>给封闭图形设置一个渲染方向（假如你的图形是一笔成画的），比如顺时针，那么与之相反的逆时针就是反方向。根据线条的方向来按照下列规则判断：</p><ul><li>从封闭图形画一条射线，如果与之相交的线条中正向和逆向不等（正多逆少或者逆多正少，只要不是0即可），那么就认为图形内部；</li><li>从封闭图形画一条射线，如果与之相交的线条中正向和逆向相等（例如圆环，一正一逆，正好抵消为0），那么就认为图形外部；</li></ul><p>这就是“非零环绕原则”。这样说还不直观，我们可以用一个例子来说明这个。</p><h2 id="圆环"><a href="#圆环" class="headerlink" title="圆环"></a>圆环</h2><p>接着之前的代码片段，我们来画一个圆环：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>  canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>  canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br>  <br>  <span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>  <br>  context.<span class="hljs-property">shadowColor</span> = <span class="hljs-string">&quot;#545454&quot;</span>;<br>  context.<span class="hljs-property">shadowOffsetX</span> = <span class="hljs-number">5</span>;<br>  context.<span class="hljs-property">shadowOffsetY</span> = <span class="hljs-number">5</span>;<br>  context.<span class="hljs-property">shadowBlur</span> = <span class="hljs-number">2</span>;<br>  <br>  context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">200</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// 顺时针画圆</span><br>  context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">230</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 逆时针画圆</span><br>  <br>  context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#00AAAA&quot;</span>;<br>  context.<span class="hljs-title function_">fill</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><p> 按照“非零环绕”原则，内部圆的方向是顺时针，外部圆的方向是逆时针，正好两个圆的中间部分才是需要填充的部分。这样就完成了一个圆环。是不是非常简单。</p><h2 id="镂空图形绘制"><a href="#镂空图形绘制" class="headerlink" title="镂空图形绘制"></a>镂空图形绘制</h2><p>我们再做一个复杂一些的图形，你可以将其拷贝到浏览器中看效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>  canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>  canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br>  <span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>  context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#FFF&quot;</span>;<br>  context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">800</span>,<span class="hljs-number">600</span>);<br><br>  context.<span class="hljs-title function_">beginPath</span>();<br>  context.<span class="hljs-title function_">rect</span>(<span class="hljs-number">200</span>,<span class="hljs-number">100</span>,<span class="hljs-number">400</span>,<span class="hljs-number">400</span>);<br>  <span class="hljs-title function_">drawPathRect</span>(context, <span class="hljs-number">250</span>, <span class="hljs-number">150</span>, <span class="hljs-number">300</span>, <span class="hljs-number">150</span>);<br>  <span class="hljs-title function_">drawPathTriangle</span>(context, <span class="hljs-number">345</span>, <span class="hljs-number">350</span>, <span class="hljs-number">420</span>, <span class="hljs-number">450</span>, <span class="hljs-number">270</span>, <span class="hljs-number">450</span>);<br>  context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">500</span>, <span class="hljs-number">400</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>, <span class="hljs-literal">true</span>);<br>  context.<span class="hljs-title function_">closePath</span>();<br><br>  context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#058&quot;</span>;<br>  context.<span class="hljs-property">shadowColor</span> = <span class="hljs-string">&quot;gray&quot;</span>;<br>  context.<span class="hljs-property">shadowOffsetX</span> = <span class="hljs-number">10</span>;<br>  context.<span class="hljs-property">shadowOffsetY</span> = <span class="hljs-number">10</span>;<br>  context.<span class="hljs-property">shadowBlur</span> = <span class="hljs-number">10</span>;<br>  context.<span class="hljs-title function_">fill</span>();<br><br>&#125;;<br><br><span class="hljs-comment">//逆时针绘制矩形</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawPathRect</span>(<span class="hljs-params">cxt, x, y, w, h</span>)&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 这里不能使用beginPath和closePath，</span><br><span class="hljs-comment">         * 不然就不属于子路径而是另一个全新的路径，</span><br><span class="hljs-comment">         * 无法使用非零环绕原则</span><br><span class="hljs-comment">         */</span><br>  cxt.<span class="hljs-title function_">moveTo</span>(x, y);<br>  cxt.<span class="hljs-title function_">lineTo</span>(x, y + h);<br>  cxt.<span class="hljs-title function_">lineTo</span>(x + w, y + h);<br>  cxt.<span class="hljs-title function_">lineTo</span>(x + w, y);<br>  cxt.<span class="hljs-title function_">lineTo</span>(x, y);<br><br>&#125;<br><br><span class="hljs-comment">//逆时针绘制三角形</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">drawPathTriangle</span>(<span class="hljs-params">cxt, x1, y1, x2, y2, x3, y3</span>)&#123;<br>  cxt.<span class="hljs-title function_">moveTo</span>(x1,y1);<br>  cxt.<span class="hljs-title function_">lineTo</span>(x3,y3);<br>  cxt.<span class="hljs-title function_">lineTo</span>(x2,y2);<br>  cxt.<span class="hljs-title function_">lineTo</span>(x1,y1);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>就这些</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas变换</title>
    <link href="/2022/02/18/frontend/canvas/canvas-tranverse/"/>
    <url>/2022/02/18/frontend/canvas/canvas-tranverse/</url>
    
    <content type="html"><![CDATA[<h1 id="Canvas变换"><a href="#Canvas变换" class="headerlink" title="Canvas变换"></a>Canvas变换</h1><h2 id="图形变换"><a href="#图形变换" class="headerlink" title="图形变换"></a>图形变换</h2><p>图形变换无外乎是利用数学方法调整所绘形状的物理属性，实质上是坐标变形。所有的变换都依赖于后台的数学矩阵运算，所以只需要使用即可，无需理会底层原理。</p><ul><li>平移变换：<code>translate(x, y)</code></li><li>旋转变换：<code>rotate(deg)</code></li><li>缩放变换：<code>scale(sx, sy)</code></li></ul><h2 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h2><p>顾名思义，就是一般的图形位移。例如我想把位于(100, 100)的矩形平移至(200, 200)点，那么只需要再绘制矩形之前加上<code>context.translate(100, 100)</code>即可，例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br><br><span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#00AAAA&quot;</span>;<br>context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br><br>context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;red&quot;</span>;<br>context.<span class="hljs-title function_">translate</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>如果想平移到(300, 300)的位置，需要重置参考坐标系的位置，也就是重置到原点，再进行平移，有两种方法：</p><ul><li>绘制下一次平移图形的时候，手动将坐标系换回原点：即：<code>translate(-x, -y)</code>；</li><li>平移前调用<code>context.save()</code>和<code>context.restore()</code>。</li></ul><p>实例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>    canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br>    <br>    <span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <br>    context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#00AAAA&quot;</span>;<br>    context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br>    <br>    context.<span class="hljs-title function_">save</span>();<br>    context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;red&quot;</span>;<br>    context.<span class="hljs-title function_">translate</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>    context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br>    context.<span class="hljs-title function_">restore</span>();<br>    <br>    context.<span class="hljs-title function_">save</span>();<br>    context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;green&quot;</span>;<br>    context.<span class="hljs-title function_">translate</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>    context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>, <span class="hljs-number">100</span>);<br>    context.<span class="hljs-title function_">restore</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="旋转变换"><a href="#旋转变换" class="headerlink" title="旋转变换"></a>旋转变换</h2><p><code>rotate(deg)</code>是指图形以坐标系原点为圆心进行顺时针旋转，因此在使用<code>rotate()</code>之前可以配合<code>translate()</code>来平移坐标系，确定旋转的圆心。</p><p>我们用一个例子来看看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 画布</span><br><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br><span class="hljs-comment">// 画笔</span><br><span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">12</span>; i++) &#123;<br>    context.<span class="hljs-title function_">save</span>();<br>    context.<span class="hljs-title function_">translate</span>(<span class="hljs-number">70</span> + i * <span class="hljs-number">50</span>, <span class="hljs-number">50</span> + i * <span class="hljs-number">40</span>);<br>    context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;#00AAAA&quot;</span>;<br>    context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br>    context.<span class="hljs-title function_">restore</span>();<br><br>    context.<span class="hljs-title function_">save</span>();<br>    context.<span class="hljs-title function_">translate</span>(<span class="hljs-number">70</span> + i * <span class="hljs-number">50</span>, <span class="hljs-number">50</span> + i * <span class="hljs-number">40</span>);<br>    context.<span class="hljs-title function_">rotate</span>(i * <span class="hljs-number">30</span> * <span class="hljs-variable constant_">PI</span> / <span class="hljs-number">180</span>); <span class="hljs-comment">// 这里是弧度，不是角度</span><br>    context.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&quot;red&quot;</span>;<br>    context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br>    context.<span class="hljs-title function_">restore</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="缩放变换"><a href="#缩放变换" class="headerlink" title="缩放变换"></a>缩放变换</h2><p>缩放变换最简单了，分别是在水平方向和垂直方向上对象的缩放倍数。但是缩放会导致坐标位置改变、线条加粗。所以在实际使用过程中能尽量不使用scale函数做缩放变换是最好的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 画布</span><br><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br><span class="hljs-comment">// 画笔</span><br><span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;red&quot;</span>;<br>context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>    context.<span class="hljs-title function_">save</span>();<br>    context.<span class="hljs-title function_">scale</span>(i, i);<br>    context.<span class="hljs-title function_">strokeRect</span>(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">150</span>, <span class="hljs-number">100</span>);<br>    context.<span class="hljs-title function_">restore</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="万能的transform函数"><a href="#万能的transform函数" class="headerlink" title="万能的transform函数"></a>万能的transform函数</h2><p>前面讲的三种变换函数，使用<code>transform()</code>函数就可以做到，</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas绘制图形</title>
    <link href="/2022/02/18/frontend/canvas/canvas-draw-shape/"/>
    <url>/2022/02/18/frontend/canvas/canvas-draw-shape/</url>
    
    <content type="html"><![CDATA[<h1 id="Canvas绘图"><a href="#Canvas绘图" class="headerlink" title="Canvas绘图"></a>Canvas绘图</h1><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>前一章讲了如何创建绘图的几个基本要素，它们分别是：</p><ul><li>画布</li><li>画笔</li><li>颜色</li><li>橡皮擦（这个现在还用不着）</li></ul><p>光有这些还不够，一幅画主要由线条，形状（圆形或者矩形），弧线组成，所以要学会用代码画图，那么得先知道如何在电脑上画出这些线条。我们直接拿之前的HTML 5页面来使用：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Canvas Tutorial<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas-wrap&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid #aaaaaa; display: block; margin: 50px auto;&quot;</span>&gt;</span><br>抱歉你的浏览器不支持Canvas!<br><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">// 创建画布</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);</span><br><span class="language-javascript">    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;</span><br><span class="language-javascript">    canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">// 创建画笔</span></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>好了，接下来，我们将开始学习如何画出线条、矩形、圆形和弧形；</p><h2 id="线条"><a href="#线条" class="headerlink" title="线条"></a>线条</h2><p>线条比较简单，中学的时候我们都知道，两点就能确定一条直线，所以在计算机中也是一样，只要我给定两个点的坐标，那么他们之间的轨迹就是一条直线。所以直线的绘制方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br><br><span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">500</span>, <span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><p>其中<code>moveTo(x, y)</code>代表了直线的绘制起点，<code>lineTo(x, y)</code>代表了直线的绘制终点；</p><p>由于canvas是基于状态绘制的，所以每绘制一个图形，都要以<code>context.beginPath()</code>起头，如果要上色，可以使用<code>context.strokeStyle = &lt;color&gt;</code>给线条上色。</p><p>这里的坐标用的同样是笛卡尔坐标系，但是跟我们中学课本上的不一样。在计算机中，屏幕的左上角是坐标顶点，横向是x正轴，纵向是y正轴；</p><h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h2><p>要绘制矩形，可以使用两种办法：</p><p>（1）使用之前的<code>moveTo</code>和<code>lineTo</code>方法，一次性绘制4条直线，那自然就围城了一个矩形；</p><p>（2）直接调用canvas封装的API：<code>rect(x, y, width, height)</code>来绘制矩形；</p><p>这两种方法都可以在页面上绘制出一个矩形，但是使用方法（1）的时候必须要在绘制结束后加上<code>context.closePath()</code>，否则图形看上去就会有缺口；</p><p>你可以把下面这两段直接拷贝到自己的代码中，就可以看到效果了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br><span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br><span class="hljs-comment">// 方法（1）绘制矩形</span><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">400</span>, <span class="hljs-number">100</span>);<br>context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>);<br>context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">400</span>);<br>context.<span class="hljs-title function_">closePath</span>(); <span class="hljs-comment">// 要想图形闭合，需要加上这句话</span><br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;blue&quot;</span>;<br>context.<span class="hljs-title function_">stroke</span>();<br><br><span class="hljs-comment">// 方法(2)绘制矩形</span><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">rect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>);<br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;red&quot;</span>;<br>context.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><p>最后，我们再说一下线条属性：</p><ul><li>lineCap：定义上下文中线的端点样式：可以是：butt、round和square；</li><li>lineJoin：定义两条线相交产生的拐角，可以称为连接，可以是：miter、bevel和round；</li><li>lindWidth：定义线条宽度，默认是1.0；</li><li>strokeStyle：定义线和形状边框的颜色样式；</li></ul><h2 id="弧线"><a href="#弧线" class="headerlink" title="弧线"></a>弧线</h2><p>熟悉PS的同学也会知道，绘制圆弧常用的工具有预设的圆弧工具和钢笔工具（贝塞尔曲线）；那么在canvas中也是一样的：</p><ul><li>标准圆弧：<code>arc()</code></li><li>复杂圆弧：<code>arcTo()</code></li><li>2阶贝塞尔曲线：<code>quadraticCurveTo()</code></li><li>3阶贝塞尔曲线：<code>bezierCurveTo()</code></li></ul><h3 id="context-arc-x-y-radius-startAngle-endAngle-antiClockWise"><a href="#context-arc-x-y-radius-startAngle-endAngle-antiClockWise" class="headerlink" title="context.arc(x, y, radius, startAngle, endAngle, antiClockWise)"></a><code>context.arc(x, y, radius, startAngle, endAngle, antiClockWise)</code></h3><p>参数代表的含义分别为：圆心坐标，圆心半径，起始弧度，结束弧度以及是否逆时针；</p><p>这里的弧度和中学课本里面讲的弧度是同一个概念，只不过坐标系的参考位置是不一样的；</p><h3 id="context-arcTo-x1-y1-x2-y2-radius"><a href="#context-arcTo-x1-y1-x2-y2-radius" class="headerlink" title="context.arcTo(x1, y1, x2, y2, radius)"></a><code>context.arcTo(x1, y1, x2, y2, radius)</code></h3><p>参数代表的含义分别为：两个切点的坐标和圆弧半径。这个方法是依据切线来画弧线，即两条切线就能确定一条弧线；例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br><br><span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>context.<span class="hljs-title function_">arcTo</span>(<span class="hljs-number">600</span>, <span class="hljs-number">200</span>, <span class="hljs-number">600</span>, <span class="hljs-number">400</span>, <span class="hljs-number">100</span>);<br><br>context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">6</span>;<br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;red&quot;</span>;<br>context.<span class="hljs-title function_">stroke</span>();<br><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>);<br>context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">600</span>, <span class="hljs-number">200</span>);<br>context.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">600</span>, <span class="hljs-number">400</span>);<br><br>context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">1</span>;<br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#0088AA&quot;</span>;<br>context.<span class="hljs-title function_">stroke</span>();<br></code></pre></td></tr></table></figure><h2 id="圆形"><a href="#圆形" class="headerlink" title="圆形"></a>圆形</h2><p>有了上面绘制圆弧的基础知识，我们就可以绘制圆形了，其实也非常简单。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br><span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br><br><span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>context.<span class="hljs-title function_">beginPath</span>();<br>context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-variable constant_">PI</span> * <span class="hljs-number">2</span>); <span class="hljs-comment">// 顺时针绘制</span><br>context.<span class="hljs-title function_">arc</span>(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-variable constant_">PI</span> * <span class="hljs-number">2</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 逆时针绘制</span><br></code></pre></td></tr></table></figure><p>记住计算机上圆形的弧度顺序：时钟3点对应的是0(PI <em> 2)，时钟6点对应的是PI / 2，时钟9点对应的是PI，时钟12点对应的是PI </em> 3 / 2；默认情况下绘图顺序是顺时针方向；</p><h2 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h2><p>如果你用过PS的钢笔工具，那么一定也画过曲线，钢笔工具画出来的曲线就叫做贝塞尔曲线，这是发过数学家贝塞尔于1962年发现，并以他的名字命名了这种曲线。</p><p>曲线由起始点、终止点和控制点组成，每条曲线都具备这三个点。控制点为曲线阶数 - 1，也就是说2阶贝塞尔曲线有2 - 1 = 1个控制点。</p><h3 id="2阶贝塞尔曲线"><a href="#2阶贝塞尔曲线" class="headerlink" title="2阶贝塞尔曲线"></a>2阶贝塞尔曲线</h3><p>canvas中，绘制二阶贝塞尔曲线的API如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">context.<span class="hljs-title function_">quadraticCurveTo</span>(cpx, cpy, x, y); <span class="hljs-comment">// 2阶</span><br></code></pre></td></tr></table></figure><p>一个控制点（cpx, cpy）和一个终止点（x, y）；</p><h3 id="3阶贝塞尔曲线"><a href="#3阶贝塞尔曲线" class="headerlink" title="3阶贝塞尔曲线"></a>3阶贝塞尔曲线</h3><p>绘制三阶贝塞尔曲线的API如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">context.<span class="hljs-title function_">bezierCurveTo</span>(cp1x, cp1y, cp2x, cp2y, x, y); <span class="hljs-comment">// 3阶</span><br></code></pre></td></tr></table></figure><p>两个控制点（cp1x, cp1y）和（cp2x, cp2y）和终止点（x, y）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas基础入门</title>
    <link href="/2022/02/18/frontend/canvas/canvas-getting-started/"/>
    <url>/2022/02/18/frontend/canvas/canvas-getting-started/</url>
    
    <content type="html"><![CDATA[<h1 id="Canvas快速上手"><a href="#Canvas快速上手" class="headerlink" title="Canvas快速上手"></a>Canvas快速上手</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>你只需要准备：</p><ul><li>Web Kit内核浏览器：Safari（Apple MacOS）、Google Chrome或者Mozilla Firefox；（由于Canvas的标准是Chrome和Mozilla联合制定的，所以推荐使用Chrome或者Firefox）</li><li>你最拿手的编辑器：Sublime Text、Atom或者是Visual Studio Code；（这里我选择了VS Code）</li></ul><p>准备好上面这些之后，在你的电脑文件系统中找一个位置，然后创建一个HTML 5的页面，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Canvas Tutorial<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>准备好页面以后，我们在<code>&lt;body&gt;&lt;/body&gt;</code>标签中写一点东西，来验证一下<code>&lt;canvas&gt;</code>的魅力，像下面这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Canvas Tutorial<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas-wrap&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid #aaaaaa; display: block; margin: 50px auto;&quot;</span>&gt;</span><br>抱歉你的浏览器不支持Canvas!<br><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以发现，当你打开浏览器以后，你的页面上什么都看不到，这恰恰说明你的浏览器是支持Canvas的！你可以找一个老古董浏览器（例如：Internet Explorer）来打开看看，它就会显示“<u>抱歉你的浏览器不支持Canvas！</u>”</p><h2 id="计算机绘图基础"><a href="#计算机绘图基础" class="headerlink" title="计算机绘图基础"></a>计算机绘图基础</h2><p>现实生活中，要想绘图，你需要准备下面这些东西：</p><ul><li>画布（当然不一定是真的布，纸张也算是画布的一种）</li><li>画笔（各种粗细不一，功能不同的笔）</li><li>颜料（12色、16色或者24色的颜料板）</li><li>橡皮、尺子以及其他辅助工具等等；</li></ul><p>那么将这些东西映射到计算机上呢？答案也是一样的，你同样需要准备上面的那几样东西，只不过我们把现实生活中的工具都转换成了JavaScript代码而已。</p><h3 id="画布"><a href="#画布" class="headerlink" title="画布"></a>画布</h3><p>我们再次看<code>&lt;canvas&gt;&lt;/canvas&gt;</code>标签，它有一个id属性，这个id所指向的DOM元素就是我们的画布了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border: 1px solid #aaaaaa; display: block; margin: 50px auto;&quot;</span>&gt;</span><br>抱歉你的浏览器不支持Canvas!<br><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以给画布添加一些CSS样式，这样在浏览器中你就能看到画布的位置了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#canvas</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#aaaaaa</span>;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">800</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">600</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>用JavaScript也可以设置画布的宽和高，像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>); <span class="hljs-comment">// 这样就可以取到画布对象了</span><br>    <span class="hljs-comment">// 设置画布的大小</span><br>    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>    canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>到此画布我们就创建好了，今后都会在画布上创建图形。</p><h3 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h3><p>有了画布，自然就少不了画笔了，一般在其他教程中都会叫做上下文环境，我觉得这个词过于抽象，还是用画笔比较容易理解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 画布</span><br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    canvas.<span class="hljs-property">width</span> = <span class="hljs-number">800</span>;<br>    canvas.<span class="hljs-property">height</span> = <span class="hljs-number">600</span>;<br>    <br>    <span class="hljs-comment">// 画笔</span><br>    <span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>那么既然是画笔，自然就可以设置它的粗细，颜色了对吧，说得对，确实是可以设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>context.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">5</span>; <span class="hljs-comment">//画笔的粗细</span><br>context.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&quot;#acef4d&quot;</span>; <span class="hljs-comment">// 画笔的颜色</span><br></code></pre></td></tr></table></figure><h3 id="颜料"><a href="#颜料" class="headerlink" title="颜料"></a>颜料</h3><p>说完画布和画笔，我们来说颜料；计算机中的颜色表示相信大家都知道了。你可以用<code>RGB</code>或者<code>HSLA</code>颜色表示法，也可以像学习CSS那样给图形上颜色；非常简单。</p><p>上色的方法也非常简单，只需要再创建画笔之后使用<code>context.fillStyle</code>就可以了。上色的方式支持下面这些：</p><ul><li>颜色字符串，例如：red，blue和purple；</li><li>使用十六进制字符串或者其简写形式填充：#FF0000或者#FF0;</li><li>使用<code>rgb()</code>方法设置颜色；R红色、G绿色、B蓝色；</li><li>使用<code>rgba()</code>方法设置颜色；A代表(Alpha)，代表透明度；（0 ~ 1）；</li><li>使用<code>hsl()</code>方法设置颜色；H色相、S饱和度、L明度；</li><li>使用<code>hsla()</code>方法设置颜色；A代表透明度(Alpha)；（0 ~ 1）；</li></ul><h3 id="渐变效果"><a href="#渐变效果" class="headerlink" title="渐变效果"></a>渐变效果</h3><p>渐变分为两种，熟悉PS的同学应该知道是什么；</p><ul><li>线性渐变：<code>context.createLinearGradient(xstart, ystart, xend, yend)</code></li><li>径向渐变：<code>context.createRadialGradient(x0, y0, r0, x1, y1, r1)</code></li></ul><p>添加渐变的步骤有下面3个：</p><p>（1）添加渐变线</p><p>（2）为渐变线添加关建色；</p><p>（3）应用渐变；</p><p>转换成代码就是下面这样子：（以线性渐变为例）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 添加渐变线</span><br><span class="hljs-keyword">let</span> grd = context.<span class="hljs-title function_">createLinearGradient</span>(xstart, ystart, xend, yend);<br><span class="hljs-keyword">let</span> grd2 = context.<span class="hljs-title function_">createRadialGradient</span>(x0, y0, r0, x1, y1, r1);<br><br><span class="hljs-comment">// 添加关建色</span><br><span class="hljs-comment">/* stop代表到(xstart, ystart)的距离占整个渐变色长度的比例，为0~1的浮点数 */</span><br>grd.<span class="hljs-title function_">addColorStop</span>(stop, color)<br><br><span class="hljs-comment">// 应用渐变</span><br>context.<span class="hljs-property">fillStyle</span> = grd; <span class="hljs-comment">// 填充渐变色</span><br>context.<span class="hljs-property">strokeStyle</span> = grd; <span class="hljs-comment">// 线框渐变色</span><br></code></pre></td></tr></table></figure><p>贴上一个例子方便理解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Code should wrap in HTML script tag</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    <span class="hljs-keyword">let</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br>    <br>    <span class="hljs-keyword">let</span> grd = context.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">200</span>);<br>    <br>    grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;olive&quot;</span>);<br>    grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.25</span>, <span class="hljs-string">&quot;maroon&quot;</span>);<br>    grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.5</span>, <span class="hljs-string">&quot;aqua&quot;</span>);<br>    grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.75</span>, <span class="hljs-string">&quot;fuchsia&quot;</span>);<br>    grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0.25</span>, <span class="hljs-string">&quot;teal&quot;</span>);<br>    <br>    context.<span class="hljs-property">fillStyle</span> = grd;<br>    <br>    context.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">600</span>, <span class="hljs-number">400</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="橡皮擦"><a href="#橡皮擦" class="headerlink" title="橡皮擦"></a>橡皮擦</h3><p>canvas提供了一个API叫做<code>context.clearRect(x, y, w, h)</code>，这个API就是用来清除画布中的像素的，也就是现实作画中的橡皮擦。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 异步操作</title>
    <link href="/2022/02/17/javascript/es6-async-operate/"/>
    <url>/2022/02/17/javascript/es6-async-operate/</url>
    
    <content type="html"><![CDATA[<h1 id="异步操作和Async函数"><a href="#异步操作和Async函数" class="headerlink" title="异步操作和Async函数"></a>异步操作和Async函数</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>前面提到，JavaScript本身是不支持异步编程的，但是不支持异步处理，那么处理速度会特别慢。因此引入异步编程的特性便迫在眉睫。</p><p>按照前面章节提到的，JS在异步编程中实现的方式有下面几个：</p><ul><li>回调函数</li><li>Promise</li><li>Generator函数 + 协程</li></ul><h2 id="Thunk函数"><a href="#Thunk函数" class="headerlink" title="Thunk函数"></a>Thunk函数</h2><p>简单来说：所谓的“船名调用”实现：就是将参数方法放到一个临时函数中，再将这个临时函数传入函数体，这个临时函数就称作“Thunk函数”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> thunk = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> x + <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> (<span class="hljs-params">thunk</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">thunk</span>() * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在JavaScript中函数替换的不是表达式，而是多参数函数，将其替换程单参数的版本。且只接受回调函数作为参数。因此，任何函数只要有回调函数，就可以写成Thunk函数的形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> thunk = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) &#123;<br>      <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, ...args, callback);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举一个具体的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">a, b</span>) &#123;<br>  <span class="hljs-title function_">cb</span>(a);<br>&#125;<br><span class="hljs-keyword">let</span> ft = <span class="hljs-title class_">Thunk</span>(f);<br><br><span class="hljs-keyword">let</span> log = <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">console</span>);<br><span class="hljs-title function_">ft</span>(<span class="hljs-number">1</span>)(log) <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h2 id="Thunkify模块"><a href="#Thunkify模块" class="headerlink" title="Thunkify模块"></a>Thunkify模块</h2><p>生产环境下转换器，可以使用Thunkify模块。使用<code>npm install thunkify</code>安装；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> thunkify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;thunkify&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">var</span> read = <span class="hljs-title function_">thunkify</span>(rs.<span class="hljs-property">readFile</span>);<br><span class="hljs-title function_">read</span>(<span class="hljs-string">&#x27;package.json&#x27;</span>)(<span class="hljs-keyword">function</span>(<span class="hljs-params">err, str</span>)&#123;<br>  <span class="hljs-comment">// concrete code</span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="看到这你可能会问，这有什么用？"><a href="#看到这你可能会问，这有什么用？" class="headerlink" title="看到这你可能会问，这有什么用？"></a>看到这你可能会问，这有什么用？</h2><p>因为ES6现在新增了Generator函数，因此结合Thunk以后可以很好地管理Generartor流程。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> thunkify = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;thunkify&#x27;</span>);<br><span class="hljs-keyword">var</span> readFile = <span class="hljs-title function_">thunkify</span>(fs.<span class="hljs-property">readFile</span>);<br><br><span class="hljs-keyword">var</span> gen = <span class="hljs-keyword">function</span>* () &#123;<br>  <span class="hljs-keyword">var</span> r1 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;/etc/fstab&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1.<span class="hljs-title function_">toString</span>());<br>  <span class="hljs-keyword">var</span> r2 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;/etc/shells&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r2.<span class="hljs-title function_">toString</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的代码：yield命令用于将程序的执行权移出Generator函数。Thunk函数正好可以完成这个需求。</p><h2 id="还没结束"><a href="#还没结束" class="headerlink" title="还没结束"></a>还没结束</h2><p>看完上面，你可能已经知道Thunk函数现在可以做到什么事情：没错，Thunk函数的真正威力是：可以自动执行Generator函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">var</span> gen = <span class="hljs-title function_">fn</span>();<br>  <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">err, data</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = gen.<span class="hljs-title function_">next</span>(data);<br>    <span class="hljs-keyword">if</span> (result.<span class="hljs-property">done</span>) <span class="hljs-keyword">return</span>;<br>    result.<span class="hljs-title function_">value</span>(next);<br>  &#125;<br>  <br>  <span class="hljs-title function_">next</span>();<br>&#125;<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">g</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-title function_">run</span>(g);<br></code></pre></td></tr></table></figure><p>有了上面的执行器，那么下面执行Generator函数就简单了很多。不关内部有多少个异步操作，直接把Generator函数传入run函数即可。前提是每一个异步操作都必须是Thunk函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> g = <span class="hljs-keyword">function</span>* () &#123;<br>  <span class="hljs-keyword">var</span> f1 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;fileA&#x27;</span>);<br>  <span class="hljs-keyword">var</span> f2 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;fileB&#x27;</span>);<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">var</span> fn = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;fileN&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">run</span>(g);<br></code></pre></td></tr></table></figure><h2 id="CO模块"><a href="#CO模块" class="headerlink" title="CO模块"></a>CO模块</h2><p>co模块是著名程序员TJ Holowaychuk发布一个小工具，用于Generator函数的自动执行。有了co模块，你可以不必自己编写Generator函数的执行器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> gen = <span class="hljs-keyword">function</span>* () &#123;<br>  <span class="hljs-keyword">var</span> f1 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;/etc/fstab&#x27;</span>);<br>  <span class="hljs-keyword">var</span> f2 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;/etc/shells&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f1.<span class="hljs-title function_">toString</span>());<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f2.<span class="hljs-title function_">toString</span>());<br>&#125;;<br><br><span class="hljs-keyword">var</span> co = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;co&#x27;</span>);<br><span class="hljs-title function_">co</span>(gen).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Generator execute success.&#x27;</span>)<br>&#125;);<br></code></pre></td></tr></table></figure><p>co支持并发的异步操作，即允许某些操作同时进行，等到它们全部完成，才进行下一步。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 数组写法</span><br><span class="hljs-title function_">co</span>(<span class="hljs-keyword">function</span>* ()&#123;<br>  <span class="hljs-keyword">var</span> res = <span class="hljs-keyword">yield</span> [<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)<br>  ];<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;).<span class="hljs-title function_">catch</span>(onerror);<br><br><span class="hljs-comment">// 对象写法</span><br><span class="hljs-title function_">co</span>(<span class="hljs-keyword">function</span>* ()&#123;<br>  <span class="hljs-keyword">var</span> res = <span class="hljs-keyword">yield</span> &#123;<br>    <span class="hljs-number">1</span>: <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">1</span>),<br>    <span class="hljs-number">2</span>: <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-number">2</span>)<br>  &#125;;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>&#125;).<span class="hljs-title function_">catch</span>(onerror);<br></code></pre></td></tr></table></figure><h2 id="async函数"><a href="#async函数" class="headerlink" title="async函数"></a>async函数</h2><p>ES7提供了async函数，使得异步操作变得更加方便。async函数是什么？一句话：async函数就是Generator函数的语法糖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> asyncReadFile = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> f1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;/etc/fstab&#x27;</span>);<br>  <span class="hljs-keyword">var</span> f2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;/etc/shells&#x27;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f1.<span class="hljs-title function_">toString</span>());<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(f2.<span class="hljs-title function_">toString</span>());<br>&#125;;<br></code></pre></td></tr></table></figure><p>语法上来看，跟Generator函数的使用基本类似，但是在其基础上还是有一点改进：</p><ul><li>（1）内置执行器：因此async函数执行和普通函数一样，只需要一行即可；</li><li>（2）更好的语义，这个一目了然；</li><li>（3）更广的适用性：即可支持Promise，也可以支持普通对象；</li><li>（4）返回值是Promise，因此可以使用then指定下一步操作；</li></ul><p>如果async函数内部抛出错误，会导致返回的Promise对象变为reject状态。抛出的对象会被catch方法回调接收到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Wrong&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">f</span>().<span class="hljs-title function_">then</span>(<br><span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v),<br>  <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>)<br></code></pre></td></tr></table></figure><p>其次：async函数返回的Promise对象，必须等到所有的await命令的Promise对象执行完，才发发生改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getTitle</span>(<span class="hljs-params">url</span>) &#123;<br><span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(url);<br>  <span class="hljs-keyword">let</span> html = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">text</span>();<br>  <span class="hljs-keyword">return</span> html.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/&lt;title&gt;([\s\S]+)&lt;\/title&gt;/i</span>)[<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-title function_">getTitle</span>(<span class="hljs-string">&#x27;https://github.com/Humphrey75432&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>);<br></code></pre></td></tr></table></figure><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>（1）<code>await</code>命令后面的<code>Promise</code>对象，运行结果可能是<code>reject</code>，所以最好把<code>await</code>命令放入<code>try...catch</code>块中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">await</span> <span class="hljs-title function_">somethingThatReturnsAPromise</span>();<br>    &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// Another grammar</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">myFunction</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">somethingThatReturnsAPromise</span>()<br>    .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err);<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。这样会提升执行效率</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [foo, bar] = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<span class="hljs-title function_">getFoo</span>(), <span class="hljs-title function_">getBar</span>()]);<br><br><span class="hljs-comment">// second grammar</span><br><span class="hljs-keyword">let</span> fooPromise = <span class="hljs-title function_">getFoo</span>();<br><span class="hljs-keyword">let</span> barPromise = <span class="hljs-title function_">getBar</span>();<br><span class="hljs-keyword">let</span> foo = <span class="hljs-keyword">await</span> fooPromise;<br><span class="hljs-keyword">let</span> bar = <span class="hljs-keyword">await</span> barPromise;<br></code></pre></td></tr></table></figure><p>（3）如果确实希望多个请求并发执行，可以使用<code>Promise.all</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">dbFuc</span>(<span class="hljs-params">db</span>) &#123;<br>  <span class="hljs-keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];<br>  <span class="hljs-keyword">let</span> promises = docs.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">doc</span>) =&gt;</span> db.<span class="hljs-title function_">post</span>(doc));<br><br>  <span class="hljs-keyword">let</span> results = <span class="hljs-keyword">await</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(promises);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>&#125;<br><br><span class="hljs-comment">// 或者使用下面的写法</span><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">dbFuc</span>(<span class="hljs-params">db</span>) &#123;<br>  <span class="hljs-keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];<br>  <span class="hljs-keyword">let</span> promises = docs.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">doc</span>) =&gt;</span> db.<span class="hljs-title function_">post</span>(doc));<br><br>  <span class="hljs-keyword">let</span> results = [];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> promise <span class="hljs-keyword">of</span> promises) &#123;<br>    results.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">await</span> promise);<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 编码风格</title>
    <link href="/2022/02/17/javascript/es6-program-style/"/>
    <url>/2022/02/17/javascript/es6-program-style/</url>
    
    <content type="html"><![CDATA[<h1 id="编程风格"><a href="#编程风格" class="headerlink" title="编程风格"></a>编程风格</h1><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><h3 id="（1）使用let来替代var"><a href="#（1）使用let来替代var" class="headerlink" title="（1）使用let来替代var"></a>（1）使用<code>let</code>来替代<code>var</code></h3><p>原因之前讲过，<code>let</code>是ES6新增的关键字，和<code>var</code>一样可以用来声明变量，主要推荐用<code>let</code>的原因是：</p><ul><li><code>let</code>和<code>var</code>完全等价，主要是<code>let</code>必须先声明再使用；</li><li><code>let</code>不存在变量提升；因此不会给程序带来副作用；</li></ul><h3 id="（2）全局常量和线程安全"><a href="#（2）全局常量和线程安全" class="headerlink" title="（2）全局常量和线程安全"></a>（2）全局常量和线程安全</h3><p><code>let</code>和<code>const</code>主要先使用<code>const</code>，理由如下：</p><ul><li><code>const</code>可以提醒阅读代码的人，这个变量不应该被改变；</li><li><code>const</code>符合函数式编程思想，运算不改变值，只是新建值；</li><li>JavaScript编译器会对<code>const</code>进行优化，这样有利于提供程序的运行效率；</li></ul><h3 id="（3）字符串"><a href="#（3）字符串" class="headerlink" title="（3）字符串"></a>（3）字符串</h3><p>静态字符串一律使用单引号或引号，不使用双引号。动态字符串使用反引号；</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-string">&quot;foobar&quot;</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-string">&#x27;foo&#x27;</span> + a + <span class="hljs-string">&#x27;bar&#x27;</span>;<br><br><span class="hljs-comment">// acceptable</span><br><span class="hljs-keyword">const</span> c = <span class="hljs-string">`foobar`</span>;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> a = <span class="hljs-string">&#x27;foobar&#x27;</span>;<br><span class="hljs-keyword">const</span> b = <span class="hljs-string">`foo<span class="hljs-subst">$&#123;a&#125;</span>bar`</span>;<br></code></pre></td></tr></table></figure><h3 id="（4）解构赋值"><a href="#（4）解构赋值" class="headerlink" title="（4）解构赋值"></a>（4）解构赋值</h3><p>遵循下列几个原则：</p><ul><li>使用数组成员对变量赋值时，优先使用解构赋值；</li><li>函数的参数如果是对象成员，优先使用解构赋值；</li><li>函数返回多个值，优先使用对象的结构赋值，而不是数组的解构赋值；这样便于以后添加返回值，以及更改返回值的顺序；</li></ul><p>例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> first = arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">const</span> second = arr[<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> [first, second] = arr; <span class="hljs-comment">// 这样它会拿出arr的第一个和第二个值</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFullName</span>(<span class="hljs-params">user</span>) &#123;<br>    <span class="hljs-keyword">const</span> firstName = user.<span class="hljs-property">firstName</span>;<br>    <span class="hljs-keyword">const</span> secondName = user.<span class="hljs-property">secondName</span>;<br>&#125;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFullName</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123;firstName, lastName&#125; = obj;<br>&#125;<br><br><span class="hljs-comment">// best</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getFullName</span>(<span class="hljs-params">&#123;firstName, lastName&#125;</span>) &#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">processInput</span>(<span class="hljs-params">input</span>) &#123;<br>    <span class="hljs-keyword">return</span> [left, right, top, buttom];<br>&#125;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">processInput</span>(<span class="hljs-params">input</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;left, right, top, buttom&#125;;<br>&#125;<br><span class="hljs-keyword">const</span> &#123;left, right&#125; = <span class="hljs-title function_">processInput</span>(input);<br></code></pre></td></tr></table></figure><h3 id="（5）对象"><a href="#（5）对象" class="headerlink" title="（5）对象"></a>（5）对象</h3><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象；最后一个成员以逗号结尾；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> a = &#123; <span class="hljs-attr">k1</span>: v1, <span class="hljs-attr">k2</span>: v2, &#125;;<br><span class="hljs-keyword">const</span> b = &#123;<br>    <span class="hljs-attr">k1</span>: v1,<br>    <span class="hljs-attr">k2</span>: v2<br>&#125;;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> a = &#123; <span class="hljs-attr">k1</span>: v1, <span class="hljs-attr">k2</span>: v2 &#125;;<br><span class="hljs-keyword">const</span> b = &#123;<br>    <span class="hljs-attr">k1</span>: v1,<br>    <span class="hljs-attr">k2</span>: v2,<br>&#125;;<br></code></pre></td></tr></table></figure><p>对象尽量静态化，一旦定义就不得随意添加新的属性。如果添加属性不可避免，要使用<code>Object.assign()</code>方法；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> a = &#123;&#125;;<br>a.<span class="hljs-property">x</span> = <span class="hljs-number">3</span>;<br><br><span class="hljs-comment">// if reshape unavoidable</span><br><span class="hljs-keyword">const</span> a = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(a, &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>&#125;);<br><br><span class="hljs-comment">// good</span><br>cont a = &#123; <span class="hljs-attr">x</span>: <span class="hljs-literal">null</span> &#125;;<br>a.<span class="hljs-property">x</span> = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义；</p><p>PS: [需要计算的内容]：这个语法就叫做计算属性，方括号中的内容需要通过动态计算得到；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;San Francisco&#x27;</span><br>&#125;;<br>obj[<span class="hljs-title function_">getKey</span>(<span class="hljs-string">&#x27;enabled&#x27;</span>)] = <span class="hljs-literal">true</span>;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;San Francisco&#x27;</span>,<br>    [<span class="hljs-title function_">getKey</span>(<span class="hljs-string">&#x27;enabled&#x27;</span>)]: <span class="hljs-literal">true</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="（6）数组"><a href="#（6）数组" class="headerlink" title="（6）数组"></a>（6）数组</h3><p>使用扩展运算符(…)拷贝数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> len = items.<span class="hljs-property">length</span>;<br><span class="hljs-keyword">const</span> itemsCopy = [];<br><span class="hljs-keyword">let</span> i;<br><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    itemsCopy[i] = items[i];<br>&#125;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">const</span> itemsCopy = [...items];<br></code></pre></td></tr></table></figure><p>使用<code>Array.from</code>方法将类似数组的对象转换为数组；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> foo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.foo&#x27;</span>);<br><span class="hljs-keyword">const</span> nodes = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(foo);<br></code></pre></td></tr></table></figure><h3 id="（7）函数"><a href="#（7）函数" class="headerlink" title="（7）函数"></a>（7）函数</h3><p>立即执行函数可以写成箭头函数的形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Welcome to the Internet.&#x27;</span>)<br>&#125;)();<br></code></pre></td></tr></table></figure><p>需要使用函数表达式的场合，尽量用箭头函数代替，因为这样更简洁，而且绑定了this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)&#123;<br>    <span class="hljs-keyword">return</span> x * x;<br>&#125;);<br><br><span class="hljs-comment">// good</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">x</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> x * x;<br>&#125;);<br><br><span class="hljs-comment">// best</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * x);<br></code></pre></td></tr></table></figure><p>箭头函数取代<code>Function.prototype.bind</code>，不再用self/_this/that绑定this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> self = <span class="hljs-variable language_">this</span>;<br><span class="hljs-keyword">const</span> boundMethod = <span class="hljs-keyword">function</span>(<span class="hljs-params">...params</span>) &#123;<br>    <span class="hljs-keyword">return</span> method.<span class="hljs-title function_">apply</span>(self, params);<br>&#125;<br><br><span class="hljs-comment">// acceptable</span><br><span class="hljs-keyword">const</span> boundMethod = method.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br><br><span class="hljs-comment">// best</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">boundMethod</span> = (<span class="hljs-params">...params</span>) =&gt; method.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, params);<br></code></pre></td></tr></table></figure><p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体比较复杂，行数较多，还是应该采用传统的函数写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 用rest运算符代替arguments */</span><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">concatenateAll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-keyword">return</span> args.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">concatenateAll</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">return</span> args.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">/* 使用默认值语法设置函数参数的默认值 */</span><br><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleThings</span>(<span class="hljs-params">opts</span>) &#123;<br>    opts = opts || &#123;&#125;;<br>&#125;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleThingd</span>(<span class="hljs-params">opts = &#123;&#125;</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（8）Map结构"><a href="#（8）Map结构" class="headerlink" title="（8）Map结构"></a>（8）Map结构</h3><p>只有模拟现实世界的实体对象，才使用Object。如果只是想要<code>key: value</code>的数据结构，使用Map结构。因为Map有内建的遍历机制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(arr);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">keys</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">values</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">entries</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（9）Class"><a href="#（9）Class" class="headerlink" title="（9）Class"></a>（9）Class</h3><p>总是使用Class来替代<code>prototype</code>的操作，因为Class写法更简洁，更易于理解；这个就不需要过多解释了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">contents = []</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_queue</span> = [...contents];<br>    &#125;<br>    pop () &#123;<br>        <span class="hljs-keyword">const</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_queue</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_queue</span>.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>extends</code>实现继承，因为这样更简单，不会破坏<code>instanceof</code>运算的危险，而且如果你是后端程序员，会更加理解这段逻辑想要表达的实际含义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PeekableQueue</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Queue</span> &#123;<br>    <span class="hljs-title function_">peek</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_queue</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（10）模块"><a href="#（10）模块" class="headerlink" title="（10）模块"></a>（10）模块</h3><p>首先，Module语法是JavaScript模块的标准写法。坚持使用这种写法。使用<code>import</code>取代<code>require</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// bad</span><br><span class="hljs-keyword">const</span> moduleA = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;moduleA&#x27;</span>);<br><span class="hljs-keyword">const</span> func1 = moduleA.<span class="hljs-property">func1</span>;<br><span class="hljs-keyword">const</span> func2 = moduleA.<span class="hljs-property">func2</span>;<br><br><span class="hljs-comment">// good</span><br><span class="hljs-keyword">import</span> &#123; func1, func2 &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;moduleA&#x27;</span>;<br></code></pre></td></tr></table></figure><p>使用<code>export</code>取代<code>module.exports</code>；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES6 Style</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Breadcrumbs</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createClass</span>(&#123;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">nav</span> /&gt;</span></span>;<br>    &#125;<br>&#125;);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Breadcrumbs</span>;<br></code></pre></td></tr></table></figure><h3 id="（11）ESLint使用"><a href="#（11）ESLint使用" class="headerlink" title="（11）ESLint使用"></a>（11）ESLint使用</h3><p>ESLint是一个语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。所有配置项都写在<code>.eslintrc</code>文件中，因此要启用eslint只需要在配置文件中开启相应的规则就可以。如果你是用脚手架工具新建的项目，一般都会集成eslint。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 类</title>
    <link href="/2022/02/17/javascript/es6-class/"/>
    <url>/2022/02/17/javascript/es6-class/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6-Class"><a href="#ES6-Class" class="headerlink" title="ES6 Class"></a>ES6 Class</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>ES6为了使JavaScript更接近C++、Java等面向对象的高级语言，引入了Class的概念。语法角度来说Class仅仅是一个语法糖，其绝大部分功能都是ES5的实现。所以是对编程人员友好而设计的。有个例子能充分说明这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// ES5</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Point</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>&#125;<br><br><span class="hljs-title class_">Point</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> + <span class="hljs-string">&#x27;)&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br><span class="hljs-comment">// ES6 更加符合面向对象语言的习惯</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>    &#125;<br>    <br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> + <span class="hljs-string">&#x27;)&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>可以看出，调用类的实例方法，实际上就是调用对象的原型方法。那么对Object的操作对于Class完全适用。例如我可以使用Object.assign方法给类新增很多方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Point</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>    <span class="hljs-title function_">toValue</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a>constructor方法</h2><p>对象的构造函数，会在对象创建的时候调用，可以用来初始化对象的属性。除此之外，和C++/Java等语言不同的是，constructor中完全可以指定返回另外一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>() <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Foo</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="类的实例对象"><a href="#类的实例对象" class="headerlink" title="类的实例对象"></a>类的实例对象</h2><p>需要使用<code>new</code>关键字来生成。如果忘记使用new关键字而是直接像使用函数那样使用Class会报错。和ES5一样，除非属性显示定义在其本身，否则都是定义在原型上的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//定义类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>  &#125;<br><br>  <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> + <span class="hljs-string">&#x27;)&#x27;</span>;<br>  &#125;<br><br>&#125;<br><br><span class="hljs-keyword">var</span> point = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br>point.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// (2, 3)</span><br><br>point.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;x&#x27;</span>) <span class="hljs-comment">// true</span><br>point.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;y&#x27;</span>) <span class="hljs-comment">// true</span><br>point.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;toString&#x27;</span>) <span class="hljs-comment">// false</span><br>point.<span class="hljs-property">__proto__</span>.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;toString&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h2><p>Class不存在变量提升，这一点和ES5完全不同：由于ES6不会把类的声明提升到代码头部。必须保证子类在父类之后定义。</p><h2 id="Class表达式"><a href="#Class表达式" class="headerlink" title="Class表达式"></a>Class表达式</h2><p>与函数一样，类也可以使用表达式的形式定义。需要注明的是<code>const</code>关键字后面的才是真正的类名，而<code>class</code>后面的仅仅是内部类名，可以使用<code>this</code>关键字指代。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">class</span> <span class="hljs-title class_">Me</span> &#123;<br>    <span class="hljs-title function_">getClassName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Me</span>.<span class="hljs-property">name</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用Class表达式，可以立即写出执行的Class</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-keyword">class</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br>    <br>    <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;(<span class="hljs-string">&#x27;ZhangSan&#x27;</span>);<br><br>person.<span class="hljs-title function_">sayName</span>(); <span class="hljs-comment">// &#x27;ZhangSan&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="私有方法"><a href="#私有方法" class="headerlink" title="私有方法"></a>私有方法</h2><p>利用Symbol值的唯一性，将私有方法的名字命名为一个Symbol值，从而达到私有方法和私有属性的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> bar = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);<br><span class="hljs-keyword">const</span> snaf = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;snaf&#x27;</span>);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">myClass</span> &#123;<br>    <span class="hljs-title function_">foo</span>(<span class="hljs-params">baz</span>) &#123;<br>        <span class="hljs-variable language_">this</span>[bar](baz);<br>    &#125;<br>    <br>    [bar](baz) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>[snaf] = baz;<br>    &#125;<br>    <br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h2><p>类的方法内部如果含有this，默认指向类的实例。但是必须非常小心，一旦单独使用该方法，很可能报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-title function_">printName</span>(<span class="hljs-params">name = <span class="hljs-string">&#x27;there&#x27;</span></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>);<br>    &#125;<br>    <br>    <span class="hljs-title function_">print</span>(<span class="hljs-params">text</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(text);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Logger</span>();<br><span class="hljs-keyword">const</span> &#123; printName &#125; = logger;<br><span class="hljs-title function_">printName</span>(); <span class="hljs-comment">// TypeError: Cannot read property &#x27;print&#x27; of undefined</span><br></code></pre></td></tr></table></figure><p>将printName提取出来使用会报错，因为默认情况下this是指向Logger类的实例。但是一旦将该方法提起出来单独使用，this就会指向该方法运行时所在的环境。为了解决这个问题可以使用下面两种方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在构造函数中重新自动this关键字的指向</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">printName</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">printName</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用箭头函数来改变this关键字的指向</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Logger</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">printName</span> = <span class="hljs-function">(<span class="hljs-params">name = <span class="hljs-string">&#x27;there&#x27;</span></span>) =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">print</span>(<span class="hljs-string">`Hello <span class="hljs-subst">$&#123;name&#125;</span>`</span>);<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>还有一种方法是使用Proxy，获取方法的时候自动绑定this.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">selfish</span>(<span class="hljs-params">target</span>) &#123;<br>    <span class="hljs-keyword">const</span> cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br>    <span class="hljs-keyword">const</span> handler = &#123;<br>        <span class="hljs-title function_">get</span>(<span class="hljs-params">target, key</span>)&#123;<br>            <span class="hljs-keyword">const</span> value = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> value !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> value;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!cache.<span class="hljs-title function_">has</span>(value)) &#123;<br>                cache.<span class="hljs-title function_">set</span>(value, value.<span class="hljs-title function_">bind</span>(target));<br>            &#125;<br>            <span class="hljs-keyword">return</span> cache.<span class="hljs-title function_">get</span>(value);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br>    <span class="hljs-keyword">return</span> proxy;<br>&#125;<br><br><span class="hljs-keyword">const</span> logger = <span class="hljs-title function_">selfish</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Logger</span>());<br></code></pre></td></tr></table></figure><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>类和模块的内部默认使用的就是严格模式，所以不需要显式指定。</p><h2 id="Class继承"><a href="#Class继承" class="headerlink" title="Class继承"></a>Class继承</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>和其他高级编程语言（C++，Java）一样，ES6也提供了类似<code>extends</code>关键字来实现继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorPoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Point</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是：在子类的构造函数中，只有调用<code>super</code>关键字以后才可以使用<code>this</code>关键字，否则会报错。这是因为子类实例的构建是基于对父类的加工，因此只有super方法才能但会父类实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">x</span> = x;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> = y;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ColorPoint</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y, color</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(x, y);<br>        ths.<span class="hljs-property">color</span> = color;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="类的prototype属性和-proto-属性"><a href="#类的prototype属性和-proto-属性" class="headerlink" title="类的prototype属性和__proto__属性"></a>类的prototype属性和__proto__属性</h2><p>Class作为构造函数的语法糖，同时有prototype属性和<code>__proto__</code>属性，因此同时存在两条继承链。</p><p>（1）子类的<code>__proto__</code>属性，表示构造函数的继承，总是指向父类；</p><p>（2）子类的prototype属性和<code>__proto__</code>属性，表示方法的继承，总是指向父类的<code>prototype</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>    <br>&#125;<br><br>B.<span class="hljs-property">__proto__</span> === A <span class="hljs-comment">// true</span><br>B.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">__proto__</span> === A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>因此可以这样理解：作为一个对象，子类B的原型(__proto__)是父类A；作为一个构造函数，子类B的原型(prototype.__proto__)是父类A的实例；</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p><code>super</code>既可以当函数使用，也可以当对象使用，两种情况下的使用方法完全不同；</p><h3 id="当函数使用"><a href="#当函数使用" class="headerlink" title="当函数使用"></a>当函数使用</h3><p>这个很简单：作为函数调用时，代表的是父类的构造函数，ES6要求，子类的构造函数必须执行一次super函数。</p><h3 id="当对象使用"><a href="#当对象使用" class="headerlink" title="当对象使用"></a>当对象使用</h3><p>super作为对象时，指向的是父类的原型对象。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-title function_">p</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">super</span>.<span class="hljs-title function_">p</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>();<br></code></pre></td></tr></table></figure><p>这个时候子类B当中的<code>super.p()</code>就是将super当做一个对象使用。所以<code>super</code>指向的是<code>A.prototype</code>，所以<code>super.p()</code>就相当于<code>A.prototype.p()</code>。需要注意的是：由于<code>super</code>指向的是父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过<code>super</code>调用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">p</span> = <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">m</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">super</span>.<span class="hljs-property">p</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>();<br>b.<span class="hljs-property">m</span> <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>如果是定义在父类原型上，<code>super</code>就可以取到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;&#125;<br>A.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">x</span> = <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">A</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">super</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">super</span>.<span class="hljs-property">x</span>) <span class="hljs-comment">// 2</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>();<br></code></pre></td></tr></table></figure><p>上面代码中，由于属性x是定义在A.prototype上面的，因此super.x就可以取到它的值。</p><h2 id="Class的取值函数（getter）和存值函数（setter）"><a href="#Class的取值函数（getter）和存值函数（setter）" class="headerlink" title="Class的取值函数（getter）和存值函数（setter）"></a>Class的取值函数（getter）和存值函数（setter）</h2><p>和其他高级语言一样，可以使用get、set关键字，对某个属性设置存值和取值函数，拦截该属性的存取行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">prop</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;getter&#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">prop</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;setter: &#x27;</span> + value);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> inst = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br><br>inst.<span class="hljs-property">prop</span> = <span class="hljs-number">123</span>;<br><br>inst.<span class="hljs-property">prop</span> <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure><h2 id="Class的Generator方法"><a href="#Class的Generator方法" class="headerlink" title="Class的Generator方法"></a>Class的Generator方法</h2><p>如果某个方法之前加上星号，就表示该方法是一个Generator函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">args</span> = args;<br>    &#125;<br>    <br>    * [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> arg <span class="hljs-keyword">of</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">arg</span>) &#123;<br>            <span class="hljs-keyword">yield</span> arg;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>&#125;<br><span class="hljs-comment">// hello</span><br><span class="hljs-comment">// world</span><br></code></pre></td></tr></table></figure><h2 id="Class的静态方法"><a href="#Class的静态方法" class="headerlink" title="Class的静态方法"></a>Class的静态方法</h2><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上<code>static</code>关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称之为静态方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">classMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-title class_">Foo</span>.<span class="hljs-title function_">classMethod</span>() <span class="hljs-comment">// &#x27;hello&#x27;</span><br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>();<br>foo.<span class="hljs-title function_">classMethod</span>()<br><span class="hljs-comment">// TypeError: foo.classMethod is not a function</span><br></code></pre></td></tr></table></figure><p>父类的静态方法可以被子类继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-title function_">classMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Bar</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Foo</span> &#123;<br>&#125;<br><br><span class="hljs-title class_">Bar</span>.<span class="hljs-title function_">classMethod</span>(); <span class="hljs-comment">// &#x27;hello&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Class的静态属性和实例属性"><a href="#Class的静态属性和实例属性" class="headerlink" title="Class的静态属性和实例属性"></a>Class的静态属性和实例属性</h2><p>静态属性指的是Class本身的属性，即<code>Class.propname</code>，而不是定义在实例对象（<code>this</code>)上的属性。目前Babel转码器提供了这两种写法的支持。</p><ul><li><p>类的实例属性</p><p>类的实例属性可以用等式，写入类的定义之中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReactCounter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">React.Component</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-variable language_">super</span>(props);<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>    &#125;;<br>  &#125;<br>  state;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类的静态属性</p></li></ul><p>类的静态属性只要在上面的实例属性写法前面，加上static关键字就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-keyword">static</span> myStaticProp = <span class="hljs-number">42</span>;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">MyClass</span>.<span class="hljs-property">myProp</span>); <span class="hljs-comment">// 42</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="new-target属性"><a href="#new-target属性" class="headerlink" title="new.target属性"></a>new.target属性</h2><p><code>new</code>是从构造函数生成实例的命令，ES6为了<code>new</code>命令引入了一个<code>new.target</code>属性，返回<code>new</code>命令作用于那个构造函数。如果构造函数不是通过<code>new</code>命令调用的，<code>new.target</code>会返回<code>undefined</code>，因此这个属性可以用来确定构造函数是如何调用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span> !== <span class="hljs-literal">undefined</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须使用new生成实例&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 另一种写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span>.<span class="hljs-property">target</span> === <span class="hljs-title class_">Person</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须使用new生成实例&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;张三&#x27;</span>); <span class="hljs-comment">// 正确</span><br><span class="hljs-keyword">var</span> notAPerson = <span class="hljs-title class_">Person</span>.<span class="hljs-title function_">call</span>(person, <span class="hljs-string">&#x27;张三&#x27;</span>);  <span class="hljs-comment">// 报错</span><br></code></pre></td></tr></table></figure><h2 id="Mixin模式的实现"><a href="#Mixin模式的实现" class="headerlink" title="Mixin模式的实现"></a>Mixin模式的实现</h2><p>Mixin模式指的是，将多个类的接口“混入”另一个类，在ES6的实现如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">mix</span>(<span class="hljs-params">...mixins</span>) &#123;<br>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mix</span> &#123;&#125;<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> mixin <span class="hljs-keyword">of</span> mixins) &#123;<br>    <span class="hljs-title function_">copyProperties</span>(<span class="hljs-title class_">Mix</span>, mixin);<br>    <span class="hljs-title function_">copyProperties</span>(<span class="hljs-title class_">Mix</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, mixin.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Mix</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copyProperties</span>(<span class="hljs-params">target, source</span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(source)) &#123;<br>    <span class="hljs-keyword">if</span> ( key !== <span class="hljs-string">&quot;constructor&quot;</span><br>      &amp;&amp; key !== <span class="hljs-string">&quot;prototype&quot;</span><br>      &amp;&amp; key !== <span class="hljs-string">&quot;name&quot;</span><br>    ) &#123;<br>      <span class="hljs-keyword">let</span> desc = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(source, key);<br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(target, key, desc);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Promise对象</title>
    <link href="/2022/02/17/javascript/es6-promise/"/>
    <url>/2022/02/17/javascript/es6-promise/</url>
    
    <content type="html"><![CDATA[<h1 id="Promise对象"><a href="#Promise对象" class="headerlink" title="Promise对象"></a>Promise对象</h1><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>Promise是异步编程的一种解决方案，最早由社区提出和实现，ES6在次基础上统一了用法并且提供了Promise对象。</p><p>所谓的Promise简单来说就是一个容器：里面保存着某个未来才会结束的事件的结果。从语法上说：Promise是一个对象，从它可以获取异步操作的消息。</p><p>Promise对象由两个特点：</p><ul><li>对象的状态不受外界影响，只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这种状态；</li><li>一旦状态发生了改变，就不会再变，任何时候都可以得到这个结果。</li></ul><p>因此：有了Promise，就可以将异步操作以同步的流程表达出来，避免了蹭蹭嵌套的回调函数。此外，Promise还提供了统一的接口，使得控制异步操作更加容易。</p><p>但是Promise也存在缺点：例如一旦创建就会立即执行，无法中途取消，其次，如果不设置回调函数，Promise内部会抛出异常，不会反应到外部。最后，当处于Pending状态的时候，无法得知目前进展到哪一个阶段。</p><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>    <span class="hljs-keyword">if</span> (a) &#123;<br>        <span class="hljs-title function_">resolve</span>(value); <span class="hljs-comment">// Pending -&gt; Resolved</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_">reject</span>(error); <span class="hljs-comment">// Pending -&gt; Rejected</span><br>    &#125;<br>&#125;);<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>)&#123;<br>    <span class="hljs-comment">// success</span><br>&#125;, <span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>   <span class="hljs-comment">// failure </span><br>&#125;);<br></code></pre></td></tr></table></figure><p>Promise新建后会立即执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Promise&#x27;</span>);<br>    <span class="hljs-title function_">resolve</span>();<br>&#125;);<br><br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Resolved.&#x27;</span>)<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hi!&#x27;</span>);<br><br><span class="hljs-comment">// Promise</span><br><span class="hljs-comment">// Hi!</span><br><span class="hljs-comment">// Resolved</span><br></code></pre></td></tr></table></figure><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p><code>then</code>方法是定义在原型对象Promise.prototype上的。它的作用是为Promise实例添加状态改变时的回调函数。该方法返回的是一个新的Promise实例。因此可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法。</p><p>采用链式的<code>then</code>，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;/posts.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>)&#123;<br>    <span class="hljs-keyword">return</span> json.<span class="hljs-property">post</span>;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">post</span>)&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>如果使用箭头函数，可以将上面代码进一步简化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;/post/1.json&quot;</span>).<span class="hljs-title function_">then</span>(<br><span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> <span class="hljs-title function_">getJSON</span>(post.<span class="hljs-property">commentURL</span>)<br>).<span class="hljs-title function_">then</span>(<br><span class="hljs-function"><span class="hljs-params">comments</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Resolved: &quot;</span> + comments),<br>    <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Rejected: &quot;</span>, err)<br>);<br></code></pre></td></tr></table></figure><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><p>用于指定发生错误时的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;/post.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">posts</span>)&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Error &#x27;</span>, error);<br>&#125;);<br></code></pre></td></tr></table></figure><p>如果Promise状态已经变成了Resolved，再抛出错误就是无效的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>)&#123;<br>    <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;ok&#x27;</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;test&#x27;</span>);<br>&#125;);<br><br>promise<br>.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value</span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error)&#125;);<br><span class="hljs-comment">// ok</span><br></code></pre></td></tr></table></figure><p>Promise对象错误具有”冒泡“性质，会一直向后传递，直到被捕获为止。也就是说：错误总会被下一个<code>catch</code>语句捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;/post/1.json&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">post</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getJSON</span>(post.<span class="hljs-property">commentURL</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">comments</span>)&#123;<br>    <span class="hljs-comment">// some code</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)&#123;<br>    <span class="hljs-comment">// error handler</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>与传统的<code>try/catch</code>代码块不同的是，如果没有使用<code>catch</code>方法指定错误处理的回调函数，Promise对象抛出的错误不会传递到外层代码。但是Chrome不遵守这个规则，还是会抛出异常。好在Node.js提供了一个<code>unhandledRejection</code>事件，专门监听未捕获的<code>reject</code>错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">process.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;unhandledRejection&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, p</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">stack</span>);<br>&#125;);<br><br><span class="hljs-keyword">var</span> someAsyncThing = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)&#123;<br>        <span class="hljs-title function_">resolve</span>(x + <span class="hljs-number">2</span>);<br>    &#125;);<br>&#125;;<br><br><span class="hljs-title function_">someAsyncThing</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;everything is great&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>catch</code>方法中还可以继续抛出异常。例如下面的代码：第二个<code>catch</code>方法用来捕获，前一个<code>catch</code>方法抛出错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">someAsyncThing</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">someOtherAsyncThing</span>();<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;oh no&#x27;</span>, error);<br>  <span class="hljs-comment">// 下面一行会报错，因为y没有声明</span><br>  y + <span class="hljs-number">2</span>;<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;carry on&#x27;</span>, error);<br>&#125;);<br><span class="hljs-comment">// oh no [ReferenceError: x is not defined]</span><br><span class="hljs-comment">// carry on [ReferenceError: y is not defined]</span><br></code></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h2><p><code>Promise.all</code>方法用于将多个Promise实例，包装成一个新的Promise实例。语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([p1, p2, p3]);<br></code></pre></td></tr></table></figure><p>例子如下：只有这6个实例的状态都变成了<code>fulfilled</code>，或者其中有一个状态变成了<code>rejected</code>，才会调用<code>Promise.all</code>方法后面的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> promises = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>].<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;/post/&quot;</span> + id + <span class="hljs-string">&quot;.json&quot;</span>);<br>&#125;);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>(promises).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">post</span>)&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">reason</span>)&#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>再例如下面这个例子：只有<code>booksPromise</code>和<code>userPromise</code>的结果都返回了，才会触发<code>pickTopRecommentations</code>这个回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> databasePromise = <span class="hljs-title function_">connectDatabase</span>();<br><br><span class="hljs-keyword">const</span> booksPromise = databasePromise.<span class="hljs-title function_">then</span>(findAllBooks);<br><br><span class="hljs-keyword">const</span> userPromise = databasrPromise.<span class="hljs-title function_">then</span>(getCurrentUser);<br><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([<br>    booksPromise,<br>    userPromise<br>]).<span class="hljs-title function_">then</span>([books, user] =&gt; <span class="hljs-title function_">pickTopRecommentations</span>(books, user));<br></code></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h2><p>跟上面的作用一样，将多个Promise实例合成一个新的Promise实例。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">var</span> p = Promise.race([<span class="hljs-built_in">p1</span>, <span class="hljs-built_in">p2</span>, <span class="hljs-built_in">p3</span>])<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>上面的例子中：只要三个状态有其中一个率先改变，新对象的状态就跟着一起改变。率先改变的Promise实例的返回值就是新Promise实例的回调函数的输入。</p><p>下面提供一个实例：如果指定时间内没有获得结果，就将Promise的状态变为<code>reject</code>，否则就为<code>resolve</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> p = <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([<br>  <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/resource-that-may-take-a-while&#x27;</span>),<br>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">reject</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;request timeout&#x27;</span>)), <span class="hljs-number">5000</span>)<br>  &#125;)<br>])<br>p.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response))<br>p.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error))<br></code></pre></td></tr></table></figure><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><p>有时需要将现有对象转为Promise对象，Promise.resolve()方法就起这个作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-comment">// equal to</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promisr</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;foo&#x27;</span>));<br></code></pre></td></tr></table></figure><p><code>Promise.resolve</code>方法的参数可以分为4种情况。</p><ul><li>参数是一个Promise实例：不做任何修改，原封不动返回实例</li><li>参数是一个thenable对象：将该对象转换为Promise对象，然后立即执行<code>thenable</code>对象的<code>then</code>方法；</li><li>参数不是具有then方法的对象，或根本就不是对象：返回一个新的<code>Promise</code>对象，状态为<code>Resolved</code>；</li><li>不带有任何参数：直接返回一个状态为<code>Resolved</code>的Promise对象；</li></ul><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><p>也会返回一个新的Promise实例，该实例的状态为<code>rejected</code>。其参数用法和<code>Promise.resolve()</code>方法完全一致；</p><h2 id="两个有用的附加方法"><a href="#两个有用的附加方法" class="headerlink" title="两个有用的附加方法"></a>两个有用的附加方法</h2><h3 id="done"><a href="#done" class="headerlink" title="done()"></a>done()</h3><p>提供一个<code>done</code>方法，总是处于回调链的尾端，保证抛出任何可能出现的错误</p><h3 id="finally"><a href="#finally" class="headerlink" title="finally()"></a>finally()</h3><p>用于指定不管Promise对象最后状态如何，都会执行的操作。与<code>Done</code>方法最大的区别，接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="加载图片"><a href="#加载图片" class="headerlink" title="加载图片"></a>加载图片</h3><p>我们可以将图片加载写成一个Promise，一旦加载完成，<code>Promise</code>的状态就发生变化；</p><h3 id="Generator函数结合Promise"><a href="#Generator函数结合Promise" class="headerlink" title="Generator函数结合Promise"></a>Generator函数结合Promise</h3><p>使用Generator函数管理函数流程，遇到异步操作的时候，通常返回一个<code>Promise</code>对象；</p><h3 id="Promise-try"><a href="#Promise-try" class="headerlink" title="Promise.try()"></a>Promise.try()</h3><p>实际开发中还遇到一种情况：不知道或者不想区分函数f是同步还是异步，但还是想用Promise来处理。</p><p>实际开发中提供了两种写法来实现这种效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// async 写法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">f</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;now&#x27;</span>);<br>(<span class="hljs-keyword">async</span> () =&gt; <span class="hljs-title function_">f</span>())();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;next&#x27;</span>);<br><br><span class="hljs-comment">// Promise写法</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">f</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;now&#x27;</span>);<br>&#123;<br>    <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<br>    <span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-title function_">f</span>())<br>    )<br>&#125;();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;next&#x27;</span>);<br></code></pre></td></tr></table></figure><p>需要注意的是<code>async () =&gt; f()</code>会吃掉<code>f()</code>抛出的异常，因此需要使用<code>promise.catch</code>方法来捕获异常；</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Generator函数</title>
    <link href="/2022/02/17/javascript/es6-generator-function/"/>
    <url>/2022/02/17/javascript/es6-generator-function/</url>
    
    <content type="html"><![CDATA[<h1 id="Generator函数"><a href="#Generator函数" class="headerlink" title="Generator函数"></a>Generator函数</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Generator函数是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同。</p><p>Generator函数有多种理解角度：从语法上：可以将其理解成状态机，封装了多个内部状态；其次：执行Generator函数会返回一个遍历器对象。</p><p>形式上，Generator函数是个普通函数，但是有两个特征。一是<code>function</code>关键字和函数名之间多了一个星号；二是函数体内部使用了<code>yield</code>语句，定义了不同的内部状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">hello</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;world&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ending&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> hello = <span class="hljs-title function_">hello</span>();<br>hello.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// hello - 1</span><br>hello.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// world - 2</span><br>hello.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// ending - 3</span><br>hello.<span class="hljs-title function_">next</span>() <span class="hljs-comment">//undefined - 4</span><br></code></pre></td></tr></table></figure><h2 id="yield语句"><a href="#yield语句" class="headerlink" title="yield语句"></a>yield语句</h2><p>可以看出，只有显式调用next()方法才会继续遍历到下一个状态，所以其实提供了一种可以暂停执行的函数。其中yield就是暂停标识。如果Generator函数不使用yield语句，这时就变成了一个单纯地暂缓执行函数。注意：yield不能用在普通函数中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Executed!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> generator = <span class="hljs-title function_">f</span>();<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    generator.<span class="hljs-title function_">next</span>();<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><h2 id="与Iterator接口的关系"><a href="#与Iterator接口的关系" class="headerlink" title="与Iterator接口的关系"></a>与Iterator接口的关系</h2><p>由于Generator函数就是遍历器生成的函数，因此可以把Generator赋值给对象的Symbol.iterator属性，从而使得该对象具有Iterator接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myIterable = &#123;&#125;;<br>myIterable[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span>* () &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;;<br>[...myIterable] <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h2 id="next-方法的参数"><a href="#next-方法的参数" class="headerlink" title="next()方法的参数"></a>next()方法的参数</h2><p><code>yield</code>语句本身没有返回值，或者说总是返回<code>undefined</code>。<code>next</code>方法可以带一个参数，该参数就会被当做上一个yield语句的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; <span class="hljs-literal">true</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> reset = <span class="hljs-keyword">yield</span> i;<br>        <span class="hljs-keyword">if</span> (reset) &#123;i = -<span class="hljs-number">1</span>;&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> g = <span class="hljs-title function_">f</span>();<br><br>g.<span class="hljs-title function_">next</span>()<br>g.<span class="hljs-title function_">next</span>()<br>g.<span class="hljs-title function_">next</span>(<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><p>上面这个例子有一个很有意思的特性：可以通过在Generator函数运行的不同阶段，从外部向内部注入不同的值，从而来调整函数的行为。</p><h2 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h2><p><code>for...of</code>循环可以自动遍历Generator函数生成的Iterator对象，且此时不再需要调用next方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> <span class="hljs-title function_">foo</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);<br>&#125;<br><span class="hljs-comment">// 1 2 3 4 5</span><br></code></pre></td></tr></table></figure><p>需要注意的是：一旦next方法的返回对象的done属性为true，for…of循环就会终止，且不包含该返回对象。下面再举一个解斐波那契数列的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">fibonacci</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> [prev, curr] = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (;;) &#123; <span class="hljs-comment">// 内部自动会取下一个yield语句</span><br>        [prev, curr] = [curr, prev + curr];<br>        <span class="hljs-keyword">yield</span> curr;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> n <span class="hljs-keyword">of</span> <span class="hljs-title function_">fibonacci</span>()) &#123;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1000</span>) <span class="hljs-keyword">break</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><p>利用<code>for...of</code>循环可以写出遍历任意对象的方法。原生的JavaScript对象没有遍历接口，无法使用<code>for...of</code>循环，通过Generator函数为它加上这个接口，就可以使用了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">objectEntries</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> propKeys = <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(obj);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> propKey <span class="hljs-keyword">of</span> propKeys) &#123;<br>        <span class="hljs-keyword">yield</span> [propKey, obj[propKey]];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> jane = &#123; <span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;Doe&#x27;</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title function_">objectEntries</span>(jane)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;value&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-comment">// 另一种写法是将Generator函数加入到Symbol.iterator属性中.</span><br>jane[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = objectEntries;<br></code></pre></td></tr></table></figure><h2 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h2><p>Generator函数返回的遍历器对象，都有一个<code>throw</code>方法，可以在函数体外抛出错误，然后在Generator函数体内捕获。切记：不要混淆遍历器对象的throw方法和全局throw命令。因此：如果Generator函数内部没有部署<code>try...catch</code>代码块，那么<code>throw</code>方法抛出的错误，将被外部<code>try...catch</code>代码块捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> g = <span class="hljs-keyword">function</span>* () &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">yield</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Inner catch&#x27;</span>, e);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> i = <span class="hljs-title function_">g</span>();<br>i.<span class="hljs-title function_">next</span>();<br>i.<span class="hljs-keyword">throw</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Error occurs!&#x27;</span>));<br></code></pre></td></tr></table></figure><p>如果Generator函数内部和外部都没有部署<code>try...catch</code>代码块，那么程序将直接报错并且中断运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> gen = <span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello&#x27;</span>);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;world&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> g = <span class="hljs-title function_">gen</span>();<br>g.<span class="hljs-title function_">next</span>();<br>g.<span class="hljs-keyword">throw</span>();<br></code></pre></td></tr></table></figure><p>如果Generator函数内部部署了<code>try-...catch</code>代码块，就不会影响下一次yield语句的执行。throw方法在被捕获以后会顺带执行下一条yield语句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> gen = <span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br>    <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> g = <span class="hljs-title function_">gen</span>();<br>g.<span class="hljs-title function_">next</span>();<br>g.<span class="hljs-keyword">throw</span>();<br>g.<span class="hljs-title function_">next</span>();<br></code></pre></td></tr></table></figure><h2 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h2><p>Generator函数的遍历器对象，还有一个return方法，可以返回给定的值，并且终结遍历Generator函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> g = <span class="hljs-title function_">gen</span>();<br><br>g.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">// &#123;value:1, done: false&#125;</span><br>g.<span class="hljs-keyword">return</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// &#123;value: &#x27;foo&#x27;, done: true&#125;</span><br>g.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br></code></pre></td></tr></table></figure><p>如果<code>return</code>方法调用时，不提供参数，则返回的<code>value</code>值为<code>undefined</code>;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> g = <span class="hljs-title function_">gen</span>();<br><br>g.<span class="hljs-title function_">next</span>(); <span class="hljs-comment">// &#123;value: 1, done: false&#125;</span><br>g.<span class="hljs-keyword">return</span>(); <span class="hljs-comment">// &#123;value: undefined, done: true&#125;</span><br></code></pre></td></tr></table></figure><p>如果Generator函数内部有<code>try...finally</code>代码块，那么<code>return</code>方法将会推迟到<code>finally</code>代码块执行完再执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* numbers () &#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>  &#125; <span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">5</span>;<br>  &#125;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">6</span>;<br>&#125;<br><span class="hljs-keyword">var</span> g = <span class="hljs-title function_">numbers</span>()<br>g.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; done: false, value: 1 &#125;</span><br>g.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; done: false, value: 2 &#125;</span><br>g.<span class="hljs-keyword">return</span>(<span class="hljs-number">7</span>) <span class="hljs-comment">// &#123; done: false, value: 4 &#125;</span><br>g.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; done: false, value: 5 &#125;</span><br>g.<span class="hljs-title function_">next</span>() <span class="hljs-comment">// &#123; done: true, value: 7 &#125;</span><br></code></pre></td></tr></table></figure><h2 id="yield-语句"><a href="#yield-语句" class="headerlink" title="yield* 语句"></a>yield* 语句</h2><p>该语句是用来在一个Generator函数中执行另外一个Generator函数的。从语法的角度上看：如果yield语句后面跟着一个遍历器对象，需要在yield命令后面加上星号，表明它返回的是一个遍历器对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;x&#x27;</span>;<br>    <span class="hljs-keyword">yield</span>* <span class="hljs-title function_">foo</span>();<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;y&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span>* <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;b&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Generator函数的this"><a href="#Generator函数的this" class="headerlink" title="Generator函数的this"></a>Generator函数的this</h2><p>Generator函数总是返回一个遍历器，ES6规定这个遍历器是Generator函数的实例，也继承了Generator函数的<code>prototype</code>对象上的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">g</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br>g.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hi!&#x27;</span>;<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj = <span class="hljs-title function_">g</span>();<br><br>obj <span class="hljs-keyword">instanceof</span> g;<br>obj.<span class="hljs-title function_">hello</span>(); <span class="hljs-comment">// &#x27;hi!&#x27;</span><br></code></pre></td></tr></table></figure><p>默认情况下，Generator函数是不可以使用new关键字生成的，但是我们可以用下面这种方式来生成一个空的Generator实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">c</span> = <span class="hljs-number">3</span>;<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> f = F.<span class="hljs-title function_">call</span>(F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><br>f.<span class="hljs-title function_">next</span>();  <span class="hljs-comment">// Object &#123;value: 2, done: false&#125;</span><br>f.<span class="hljs-title function_">next</span>();  <span class="hljs-comment">// Object &#123;value: 3, done: false&#125;</span><br>f.<span class="hljs-title function_">next</span>();  <span class="hljs-comment">// Object &#123;value: undefined, done: true&#125;</span><br><br>obj.<span class="hljs-property">a</span> <span class="hljs-comment">// 1</span><br>obj.<span class="hljs-property">b</span> <span class="hljs-comment">// 2</span><br>obj.<span class="hljs-property">c</span> <span class="hljs-comment">// 3</span><br><br></code></pre></td></tr></table></figure><p>再将F改造成构造函数，就可以使用new命令来创建对象了；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">b</span> = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">c</span> = <span class="hljs-number">3</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> gen.<span class="hljs-title function_">call</span>(gen.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>();<br><br>f.<span class="hljs-title function_">next</span>();  <span class="hljs-comment">// Object &#123;value: 2, done: false&#125;</span><br>f.<span class="hljs-title function_">next</span>();  <span class="hljs-comment">// Object &#123;value: 3, done: false&#125;</span><br>f.<span class="hljs-title function_">next</span>();  <span class="hljs-comment">// Object &#123;value: undefined, done: true&#125;</span><br><br>f.<span class="hljs-property">a</span> <span class="hljs-comment">// 1</span><br>f.<span class="hljs-property">b</span> <span class="hljs-comment">// 2</span><br>f.<span class="hljs-property">c</span> <span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h2 id="Generator函数的应用"><a href="#Generator函数的应用" class="headerlink" title="Generator函数的应用"></a>Generator函数的应用</h2><h3 id="（1）异步操作的同步化表达"><a href="#（1）异步操作的同步化表达" class="headerlink" title="（1）异步操作的同步化表达"></a>（1）异步操作的同步化表达</h3><p>基于Generator函数暂停执行的效果，意味着可以把异步写到yield语句中。等到next方法时再往后执行。这实际上等同于不需要再写回调函数了，因为异步操作的后续可以放在yield语句的下面。具体例子前面已经有涉及到了，所以这里就不再演示了。</p><h3 id="（2）控制流管理"><a href="#（2）控制流管理" class="headerlink" title="（2）控制流管理"></a>（2）控制流管理</h3><p>如果一个多步操作非常耗时，可以使用Generator函数进一步改善代码的运作流程。不过这种写法只适合同步操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">longRunningTask</span>(<span class="hljs-params">value1</span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">var</span> value2 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">step1</span>(value1);<br>    <span class="hljs-keyword">var</span> value3 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">step2</span>(value2);<br>    <span class="hljs-keyword">var</span> value4 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">step3</span>(value3);<br>    <span class="hljs-keyword">var</span> value5 = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">step4</span>(value4);<br>    <span class="hljs-comment">// Do something with value4</span><br>  &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>    <span class="hljs-comment">// Handle any error from step1 through step4</span><br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">scheduler</span>(<span class="hljs-title function_">longRunningTask</span>(initialValue));<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">scheduler</span>(<span class="hljs-params">task</span>) &#123;<br>  <span class="hljs-keyword">var</span> taskObj = task.<span class="hljs-title function_">next</span>(task.<span class="hljs-property">value</span>);<br>  <span class="hljs-comment">// 如果Generator函数未结束，就继续调用</span><br>  <span class="hljs-keyword">if</span> (!taskObj.<span class="hljs-property">done</span>) &#123;<br>    task.<span class="hljs-property">value</span> = taskObj.<span class="hljs-property">value</span><br>    <span class="hljs-title function_">scheduler</span>(task);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（3）部署Iterator接口"><a href="#（3）部署Iterator接口" class="headerlink" title="（3）部署Iterator接口"></a>（3）部署Iterator接口</h3><p>利用Generator函数的特性，可以在任意对象上部署Iterator接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">iterEntries</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">let</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; keys.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">let</span> key = keys[i];<br>    <span class="hljs-keyword">yield</span> [key, obj[key]];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> myObj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">bar</span>: <span class="hljs-number">7</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title function_">iterEntries</span>(myObj)) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, value);<br>&#125;<br><br><span class="hljs-comment">// foo 3</span><br><span class="hljs-comment">// bar 7</span><br></code></pre></td></tr></table></figure><h3 id="（4）作为数据结构"><a href="#（4）作为数据结构" class="headerlink" title="（4）作为数据结构"></a>（4）作为数据结构</h3><p>Generator可以看作数据结构，更确切的说是一种数组结构，因为Generator函数可以返回一系列的值。这意味着它可以对任意表达式，提供类似数组的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> *<span class="hljs-title function_">doStuff</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">yield</span> fs.<span class="hljs-property">readFile</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;hello.txt&#x27;</span>);<br>  <span class="hljs-keyword">yield</span> fs.<span class="hljs-property">readFile</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;world.txt&#x27;</span>);<br>  <span class="hljs-keyword">yield</span> fs.<span class="hljs-property">readFile</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&#x27;and-such.txt&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 迭代</title>
    <link href="/2022/02/17/javascript/es6-iterator/"/>
    <url>/2022/02/17/javascript/es6-iterator/</url>
    
    <content type="html"><![CDATA[<h1 id="Iterator和for…of循环"><a href="#Iterator和for…of循环" class="headerlink" title="Iterator和for…of循环"></a>Iterator和for…of循环</h1><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>遍历器是是一种机制：它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署了Iterator接口，就可以完成遍历操作。</p><h3 id="数据结构的默认Iterator接口"><a href="#数据结构的默认Iterator接口" class="headerlink" title="数据结构的默认Iterator接口"></a>数据结构的默认Iterator接口</h3><p>目的在于为所有数据结构，提供一种统一的访问机制，即<code>for...of</code>循环。因此一种数据结构只要部署了Iterator接口，我们就可以成为该数据结构是可遍历的。</p><p>ES6规定：默认的Iterator接口部署在数据结构的<code>Symbol.iterator</code>属性，也就是说：一个数据结构只要具有该属性，就可以认为是可遍历的。<code>Symbol.iterator</code>属性本身是一个函数，就是当前数据结构默认的遍历器生成函数。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] : <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">next</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span><br>                &#125;;<br>            &#125;<br>        &#125;;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// obj对象是可遍历的，因为具有Symbol.iterator属性。</span><br></code></pre></td></tr></table></figure><p>一个对象如果想要在<code>for...of</code>循环上调用Iterator接口，就必须在<code>Symbol.iterator</code>的属性上部署遍历器生成方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">RangeIterator</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">start, stop</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = start;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">stop</span> = stop;<br>    &#125;<br><br>    [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123; <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>; &#125;<br><br>    <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>;<br>        <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">stop</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> ++;<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>, <span class="hljs-attr">value</span>: value&#125;;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>&#125;;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">range</span>(<span class="hljs-params">start ,stop</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RangeIterator</span>(start, stop);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> value <span class="hljs-keyword">of</span> <span class="hljs-title function_">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h2 id="调用Iterator接口的场合"><a href="#调用Iterator接口的场合" class="headerlink" title="调用Iterator接口的场合"></a>调用Iterator接口的场合</h2><h3 id="（1）解构赋值"><a href="#（1）解构赋值" class="headerlink" title="（1）解构赋值"></a>（1）解构赋值</h3><p>对数组和Set结构进行解构赋值时，会默认调用<code>Symbol.iterator</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>().<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;a&#x27;</span>).<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;b&#x27;</span>).<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;c&#x27;</span>);<br><br><span class="hljs-keyword">let</span> [x, y] = set;<br><br><span class="hljs-keyword">let</span> [first, ...rest] = set;<br></code></pre></td></tr></table></figure><h3 id="（2）扩展运算符"><a href="#（2）扩展运算符" class="headerlink" title="（2）扩展运算符"></a>（2）扩展运算符</h3><p>扩展运算符默认也会调用<code>Symbol.iterator</code>接口，前面章节已经有很多例子，这里就不再展示了。</p><h3 id="（3）yield"><a href="#（3）yield" class="headerlink" title="（3）yield*"></a>（3）yield*</h3><p>yield* 后面跟的也是一个可遍历结构，它会调用该结构的遍历器接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> generator = <span class="hljs-keyword">function</span>* () &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span>* [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">5</span>;<br>&#125;;<br><br><span class="hljs-keyword">var</span> iterator = <span class="hljs-title function_">generator</span>();<br><br>iterator.<span class="hljs-title function_">next</span>(<span class="hljs-params"></span>)<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br><br>iterator.<span class="hljs-title function_">next</span>(<span class="hljs-params"></span>)<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br><br>iterator.<span class="hljs-title function_">next</span>(<span class="hljs-params"></span>)<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br><br>iterator.<span class="hljs-title function_">next</span>(<span class="hljs-params"></span>)<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br><br>iterator.<span class="hljs-title function_">next</span>(<span class="hljs-params"></span>)<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span> &#125;<br><br>iterator.<span class="hljs-title function_">next</span>(<span class="hljs-params"></span>)<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="（4）其他场合"><a href="#（4）其他场合" class="headerlink" title="（4）其他场合"></a>（4）其他场合</h3><p>由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都是调用了遍历器接口的。</p><h2 id="字符串的Iterator接口"><a href="#字符串的Iterator接口" class="headerlink" title="字符串的Iterator接口"></a>字符串的Iterator接口</h2><p>字符串是一个类似数组的对象，也原生具有Iterator接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> someString = <span class="hljs-string">&quot;hi&quot;</span>;<br><span class="hljs-keyword">typeof</span> someString[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]<br><span class="hljs-comment">// &quot;function&quot;</span><br><br><span class="hljs-keyword">var</span> iterator = someString[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]();<br><br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123; value: &quot;h&quot;, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123; value: &quot;i&quot;, done: false &#125;</span><br>iterator.<span class="hljs-title function_">next</span>()  <span class="hljs-comment">// &#123; value: undefined, done: true &#125;</span><br></code></pre></td></tr></table></figure><h2 id="Iterator接口与Generator函数"><a href="#Iterator接口与Generator函数" class="headerlink" title="Iterator接口与Generator函数"></a>Iterator接口与Generator函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myIterable = &#123;&#125;;<br><br>myIterable[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span>* () &#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;;<br>[...myIterable] <span class="hljs-comment">// [1, 2, 3]</span><br><br><span class="hljs-comment">// 或者采用下面的简洁写法</span><br><br><span class="hljs-keyword">let</span> obj = &#123;<br>  * [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;hello&#x27;</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;world&#x27;</span>;<br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> obj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>&#125;<br><span class="hljs-comment">// hello</span><br><span class="hljs-comment">// world</span><br></code></pre></td></tr></table></figure><h2 id="遍历器对象的return-，throw"><a href="#遍历器对象的return-，throw" class="headerlink" title="遍历器对象的return()，throw()"></a>遍历器对象的return()，throw()</h2><p>遍历器除了有<code>next</code>方法以外，还可以拥有<code>return</code>和<code>throw</code>方法。其中<code>next</code>方法是必须部署的，而<code>return</code>和<code>throw</code>却是可选的。</p><p><code>return</code>方法的使用场景是：如果一个对象要在完成遍历前，需要清理或者释放资源，就需要部署。</p><p><code>throw</code>方法主要结合Generator函数使用。这里不做过多解释。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">readLinesSync</span>(<span class="hljs-params">file</span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span> (file.<span class="hljs-title function_">isAtEndOfFile</span>()) &#123;<br>        file.<span class="hljs-title function_">close</span>();<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-keyword">return</span>() &#123;<br>      file.<span class="hljs-title function_">close</span>();<br>      <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span> &#125;;<br>    &#125;,<br>  &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for…of循环"><a href="#for…of循环" class="headerlink" title="for…of循环"></a>for…of循环</h2><p>一个数据结构只要部署了<code>Symbol.iterator</code>属性，就被视为具有iterator接口，就可以使用<code>for...of</code>循环遍历。也就是说<code>for...of</code>循环内部调用的是数据结构的<code>Symbol.iterator</code>方法。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组具备iterator接口，可以通过下面的代码证明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;gree&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> arr) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);<br>&#125;<br><br><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>obj[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = arr[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>].<span class="hljs-title function_">bind</span>(arr);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> v <span class="hljs-keyword">of</span> obj) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Set和Map结构"><a href="#Set和Map结构" class="headerlink" title="Set和Map结构"></a>Set和Map结构</h3><p>Set和Map结构也原生具有Iterator接口，可以直接使用<code>for...of</code>循环。前面有例子演示过，不再赘述。</p><h3 id="类似数组的对象"><a href="#类似数组的对象" class="headerlink" title="类似数组的对象"></a>类似数组的对象</h3><p>类似数组的对象，包括：DON NodeList对象，arguments对象。都可以使用<code>for...of</code>来循环遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 字符串</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> s <span class="hljs-keyword">of</span> str) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s); <span class="hljs-comment">// h e l l o</span><br>&#125;<br><br><span class="hljs-comment">// DOM NodeList对象</span><br><span class="hljs-keyword">let</span> paras = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;p&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> p <span class="hljs-keyword">of</span> paras) &#123;<br>  p.<span class="hljs-property">classList</span>.<span class="hljs-title function_">add</span>(<span class="hljs-string">&quot;test&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// arguments对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">printArgs</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> x <span class="hljs-keyword">of</span> <span class="hljs-variable language_">arguments</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x);<br>  &#125;<br>&#125;<br><span class="hljs-title function_">printArgs</span>(<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>);<br><span class="hljs-comment">// &#x27;a&#x27;</span><br><span class="hljs-comment">// &#x27;b&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>对于普通对象，<code>for...of</code>不能直接使用，会报错；必须部署了iterator接口后才能使用。但是即便是这样：<code>for...of</code>依旧可以用来遍历键名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> es6 = &#123;<br>  <span class="hljs-attr">edition</span>: <span class="hljs-number">6</span>,<br>  <span class="hljs-attr">committee</span>: <span class="hljs-string">&quot;TC39&quot;</span>,<br>  <span class="hljs-attr">standard</span>: <span class="hljs-string">&quot;ECMA-262&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> e <span class="hljs-keyword">in</span> es6) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;<br><span class="hljs-comment">// edition</span><br><span class="hljs-comment">// committee</span><br><span class="hljs-comment">// standard</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> e <span class="hljs-keyword">of</span> es6) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>&#125;<br><span class="hljs-comment">// TypeError: es6 is not iterable</span><br></code></pre></td></tr></table></figure><h2 id="for-in循环的缺点"><a href="#for-in循环的缺点" class="headerlink" title="for...in循环的缺点"></a><code>for...in</code>循环的缺点</h2><p><code>for...in</code>循环也是有缺点的：</p><ul><li>数组的键名是数字，但是<code>for...in</code>循环是字符串作为键名的；</li><li>除了循环数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键；</li><li>某些情况下，<code>for...in</code>循环会以任何顺序遍历键名；</li></ul><h2 id="for-of循环的优点"><a href="#for-of循环的优点" class="headerlink" title="for...of循环的优点"></a><code>for...of</code>循环的优点</h2><ul><li>有着和for…in循环一样简洁的语法，但是没有for…in那些缺点；</li><li>不同于forEach方法，可以结合return, continue和break使用；</li><li>提供了遍历所有数据结构的统一操作接口；</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Proxy和Reflect</title>
    <link href="/2022/02/17/javascript/es6-proxy-and-reflect/"/>
    <url>/2022/02/17/javascript/es6-proxy-and-reflect/</url>
    
    <content type="html"><![CDATA[<h1 id="Proxy和Reflect"><a href="#Proxy和Reflect" class="headerlink" title="Proxy和Reflect"></a>Proxy和Reflect</h1><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Proxy用于修改某些操作的默认行为，等同于在语言层面做修改，所以属于一种“元编程”。Proxy可以理解为在目标对象之前架设一层拦截，外界对该对象的访问必须先通过这层拦截，因此提供了一种机制：可以对外界的访问进行过滤和改写。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, key, receiver</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`getting <span class="hljs-subst">$&#123;key&#125;</span>!`</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, key, receiver);<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">target, key, value, receiver</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`setting <span class="hljs-subst">$&#123;key&#125;</span>`</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">set</span>(target, key, value, receiver);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>ES6原生提供了Proxy构造函数，用来生成Proxy实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br></code></pre></td></tr></table></figure><p>其中target表示所要拦截的对象，handler用来定制拦截行为。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, property</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">35</span>;<br>    &#125;<br>&#125;);<br><br>proxy.<span class="hljs-property">time</span> <span class="hljs-comment">// 35</span><br>proxy.<span class="hljs-property">name</span> <span class="hljs-comment">// 35</span><br>proxy.<span class="hljs-property">titile</span> <span class="hljs-comment">// 35</span><br></code></pre></td></tr></table></figure><p>需要说明的是：如果handler没有设置任何拦截对象，那么将继续保持原对象的行为不变。并且同一个拦截函数可以设置多个拦截操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handler = &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, name</span>) &#123;<br>        <span class="hljs-keyword">if</span> (name === <span class="hljs-string">&#x27;prototype&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, &#x27;</span> + name;<br>    &#125;,<br><br>    <span class="hljs-attr">apply</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, thisBinding, args</span>) &#123;<br>        <span class="hljs-keyword">return</span> args[<span class="hljs-number">0</span>];<br>    &#125;,<br>    <span class="hljs-attr">construct</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, args</span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: args[<span class="hljs-number">1</span>]&#125;;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> fproxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>)&#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;, handler);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">fproxy</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">fproxy</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)); <span class="hljs-comment">// &#123;value: 2&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fproxy.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> === <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fproxy.<span class="hljs-property">foo</span>) <span class="hljs-comment">// &quot;Hello, foo&quot;</span><br></code></pre></td></tr></table></figure><p>下面是Proxy支持的拦截操作一览：</p><ul><li>get(target, propKey, receiver)：拦截对象属性的读取</li><li>set(target, propKey, value, receiver)：拦截对象属性的设置</li><li>has(target, propKey)：拦截<code>propKey in proxy</code>的操作，以及对象的<code>hasOwnProperty</code>方法，返回一个布尔值</li><li>deleteProperty(target, propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值；</li><li>ownKeys(target)：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>返回一个数组。该方法返回对象所有自身的属性</li><li>getOwnPropertyDescriptor(target, propKey)：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>返回属性的描述对象。</li><li>defineProperty(target, propKey, propDesc)：拦截<code>Object.defineProperty(proxy, propKey, propDesc)</code>返回一个布尔值；</li><li>preventExtensions(target)：拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值；</li><li>getPrototypeOf(target)：拦截<code>Object.getPropertyOf(proxy)</code>返回一个对象</li><li>isExtensible(target)：拦截<code>Object.isExtensible(target)</code>，返回一个布尔值</li><li>setPrototypeOf(target, proto)：拦截<code>Object.setPrototypeOf(proxy, proto)</code>返回一个布尔值；</li><li>apply(target, object, args)：拦截Proxy实例作为函数的调用操作</li><li>construct(target, args)：拦截Proxy实例作为构造函数调用的操作</li></ul><h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><h4 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;zhangsan&quot;</span><br>&#125;;<br><br><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(person, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, property</span>) &#123;<br>        <span class="hljs-keyword">if</span> (property <span class="hljs-keyword">in</span> target) &#123;<br>            <span class="hljs-keyword">return</span> target[property];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceError</span>(<span class="hljs-string">&quot;Property \&quot;&quot;</span> + property + <span class="hljs-string">&quot;\&quot; doesn&#x27;t exist.&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> validator = &#123;<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, prop, value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">&#x27;age&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(value)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;The age is not an integer&#x27;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (value &gt; <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RangeError</span>(<span class="hljs-string">&#x27;The age seems invalid&#x27;</span>);<br>            &#125;<br>        &#125;<br><br>        target[prop] = value;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, validator);<br>person.<span class="hljs-property">age</span> = <span class="hljs-number">100</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>);<br>person.<span class="hljs-property">age</span> = <span class="hljs-string">&#x27;young&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">age</span>);<br></code></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> target = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I am the target;&quot;</span>; &#125;;<br><span class="hljs-keyword">var</span> handler = &#123;<br>    <span class="hljs-attr">apply</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;I am the proxy&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">p</span>()); <span class="hljs-comment">// I am the proxy</span><br></code></pre></td></tr></table></figure><h4 id="has"><a href="#has" class="headerlink" title="has()"></a>has()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> stu1 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">59</span> &#125;;<br><span class="hljs-keyword">let</span> stu2 = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>, <span class="hljs-attr">score</span>: <span class="hljs-number">99</span> &#125;;<br><br><span class="hljs-keyword">let</span> handler = &#123;<br>    <span class="hljs-title function_">has</span>(<span class="hljs-params">target, prop</span>) &#123;<br>        <span class="hljs-keyword">if</span> (prop === <span class="hljs-string">&#x27;score&#x27;</span> &amp;&amp; target[prop] &lt; <span class="hljs-number">60</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;target.name&#125;</span> 不及格`</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> prop <span class="hljs-keyword">in</span> target;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> oproxy1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(stu1, handler);<br><span class="hljs-keyword">let</span> oproxy2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(stu2, handler);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;score&#x27;</span> <span class="hljs-keyword">in</span> oproxy1)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;score&#x27;</span> <span class="hljs-keyword">in</span> oproxy2)<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> a <span class="hljs-keyword">in</span> oproxy1) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oproxy1[a]);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> b <span class="hljs-keyword">in</span> oproxy2) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(oproxy2[b]);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="construct"><a href="#construct" class="headerlink" title="construct()"></a>construct()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;, &#123;<br>    <span class="hljs-attr">construct</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target, args</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;called: &#x27;</span> + args.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;, &#x27;</span>));<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">value</span>: args[<span class="hljs-number">0</span>] * <span class="hljs-number">10</span> &#125;;<br>    &#125;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">p</span>(<span class="hljs-number">1</span>).<span class="hljs-property">value</span>);<br></code></pre></td></tr></table></figure><h4 id="deleteProperty"><a href="#deleteProperty" class="headerlink" title="deleteProperty()"></a>deleteProperty()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handler = &#123;<br>    <span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target, key</span>) &#123;<br>        <span class="hljs-title function_">invariant</span>(key, <span class="hljs-string">&#x27;delete&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">invariant</span>(<span class="hljs-params">key, action</span>) &#123;<br>    <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;_&#x27;</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`Invalid attempt to <span class="hljs-subst">$&#123;action&#125;</span> private &quot;<span class="hljs-subst">$&#123;key&#125;</span>&quot; property`</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> target = &#123; <span class="hljs-attr">_prop</span>: <span class="hljs-string">&#x27;foo&#x27;</span> &#125;;<br><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br><span class="hljs-keyword">delete</span> proxy.<span class="hljs-property">_prop</span><br></code></pre></td></tr></table></figure><h4 id="defineProperty"><a href="#defineProperty" class="headerlink" title="defineProperty()"></a>defineProperty()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handler = &#123;<br>    <span class="hljs-title function_">defineProperty</span>(<span class="hljs-params">target, key, descriptor</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">var</span> target = &#123;&#125;;<br><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br>proxy.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="getOwnPropertyDescriptor"><a href="#getOwnPropertyDescriptor" class="headerlink" title="getOwnPropertyDescriptor()"></a>getOwnPropertyDescriptor()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> handler = &#123;<br>  getOwnPropertyDescriptor (target, key) &#123;<br>    <span class="hljs-keyword">if</span> (key[<span class="hljs-number">0</span>] === <span class="hljs-string">&#x27;_&#x27;</span>) &#123;<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(target, key);<br>  &#125;<br>&#125;;<br><span class="hljs-keyword">var</span> target = &#123; <span class="hljs-attr">_foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-string">&#x27;tar&#x27;</span> &#125;;<br><span class="hljs-keyword">var</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(proxy, <span class="hljs-string">&#x27;wat&#x27;</span>)<br><span class="hljs-comment">// undefined</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(proxy, <span class="hljs-string">&#x27;_foo&#x27;</span>)<br><span class="hljs-comment">// undefined</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(proxy, <span class="hljs-string">&#x27;baz&#x27;</span>)<br><span class="hljs-comment">// &#123; value: &#x27;tar&#x27;, writable: true, enumerable: true, configurable: true &#125;</span><br></code></pre></td></tr></table></figure><h4 id="getPrototypeOf"><a href="#getPrototypeOf" class="headerlink" title="getPrototypeOf()"></a>getPrototypeOf()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> proto = &#123;&#125;;<br><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;<br>    <span class="hljs-title function_">getPrototypeOf</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">return</span> proto;<br>    &#125;<br>&#125;);<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(p) === proto <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h4 id="isExtensible"><a href="#isExtensible" class="headerlink" title="isExtensible()"></a>isExtensible()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(&#123;&#125;, &#123;<br>    <span class="hljs-attr">isExtensible</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;called&#x27;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;);<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(p)<br></code></pre></td></tr></table></figure><h4 id="ownKeys"><a href="#ownKeys" class="headerlink" title="ownKeys()"></a>ownKeys()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> target = &#123;<br>    <span class="hljs-attr">_bar</span>: <span class="hljs-string">&#x27;foo&#x27;</span>,<br>    <span class="hljs-attr">_prop</span>: <span class="hljs-string">&#x27;bar&#x27;</span>,<br>    <span class="hljs-attr">prop</span>: <span class="hljs-string">&#x27;baz&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">let</span> handler = &#123;<br>    <span class="hljs-title function_">ownKeys</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(target).<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> key[<span class="hljs-number">0</span>] !== <span class="hljs-string">&#x27;_&#x27;</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, handler);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(proxy)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(target[key]); <span class="hljs-comment">// baz</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="取消代理"><a href="#取消代理" class="headerlink" title="取消代理"></a>取消代理</h3><p>Proxy.revocable()方法返回一个可取消的Proxy实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> target = &#123;&#125;;<br><span class="hljs-keyword">let</span> handler = &#123;&#125;;<br><br><span class="hljs-keyword">let</span> &#123;proxy, revoke&#125; = <span class="hljs-title class_">Proxy</span>.<span class="hljs-title function_">revocable</span>(target, handler);<br><br>proxy.<span class="hljs-property">foo</span> = <span class="hljs-number">123</span>;<br>proxy.<span class="hljs-property">foo</span> <span class="hljs-comment">// 123</span><br><br><span class="hljs-title function_">revoke</span>();<br>proxy.<span class="hljs-property">foo</span> <span class="hljs-comment">// TypeError: Revoked</span><br></code></pre></td></tr></table></figure><h3 id="this问题"><a href="#this问题" class="headerlink" title="this问题"></a>this问题</h3><p>虽然Proxy可以代理针对目标对象的访问，但不是目标对象的透明代理：即不做任何拦截的情况下，也无法保证与目标对象的行为一致。主要原因是在Proxy代理的情况下，目标对象内部的<code>this</code>关键字会指向Proxy代理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> _name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name</span>) &#123;<br>        _name.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>, name);<br>    &#125;<br><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">name</span>() &#123;<br>        <span class="hljs-keyword">return</span> _name.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> jane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jane&#x27;</span>);<br>jane.<span class="hljs-property">name</span>; <span class="hljs-comment">// &quot;Jane&quot;</span><br><br><span class="hljs-keyword">const</span> proxy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(jane, &#123;&#125;);<br>proxy.<span class="hljs-property">name</span> <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h2 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>Reflect也是ES6为了操作对象而提供的新API，其设计目的主要有几个：</p><ol><li>将Object对象的一些明显属于语言内部的方法放到Reflect对象上。</li><li>修改某些Object方法返回的结果，让其变得合理。</li><li>让Object的操作都变成函数行为。某些Object操作是命令式的；</li><li>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> loggedObj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(obj, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params">target, name</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;get&#x27;</span>, target, name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">get</span>(target, name);<br>    &#125;,<br>    <span class="hljs-title function_">deleteProperty</span>(<span class="hljs-params">target, name</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;delete&#x27;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">deleteProperty</span>(target, name);<br>    &#125;,<br>    <span class="hljs-title function_">has</span>(<span class="hljs-params">target, name</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;has&#x27;</span> + name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">has</span>(target, name);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Reflect对象的方法"><a href="#Reflect对象的方法" class="headerlink" title="Reflect对象的方法"></a>Reflect对象的方法</h3><p>大体上和Object对象的同名方法的作用是相同的，而且与Proxy对象的方法是一一对应的。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Set和Map</title>
    <link href="/2022/02/17/javascript/es6-set-and-map/"/>
    <url>/2022/02/17/javascript/es6-set-and-map/</url>
    
    <content type="html"><![CDATA[<h1 id="Set和Map"><a href="#Set和Map" class="headerlink" title="Set和Map"></a>Set和Map</h1><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>类似与数组结构，但是数组中的成员值时唯一不重复的。跟Java中的Set是同样的意思。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br><br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>].<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> s.<span class="hljs-title function_">add</span>(x));<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><span class="hljs-comment">// 2 3 5 4</span><br></code></pre></td></tr></table></figure><p>也可以结合扩展运算符写成下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]);<br>[...set] <span class="hljs-comment">// 1 2 3 4 5</span><br>set.<span class="hljs-title function_">size</span>() <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h3 id="实例的属性和方法"><a href="#实例的属性和方法" class="headerlink" title="实例的属性和方法"></a>实例的属性和方法</h3><p>除了构造函数以及返回size的大小，还有下面4个操作的方法：使用基本和Java相同</p><ul><li>add(value)：添加某个值，返回Set结构本身</li><li>delete(value)：删除某个值，返回一个布尔值，表示是否删除成功；</li><li>has(value)：返回一个布尔值，表示该值是否为Set成员</li><li>clear()：清除所有成员，没返回值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>s.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>);<br><br>s.<span class="hljs-property">size</span> <span class="hljs-comment">// 2</span><br><br>s.<span class="hljs-title function_">has</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// true</span><br>s.<span class="hljs-title function_">has</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// true</span><br>s.<span class="hljs-title function_">has</span>(<span class="hljs-number">3</span>) <span class="hljs-comment">// false</span><br><br>s.<span class="hljs-title function_">delete</span>(<span class="hljs-number">2</span>);<br>s.<span class="hljs-title function_">has</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h3 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h3><p>遍历器包含下面4个方法，可以用于遍历成员，结合Lambda表示可以有十分简洁的写法，跟Java 8的lambda表达式差不多，这里不再赘述。</p><ul><li>keys()：返回键名的遍历器</li><li>values()：返回键值的遍历器</li><li>entries()：返回键值对的遍历器</li><li>forEach()：使用回调函数遍历每个成员</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">keys</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-title function_">values</span>()) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br><span class="hljs-comment">// red</span><br><span class="hljs-comment">// green</span><br><span class="hljs-comment">// blue</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> set.<span class="hljs-property">entries</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)<br>&#125;<br><span class="hljs-comment">// [&#x27;red&#x27;, &#x27;red&#x27;]</span><br><span class="hljs-comment">// [&#x27;green&#x27;, &#x27;green&#x27;]</span><br><span class="hljs-comment">// [&#x27;blue&#x27;, &#x27;blue&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>从名字上看，WeakSet也是Set的一种，但是跟Set有下列几个区别：</p><ul><li>成员只能是对象，不能是其他类型的值；</li><li>集合内的对象全都是弱引用，GC不会考虑对WeakSet中的对象的引用，因此WeakSet是不可遍历的。</li></ul><p>你可能会问，WeakSet的这种特性有什么用呢？由于不能遍历且内存中的对象随时会丢失，因此十分适合存储DOM节点，而不用担心这些节点从文档移除时引发内存泄露。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> foos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakSet</span>();<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">foo</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    foos.<span class="hljs-title function_">add</span>(<span class="hljs-variable language_">this</span>);<br>  &#125;<br>  <br>  <span class="hljs-title function_">method</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!foos.<span class="hljs-title function_">has</span>(<span class="hljs-variable language_">this</span>)) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeError</span>(<span class="hljs-string">&#x27;Foo.prototype.method智能在Foo实例上调用!&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h3><p>JavaScript的对象本质上也是键值对的集合，但是传统上只能用字符串当键。因为ES6提供了Map这个对象。概念跟Java中的差不多。与JavaScript中对象唯一不同的是：它的键不仅限于字符串，还可以是其他类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br><span class="hljs-keyword">var</span> o = &#123;<span class="hljs-attr">p</span>: <span class="hljs-string">&#x27;Hello World&#x27;</span>&#125;;<br><br>m.<span class="hljs-title function_">set</span>(o, <span class="hljs-string">&#x27;content&#x27;</span>)<br>m.<span class="hljs-title function_">get</span>(o)<br><br>m.<span class="hljs-title function_">has</span>(o)<br>m.<span class="hljs-title function_">delete</span>(o)<br>m.<span class="hljs-title function_">has</span>(o)<br></code></pre></td></tr></table></figure><p>与此同时，Map也可以接受一个数组作为参数。该数组的成员是一个个表示键值对的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;zhangsan&#x27;</span>],<br>    [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;Author&#x27;</span>]<br>]);<br><br>map.<span class="hljs-property">size</span> <span class="hljs-comment">// 2</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>) <span class="hljs-comment">// zhangsan</span><br>map.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;title&#x27;</span>) <span class="hljs-comment">// true</span><br>map.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;title&#x27;</span>) <span class="hljs-comment">// Author</span><br></code></pre></td></tr></table></figure><h3 id="实例的属性和方法-1"><a href="#实例的属性和方法-1" class="headerlink" title="实例的属性和方法"></a>实例的属性和方法</h3><p>跟上面提到的Set一样，Map也有属于自己的实例属性和方法。</p><ul><li>size：返回Map结构的成员总数</li><li>set(key, value)：设置key对应的键值，然后返回整个Map结构。如果key已经有值，则键值会被更新；</li><li>get(key)：读取key对应的键值，如果找不到则返回undefined；</li><li>has(key)：返回一个布尔值，表示某个键是否在Map数据结构中；</li><li>delete(key)：删除某个键，返回true，如果删除失败则返回false；</li><li>clear()：清除所有成员，没有返回值；</li></ul><h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><p>Map提供了三个原生的遍历器生成函数和一个遍历方法，这个和之前的Set很相似；</p><ul><li>keys()：返回键名的遍历器</li><li>values()：返回键值的遍历器</li><li>entries()：返回所有成员的遍历器</li><li>forEach()：返回Map的所有成员</li></ul><p>下面提供一个实例的使用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;no&#x27;</span>],<br>    [<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;yes&#x27;</span>]<br>]);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">keys</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">values</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">entries</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> map.<span class="hljs-title function_">entries</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, value)<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> map) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key, value)<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，使用扩展运算符可以将Map快速转换为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>([<br>    [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;one&#x27;</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;two&#x27;</span>],<br>    [<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;three&#x27;</span>]<br>]);<br><br>[...map.<span class="hljs-title function_">keys</span>()]<br><span class="hljs-comment">// [1, 2, 3]</span><br><br>[...map.<span class="hljs-title function_">values</span>()]<br><span class="hljs-comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]</span><br><br>[...map.<span class="hljs-title function_">entries</span>()]<br><span class="hljs-comment">// [[1, &#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span><br><br>[...map]<br><span class="hljs-comment">// [[1, &#x27;one&#x27;], [2, &#x27;two&#x27;], [3, &#x27;three&#x27;]]</span><br></code></pre></td></tr></table></figure><p>结合map和Filter等方法可以实现更加方便简洁的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> map0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>.<span class="hljs-title function_">set</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br>.<span class="hljs-title function_">set</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;b&#x27;</span>)<br>.<span class="hljs-title function_">set</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;c&#x27;</span>);<br><br><span class="hljs-keyword">let</span> map1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(<br>[...map0].<span class="hljs-title function_">filter</span>([k, v] =&gt; k &lt; <span class="hljs-number">3</span>)<br>);<br><br><span class="hljs-keyword">let</span> map2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(<br>[...map0].<span class="hljs-title function_">map</span>([k, v] =&gt; [k * <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;_&#x27;</span> + v])<br>);<br></code></pre></td></tr></table></figure><p>此外，还有forEach方法，可以实现遍历。效果和Set上的forEach完全一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">map.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">key, value, map</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;key: %s, value: %s&quot;</span>, key, value);<br>&#125;);<br><br><span class="hljs-comment">// 还可以绑定this</span><br>map.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">key, value, map</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">report</span>(key, value);<br>&#125;, reporter);<br></code></pre></td></tr></table></figure><h3 id="与其他数据结构的互相转换"><a href="#与其他数据结构的互相转换" class="headerlink" title="与其他数据结构的互相转换"></a>与其他数据结构的互相转换</h3><h3 id="Map转数组"><a href="#Map转数组" class="headerlink" title="Map转数组"></a>Map转数组</h3><p>前面已经提到，使用扩展运算符可以很好地将Map转换成数组，这里不再赘述；</p><h3 id="数组转Map"><a href="#数组转Map" class="headerlink" title="数组转Map"></a>数组转Map</h3><p>将数组作为参数传入Map的构造函数，就可以将数组转换为Map</p><h3 id="Map转对象"><a href="#Map转对象" class="headerlink" title="Map转对象"></a>Map转对象</h3><p>如果Map中的所有键都是字符串，那么就可以将其转换为对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">strMapToObj</span>(<span class="hljs-params">strMap</span>) &#123;<br>    <span class="hljs-keyword">let</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [k, v] <span class="hljs-keyword">of</span> strMap) &#123;<br>        obj[k] = v;<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>().<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;yes&#x27;</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;no&#x27;</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-title function_">strMapToObj</span>(myMap)<br></code></pre></td></tr></table></figure><h3 id="对象转Map"><a href="#对象转Map" class="headerlink" title="对象转Map"></a>对象转Map</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">objToStrMap</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">let</span> strMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)) &#123;<br>        strMap.<span class="hljs-title function_">set</span>(k, obj[k]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> strMap;<br>&#125;<br><br><span class="hljs-title function_">objToStrMap</span>(&#123;<span class="hljs-attr">yes</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">no</span>: <span class="hljs-literal">false</span>&#125;)<br></code></pre></td></tr></table></figure><h3 id="Map转JSON"><a href="#Map转JSON" class="headerlink" title="Map转JSON"></a>Map转JSON</h3><p>Map转JSON要分为两种情况：如果键名都是字符串，那么可以直接转成JSON；如果键名中有非字符串，这时可以选择转为数组JSON。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Map --&gt; JSON (1)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">strMapToJson</span>(<span class="hljs-params">strMap</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title function_">strMapToObj</span>(strMap));<br>&#125;<br><br><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>().<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;yes&#x27;</span>, <span class="hljs-literal">true</span>).<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;no&#x27;</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-title function_">strMapToJson</span>(myMap)<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mapToArrayJson</span>(<span class="hljs-params">map</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>([...map]);<br>&#125;<br><span class="hljs-keyword">let</span> myMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>().<span class="hljs-title function_">set</span>(<span class="hljs-literal">true</span>, <span class="hljs-number">7</span>).<span class="hljs-title function_">set</span>(&#123;<span class="hljs-attr">foo</span>: <span class="hljs-number">3</span>&#125;, [<span class="hljs-string">&#x27;abc&#x27;</span>]);<br><span class="hljs-title function_">mapToArrayJson</span>(myMap)<br></code></pre></td></tr></table></figure><h3 id="JSON转Map"><a href="#JSON转Map" class="headerlink" title="JSON转Map"></a>JSON转Map</h3><p>跟上面的情况一样：所有键名都是字符串，随便转；另外一个：整个JSON就是数组，每个数组成员本身又只有一个两个成员的数组。这个时候可以一一对应转换为Map。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonToMap</span>(<span class="hljs-params">jsonStr</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(jsonStr));<br>&#125;<br><br><span class="hljs-title function_">jsonToMap</span>(<span class="hljs-string">&#x27;[[true, 7], [&#123;&quot;foo&quot;:3&#125;, [&quot;abc&quot;]]]&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><p>WeakMap和Map基本类似，唯一区别就是：它只接受对象作为键名，不接受其他类型的值作为键名，而且键名所指向的对象不计入垃圾回收机制。跟WeakSet一样，设计它的目的有助于防止内存泄露：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> myElement = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;logo&#x27;</span>);<br><span class="hljs-keyword">let</span> myWeakMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><br>myWeakMap.<span class="hljs-title function_">set</span>(myElement, &#123;<span class="hljs-attr">timesClicked</span>: <span class="hljs-number">0</span>&#125;);<br><br>myElement.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">let</span> logoData = myWeakMap.<span class="hljs-title function_">get</span>(myElement);<br>    logoData.<span class="hljs-property">timesClicked</span> ++;<br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>上述代码设计了一个机制：每当DOM中节点发生click事件，就更新一下状态。一旦这个DOM节点删除，该状态就会自动消失，不会存在内存泄露的风险。</p><p>WeakMap的另一个作用就是部署私有属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> _counter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><span class="hljs-keyword">let</span> _action = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakMap</span>();<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Countdown</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">counter, action</span>) &#123;<br>        _counter.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>, counter);<br>        _action.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>, action);<br>    &#125;<br>    <span class="hljs-title function_">dec</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> counter = _counter.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>);<br>        <span class="hljs-keyword">if</span> (counter &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br>        counter--;<br>        _counter.<span class="hljs-title function_">set</span>(<span class="hljs-variable language_">this</span>, counter);<br>        <span class="hljs-keyword">if</span> (counter === <span class="hljs-number">0</span>) &#123;<br>            _action.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>)();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> c = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Countdown</span>(<span class="hljs-number">2</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;DONE&#x27;</span>));<br><br>c.<span class="hljs-title function_">dec</span>()<br>c.<span class="hljs-title function_">dec</span>()<br><span class="hljs-comment">// DONE</span><br></code></pre></td></tr></table></figure><p>上面代码中，Countdown类的两个内部属性<code>_counter</code>和<code>_action</code>是实例的弱引用，所以如果删除实例，它们也就随之消失。不会造成内存泄露。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 Symbol</title>
    <link href="/2022/02/17/javascript/es6-symbol/"/>
    <url>/2022/02/17/javascript/es6-symbol/</url>
    
    <content type="html"><![CDATA[<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>ES5的对象属性名都是字符串，这容易造成属性名的冲突。如果存在一种机制，能够保证每个属性的名字都是独一无二的就可以解决这个问题。因此ES6中引入了Symbol。</p><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值。可以称之为JavaScript的第七种数据类型。</p><p>Symbol是通过symbol函数生成的。也就是说，对象的属性名可以有两种类型，一种是原来就有的字符串，另一种是新增的Symbol类型。凡是属性名属于Symbol的，就是独一无二的，可以保证不会与其他属性名发生冲突。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">typeof</span> s <span class="hljs-comment">// symbol</span><br></code></pre></td></tr></table></figure><p><code>Symbol</code>函数可以接收一个字符串作为参数，表示对Symbol实例的描述，主要是为了在控制台显示或者是转为字符串的过程中方便区分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);<br><br>s1 <span class="hljs-comment">// Symbol(foo)</span><br>s2 <span class="hljs-comment">// Symbol(bar)</span><br><br>s1.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(foo)&quot;</span><br>s2.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(bar)&quot;</span><br></code></pre></td></tr></table></figure><p>如果Symbol的参数是一个对象，那么就会调用该对象的<code>toString()</code>方法，将其转换为字符串，然后才生成一个Symbol值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;abc&#x27;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> sym = <span class="hljs-title class_">Symbol</span>(obj);<br>sym <span class="hljs-comment">// Symbol(abc)</span><br></code></pre></td></tr></table></figure><p>Symbol值不能与其他类型的值进行运算，会报错；但是却可以显式转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> sym = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;My Symbol&#x27;</span>);<br><br><span class="hljs-string">&quot;your symbol is &quot;</span> + sym <span class="hljs-comment">// Error</span><br><br><span class="hljs-title class_">String</span>(sym); <span class="hljs-comment">// Symbol(&#x27;My symbol&#x27;)</span><br>sym.<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// Symbol(My symbol)</span><br></code></pre></td></tr></table></figure><h2 id="作为属性名的Symbol"><a href="#作为属性名的Symbol" class="headerlink" title="作为属性名的Symbol"></a>作为属性名的Symbol</h2><p>由于每一个Symbol值都是不相等的，这意味着Symbol可以作为标识符，用在对象的属性名，就能保证不会出现同名的属性。可以防止某一个键被不小心改写或覆盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br>a[mySymbol] = <span class="hljs-string">&#x27;Hello!&#x27;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;<br>    [mySymbol]: <span class="hljs-string">&#x27;Hello&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(a, mySymbol, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello&#x27;</span> &#125;);<br><br>a[mySymbol] <span class="hljs-comment">// &quot;Hello&quot;</span><br></code></pre></td></tr></table></figure><p>Symbol值作为对象属性名时，不能用作点运算符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><br>a.<span class="hljs-property">mySymbol</span> = <span class="hljs-string">&#x27;Hello&#x27;</span>;<br>a[mySymbol] <span class="hljs-comment">// undefined</span><br>a[<span class="hljs-string">&#x27;mySymbol&#x27;</span>] <span class="hljs-comment">// Hello</span><br></code></pre></td></tr></table></figure><p>Symbol类型还可以用于定义一组常量，保证这组常量的值都是不相等的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">log.<span class="hljs-property">levels</span> = &#123;<br>    <span class="hljs-attr">DEBUG</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;debug&#x27;</span>),<br>    <span class="hljs-attr">INFO</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;info&#x27;</span>),<br>    <span class="hljs-attr">WARN</span>: <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;warn&#x27;</span>)<br>&#125;;<br><br><span class="hljs-title function_">log</span>(log.<span class="hljs-property">levels</span>.<span class="hljs-property">DEBUG</span>, <span class="hljs-string">&#x27;debug message&#x27;</span>);<br><span class="hljs-title function_">log</span>(log.<span class="hljs-property">levels</span>.<span class="hljs-property">INFO</span>, <span class="hljs-string">&#x27;info message&#x27;</span>);<br></code></pre></td></tr></table></figure><p>还有一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> shapeType = &#123;<br>    <span class="hljs-attr">triangle</span>: <span class="hljs-title class_">Symbol</span>()<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getArea</span>(<span class="hljs-params">shape, options</span>) &#123;<br>    <span class="hljs-keyword">var</span> area = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">switch</span>(shape) &#123;<br>        <span class="hljs-keyword">case</span> shapeType.<span class="hljs-property">triangle</span>:<br>            area = <span class="hljs-number">.5</span> * options.<span class="hljs-property">width</span> * options.<span class="hljs-property">height</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> area;<br>&#125;<br><br><span class="hljs-title function_">getArea</span>(shapeType.<span class="hljs-property">triangle</span>, &#123;<span class="hljs-attr">width</span>: <span class="hljs-number">100</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">100</span>&#125;); <span class="hljs-comment">// 5000</span><br></code></pre></td></tr></table></figure><h2 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h2><p>Symbol作为属性名，不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。但是，它也不是私有属性，有一个<code>Object.getOwnPropertySymbols</code>方法，可以获取指定对象的所有Symbol属性名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br><span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;b&#x27;</span>);<br><br>obj[a] = <span class="hljs-string">&#x27;Hello&#x27;</span>;<br>obj[b] = <span class="hljs-string">&#x27;World&#x27;</span>;<br><br><span class="hljs-keyword">var</span> objectSymbols = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj);<br><br>objSymbols <span class="hljs-comment">// [Symbol(a), Symbol(b)]</span><br></code></pre></td></tr></table></figure><p>由于以Symbol值作为名称的属性，不会被常规方法遍历得到。因此可以利用这个特性，为对象定义一些非私有的、但又希望只用于内部的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> size = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;size&#x27;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Collection</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>[size] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">item</span>) &#123;<br>        <span class="hljs-variable language_">this</span>[<span class="hljs-variable language_">this</span>[size]] = item;<br>        <span class="hljs-variable language_">this</span>[size]++;<br>    &#125;<br>    <br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">sizeOf</span>(<span class="hljs-params">instance</span>) &#123;<br>        <span class="hljs-keyword">return</span> instance[size];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Collection</span>();<br><span class="hljs-title class_">Collection</span>.<span class="hljs-title function_">sizeOf</span>(x) <span class="hljs-comment">// 0</span><br><br>x.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-title class_">Collection</span>.<span class="hljs-title function_">sizeOf</span>(x) <span class="hljs-comment">// 1</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(x) <span class="hljs-comment">// [&#x27;0&#x27;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(x) <span class="hljs-comment">// [&#x27;0&#x27;]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(x) <span class="hljs-comment">// [Symbol(size)]</span><br></code></pre></td></tr></table></figure><h2 id="Symbol-for-Symbol-keyFor"><a href="#Symbol-for-Symbol-keyFor" class="headerlink" title="Symbol.for(), Symbol.keyFor()"></a>Symbol.for(), Symbol.keyFor()</h2><p>有时候希望重新使用同一个Symbol值，<code>Symbol.for</code>可以做到这一点。其接受一个字符串为参数，然后搜索有没有已该参数作为名称的Symbol值，有就返回，没有就以这个名称创建一个Symbol值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s1 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)<br>s1 === s2 <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><code>Symbol.keyFor</code>方法返回一个已经登记的Symbol类型值的<code>key</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s1 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">keyFor</span>(s1) <span class="hljs-comment">// foo</span><br><br><span class="hljs-keyword">var</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;Foo&quot;</span>);<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">keyFor</span>(s2) <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><h3 id="模块的单例模式"><a href="#模块的单例模式" class="headerlink" title="模块的单例模式"></a>模块的单例模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">FOO_KEY</span> = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">A</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">foo</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">global</span>[<span class="hljs-variable constant_">FOO_KEY</span>]) &#123;<br>  <span class="hljs-variable language_">global</span>[<span class="hljs-variable constant_">FOO_KEY</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title function_">A</span>();<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-variable language_">global</span>[<span class="hljs-variable constant_">FOO_KEY</span>];<br></code></pre></td></tr></table></figure><p>上面的代码中，可以保证<code>global[FOO_KEY]</code>不会被无意间覆盖，但还是可以被改写。</p><h2 id="内置的Symbol值"><a href="#内置的Symbol值" class="headerlink" title="内置的Symbol值"></a>内置的Symbol值</h2><p>除了定义自己使用的Symbol值以外，ES6还提供了11个内置的Symbol值，指向语言内部使用的方法。</p><h3 id="Symbol-hasInstance"><a href="#Symbol-hasInstance" class="headerlink" title="Symbol.hasInstance"></a>Symbol.hasInstance</h3><p>指向一个内部方法。当其他对象使用<code>instanceof</code>运算符，判断是否为该对象的实例时，会调用此方法。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">hasIntance</span>](foo) &#123;<br>    <span class="hljs-keyword">return</span> foo <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>;<br>  &#125;<br>&#125;<br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>() <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-isConcatSpreadable"><a href="#Symbol-isConcatSpreadable" class="headerlink" title="Symbol.isConcatSpreadable"></a>Symbol.isConcatSpreadable</h3><p>等于一个布尔值，表示该对象使用<code>Array.prototype.concat()</code>时，是否可以展开。默认情况下是可以展开的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>];<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">concat</span>(arr1, <span class="hljs-string">&#x27;e&#x27;</span>] <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span><br>arr1[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>];<br>arr2[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">isConcatSpreadable</span>] = <span class="hljs-literal">false</span>;<br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">concat</span>(arr2, <span class="hljs-string">&#x27;e&#x27;</span>] <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, [&#x27;c&#x27;, &#x27;d&#x27;], &#x27;e&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-species"><a href="#Symbol-species" class="headerlink" title="Symbol.species"></a>Symbol.species</h3><p>指向一个方法，该对象作为构造函数创造实例时，会调用这个方法，如果<code>this.constructor[Symbol.species]</code>存在，会使用这个属性作为构造函数，来创造新的实例对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 默认读取器如下</span><br><span class="hljs-keyword">static</span> get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">species</span>] &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Symbol-match"><a href="#Symbol-match" class="headerlink" title="Symbol.match"></a>Symbol.match</h3><p>指向一个函数，当执行<code>str.match(myObject)</code>时，如果该属性存在，会调用它，返回该方法的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">match</span>(regexp);<br><span class="hljs-comment">// 等同于</span><br>regexp[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">match</span>](<span class="hljs-variable language_">this</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyMatcher</span> &#123;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">match</span>](string) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello world&#x27;</span>.<span class="hljs-title function_">indexOf</span>(string);<br>  &#125;<br>&#125;<br><br><span class="hljs-string">&#x27;e&#x27;</span>.<span class="hljs-title function_">match</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyMatcher</span>()]; <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-replace"><a href="#Symbol-replace" class="headerlink" title="Symbol.replace"></a>Symbol.replace</h3><p>指向一个方法，当该对象被<code>Symbol.prototype.replace</code>方法调用时，会返回该方法的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">replace</span>(searchValue, replaceValue);<br><span class="hljs-comment">// 等同于</span><br>searchValue[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">replace</span>](<span class="hljs-variable language_">this</span>, replaceValue);<br></code></pre></td></tr></table></figure><p>下面有一个例子说明这个问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> x = &#123;&#125;;<br>x[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">replace</span>] = &#123;...s&#125; =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(s);<br><br><span class="hljs-string">&#x27;Hello&#x27;</span>.<span class="hljs-title function_">replace</span>(x, <span class="hljs-string">&#x27;World&#x27;</span>) <span class="hljs-comment">// [&quot;Hello&quot;, &quot;World&quot;]</span><br></code></pre></td></tr></table></figure><p>第一个参数是replace方法正在坐拥的对象，第二个参数替换后的值。</p><h3 id="Symbol-search"><a href="#Symbol-search" class="headerlink" title="Symbol.search"></a>Symbol.search</h3><p>指向一个方法，当该对象被<code>String.prototype.search</code>方法调用时，会返回该方法的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">search</span>(regexp);<br><span class="hljs-comment">// 等同于</span><br>regexp[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">search</span>](<span class="hljs-variable language_">this</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySearch</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value;<br>  &#125;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">search</span>](string) &#123;<br>    <span class="hljs-keyword">return</span> string.<span class="hljs-title function_">indexOf</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>);<br>  &#125;<br>&#125;<br><span class="hljs-string">&#x27;foobar&#x27;</span>.<span class="hljs-title function_">search</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MySearch</span>(<span class="hljs-string">&#x27;foo&#x27;</span>)) <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-split"><a href="#Symbol-split" class="headerlink" title="Symbol.split"></a>Symbol.split</h3><p>指向一个方法，当该对象被<code>String.prototype.split</code>方法调用时，会返回该方法的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">split</span>(separator, limit);<br><span class="hljs-comment">// 等同于</span><br>separator[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">split</span>](<span class="hljs-variable language_">this</span>, limit);<br></code></pre></td></tr></table></figure><h3 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h3><p>指向该对象的默认遍历方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myIterable = &#123;&#125;;<br>myIterable[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>] = <span class="hljs-keyword">function</span>* () &#123;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;;<br><br>[...myIterable] <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h3><p>指向一个方法。该对象被转化为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</p><p>该方法被调用时，会接受一个字符串参数，表示当前运算的模式，共有三种模式：</p><ul><li>Number：该场合需要转换成数值</li><li>String：该场合需要转换成字符串</li><li>Defaul：该场合既可以转换成数值，也可以转换成字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toPrimitive</span>](hint) &#123;<br>    <span class="hljs-keyword">switch</span>(hint) &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;number&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">123</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;string&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;str&#x27;</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;default&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;default&#x27;</span>;<br>      <span class="hljs-attr">default</span>:<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>();<br>    &#125;<br>  &#125;<br>&#125;;<br><br><span class="hljs-number">2</span> * obj <span class="hljs-comment">// 246</span><br><span class="hljs-number">3</span> + obj <span class="hljs-comment">// 3default</span><br>obj == <span class="hljs-string">&#x27;default&#x27;</span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">String</span>(obj) <span class="hljs-comment">// str</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h3><p>指向一个方法，在该对象上面调用<code>Object.prototye.toString</code>方法时，如果这个属性存在，它的返回值会出现在<code>toString</code>方法返回的字符串之中，表示对象的类型。这个属性可以用于定制<code>[object Object]</code>或者<code>[object Array]</code>中<code>object</code>后面的那个字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(&#123;[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]: <span class="hljs-string">&#x27;Foo&#x27;</span>&#125;.<span class="hljs-title function_">toString</span>())<br><span class="hljs-comment">// [object Object]</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Collection</span> &#123;<br>  get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">toStringTag</span>]() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;xxx&#x27;</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Collection</span>();<br><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(x); <span class="hljs-comment">// [object xxx]</span><br></code></pre></td></tr></table></figure><h3 id="Symbol-unscopables"><a href="#Symbol-unscopables" class="headerlink" title="Symbol.unscopables"></a>Symbol.unscopables</h3><p>指向一个对象。该对象指定了使用<code>with</code>关键字时，哪些属性会被<code>with</code>环境排除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">unscopables</span>]<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">unscopables</span>])<br></code></pre></td></tr></table></figure><p>上面的代码说明，数组有6个属性，会被<code>with</code>命令排除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;&#125;<br><br><span class="hljs-keyword">with</span> [<span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>] &#123;<br>  <span class="hljs-title function_">foo</span>();<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span> &#123;<br>  <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>  get [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">unscopables</span>]() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">foo</span>: <span class="hljs-literal">true</span>&#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;&#125;<br><span class="hljs-keyword">with</span> (<span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) &#123;<br>  <span class="hljs-title function_">foo</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 对象扩展</title>
    <link href="/2022/02/17/javascript/es6-object-expand/"/>
    <url>/2022/02/17/javascript/es6-object-expand/</url>
    
    <content type="html"><![CDATA[<h1 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h1><h2 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h2><p>ES6允许直接写入变量和函数，作为对象的属性和方法。这样书写更加简洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br><span class="hljs-keyword">var</span> baz = &#123;foo&#125;;<br>baz <span class="hljs-comment">// &#123;foo: &quot;bar&quot;&#125;</span><br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">var</span> baz = &#123;<span class="hljs-attr">foo</span>: foo&#125;;<br></code></pre></td></tr></table></figure><p>除了属性可以简写，方法也可以简写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-title function_">method</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 等同于</span><br><br><span class="hljs-keyword">var</span> o = &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>适用于函数返回值，写起来会非常简洁和方便</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPoint</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> y = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">return</span> &#123;x, y&#125;;<br>&#125;<br><br><span class="hljs-title function_">getPoint</span>() <span class="hljs-comment">// &#123;x: 1, y: 10&#125;</span><br></code></pre></td></tr></table></figure><p>在使用Common JS中，输出的代码非常适合使用这种简洁写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ms = &#123;&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getItem</span>(<span class="hljs-params">key</span>) &#123;<br>    <span class="hljs-keyword">return</span> key <span class="hljs-keyword">in</span> ms ? ms[key] : <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setItem</span>(<span class="hljs-params">key, value</span>) &#123;<br>    ms[key] = value;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;<br>    ms = &#123;&#125;;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123; getItem, setItem, clear &#125;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">getItem</span>: getItem,<br>    <span class="hljs-attr">setItem</span>: setItem,<br>    <span class="hljs-attr">clear</span>: clear<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h2><p>JavaScript语言定义对象的属性，有如下种方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">obj.<span class="hljs-property">foo</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 直接使用标识符作为属性名</span><br><br>obj[<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-string">&#x27;bc&#x27;</span>] = <span class="hljs-number">123</span>; <span class="hljs-comment">// 使用表达式作为属性名</span><br></code></pre></td></tr></table></figure><p>ES6允许字面量定义对象时，用方法二作为对象的属性名，即将表达式放在括号内</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> propKey = <span class="hljs-string">&#x27;foo&#x27;</span>;<br><br><span class="hljs-keyword">let</span> obj = &#123;<br>    [propKey]: <span class="hljs-literal">true</span>,<br>    [<span class="hljs-string">&#x27;a&#x27;</span> + <span class="hljs-string">&#x27;bc&#x27;</span>]: <span class="hljs-number">123</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里再举一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> lastWord = <span class="hljs-string">&#x27;last word&#x27;</span>;<br><br><span class="hljs-keyword">var</span> a = &#123;<br>    <span class="hljs-string">&#x27;first word&#x27;</span>: <span class="hljs-string">&#x27;hello&#x27;</span>,<br>    [lastWord]: <span class="hljs-string">&#x27;world&#x27;</span><br>&#125;;<br><br>a[<span class="hljs-string">&#x27;first Word&#x27;</span>] <span class="hljs-comment">// hello</span><br>a[lastWord] <span class="hljs-comment">// World</span><br>a[<span class="hljs-string">&#x27;last word&#x27;</span>] <span class="hljs-comment">// World</span><br></code></pre></td></tr></table></figure><p>注意：属性名表达式如果是一个对象，默认情况下会自动将对象转换为字符串。因此属性名表达式和简洁表示法不可以同时使用。一定要注意。</p><h2 id="方法的name属性"><a href="#方法的name属性" class="headerlink" title="方法的name属性"></a>方法的<code>name</code>属性</h2><p>函数的<code>name</code>属性返回函数名。对象方法也是函数，因此也有<code>name</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-title function_">sayName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;,<br>    <span class="hljs-comment">// get为取值函数，存值用set</span><br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">firstName</span>() &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Nicholas&quot;</span>;<br>    &#125;<br>&#125;;<br><br>person.<span class="hljs-property">sayName</span>.<span class="hljs-property">name</span> <span class="hljs-comment">// sayName</span><br>person.<span class="hljs-property">firstName</span>.<span class="hljs-property">name</span> <span class="hljs-comment">// get firstName</span><br></code></pre></td></tr></table></figure><p>有两个特例：如果是<code>bind</code>函数，函数名返回<code>bound</code> + 函数名称；如果是<code>function</code>关键字构造的函数（匿名函数），<code>name</code>属性值返回<code>anonymous</code>。</p><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a><code>Object.is()</code></h2><p>该方法用来比较两个值是否严格相等，与严格比较运算符<code>===</code>的作用一致。不同之处有两个：+0不等于-0；另一个是NaN等于自身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">+<span class="hljs-number">0</span> === -<span class="hljs-number">0</span> <span class="hljs-comment">// true</span><br><span class="hljs-title class_">NaN</span> === <span class="hljs-title class_">NaN</span> <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(+<span class="hljs-number">0</span>, -<span class="hljs-number">0</span>); <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">is</span>(<span class="hljs-title class_">NaN</span>, <span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a><code>Object.assign()</code></h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>用于将对象合并，将源对象的所有可枚举属性赋值到目标对象。如果目标对象与源对象由同名属性，或多个源对象由同名属性，则后面的属性会覆盖前面的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> target = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><br><span class="hljs-keyword">var</span> source1 = &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">var</span> source2 = &#123; <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, source1, source2);<br>target <span class="hljs-comment">// &#123; a: 1, b: 2, c: 3 &#125;</span><br></code></pre></td></tr></table></figure><p>如果只有一个参数，会直接返回该参数；如果该参数不是对象，会先转换为对象，然后返回。由于<code>undefined</code>和<code>null</code>无法转换为对象，所以将它们作为参数传入会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(obj) === obj <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">typeof</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// object</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-literal">undefined</span>) <span class="hljs-comment">// error</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-literal">null</span>) <span class="hljs-comment">// error</span><br></code></pre></td></tr></table></figure><p>如果<code>undefined</code>和<code>null</code>出现在非首参数，首先会尝试着转换为对象，如果转换失败会直接跳过。这意味着只要首参数可以转换为对象，就不会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(a, <span class="hljs-literal">undefined</span>) === obj <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(a, <span class="hljs-literal">null</span>) === obj <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>其他类型的值中，只有字符串会以数组的形式拷贝至对象中，其他值都不会产生效果；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> v1 = <span class="hljs-string">&#x27;abc&#x27;</span>;<br><span class="hljs-keyword">var</span> v2 = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">var</span> v3 = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, v1, v2, v3);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj); <span class="hljs-comment">// &#123;&#x27;0&#x27;: &#x27;a&#x27;, &#x27;1&#x27;: &#x27;b&#x27;, &#x27;2&#x27;: &#x27;c&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p><code>Object.assign()</code>拷贝的属性是有限制的，只拷贝源对象的自身属性（不拷贝继承属性），也不拷贝不可枚举的属性（<code>enumerable: false</code>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;<span class="hljs-attr">b</span>: <span class="hljs-string">&#x27;c&#x27;</span>&#125;, <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(&#123;&#125;, <span class="hljs-string">&#x27;invisible&#x27;</span>, &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;)<br>)<br><span class="hljs-comment">// &#123;b: &#x27;c&#x27;&#125;</span><br></code></pre></td></tr></table></figure><p>值得注意的是：<code>Object.assign()</code>执行的是浅拷贝，而不是深拷贝。如果源对象某个属性的值是对象，那么目标对象拷贝得到的仅仅是这个对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj1 = &#123;<span class="hljs-attr">a</span>: &#123;<span class="hljs-attr">b</span>: <span class="hljs-number">1</span>&#125;&#125;;<br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, obj1);<br><br>obj1.<span class="hljs-property">a</span>.<span class="hljs-property">b</span> = <span class="hljs-number">2</span>;<br>obj2.<span class="hljs-property">a</span>.<span class="hljs-property">b</span> <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h3 id="Object-assign-方法有哪些用途呢？"><a href="#Object-assign-方法有哪些用途呢？" class="headerlink" title="Object.assign()方法有哪些用途呢？"></a>Object.assign()方法有哪些用途呢？</h3><h4 id="为对象添加属性"><a href="#为对象添加属性" class="headerlink" title="为对象添加属性"></a>为对象添加属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">x, y</span>) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-variable language_">this</span>, &#123;x, y&#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="为对象添加方法"><a href="#为对象添加方法" class="headerlink" title="为对象添加方法"></a>为对象添加方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;<br>    <span class="hljs-title function_">someMethod</span>(<span class="hljs-params">arg1, arg2</span>) &#123;<br>        ...<br>    &#125;,<br>    <span class="hljs-title function_">anotherMethod</span>(<span class="hljs-params"></span>) &#123;<br>        ...<br>    &#125;<br>&#125;);<br>        <br><span class="hljs-comment">// 等同于下面的写法</span><br><span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">someMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">arg1, arg2</span>) &#123; ... &#125;;<br><span class="hljs-title class_">SomeClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">anotherMethod</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; ... &#125;;<br></code></pre></td></tr></table></figure><h4 id="克隆对象"><a href="#克隆对象" class="headerlink" title="克隆对象"></a>克隆对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将原始对象拷贝到空对象中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span> (origin) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, origin);<br>&#125;<br><br><span class="hljs-comment">// 将原始对象和其继承的值拷贝到新对象中</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">clone</span> (origin) &#123;<br>    <span class="hljs-keyword">let</span> originProto = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(origin);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(originProto), origin);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="合并多个对象"><a href="#合并多个对象" class="headerlink" title="合并多个对象"></a>合并多个对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将多个对象合并到某个对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> = (<span class="hljs-params">target, ...source</span>) =&gt; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(target, ...source);<br><br><span class="hljs-comment">// 合并后返回一个新对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">merge</span> = (<span class="hljs-params">...source</span>) =&gt; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, ...source);<br></code></pre></td></tr></table></figure><h4 id="为属性指定默认值"><a href="#为属性指定默认值" class="headerlink" title="为属性指定默认值"></a>为属性指定默认值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEFAULTS</span> = &#123;<br>    <span class="hljs-attr">logLevel</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">outputFormat</span>: <span class="hljs-string">&#x27;html&#x27;</span><br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">processContent</span>(<span class="hljs-params">options</span>) &#123;<br>    options = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, <span class="hljs-variable constant_">DEFAULTS</span>, options)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="属性的可枚举性"><a href="#属性的可枚举性" class="headerlink" title="属性的可枚举性"></a>属性的可枚举性</h2><p><code>Object.getOwnPropertyDescriptor(obj, &#39;foo&#39;)</code>方法可以获取该属性的描述对象，其中描述对象有一个<code>enumerable</code>属性，称为“可枚举性”，如果该属性为false，就表示某些操作会忽略当前属性。</p><p>ES6中有下面4个操作会忽略<code>enumerable</code>为false的属性。</p><ul><li><code>for ... in</code> 循环：只遍历对象自身的和继承的可枚举属性；</li><li><code>Object.keys()</code>：返回对象自身的所有可枚举的属性键名；</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举属性；</li><li><code>Object.assign()</code>：只拷贝对象自身的可枚举属性；</li></ul><p>上面4个操作中，只有<code>for ... in</code>会返回继承的属性。实际上引入<code>enumerable</code>的最初目的，就是让某些可以规避掉<code>for...in</code>的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;toString&#x27;</span>).<span class="hljs-property">enumerable</span> <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>([], <span class="hljs-string">&#x27;length&#x27;</span>).<span class="hljs-property">enumerable</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>另外ES6规定，所有Class的原型方法都是不可枚举的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(<span class="hljs-keyword">class</span> &#123;<span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;&#125;&#125;.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;foo&#x27;</span>).<span class="hljs-property">enumerable</span><br></code></pre></td></tr></table></figure><h2 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h2><p>ES6中一共有5种方法可以遍历对象的属性</p><h4 id="（1）for…in"><a href="#（1）for…in" class="headerlink" title="（1）for…in"></a>（1）for…in</h4><p>遍历对象自身和继承的可枚举属性</p><h4 id="（2）Object-keys-obj"><a href="#（2）Object-keys-obj" class="headerlink" title="（2）Object.keys(obj)"></a>（2）Object.keys(obj)</h4><p>返回一个数组，包括对象自身的（不含继承）所有可枚举属性（不包括Symbol属性）</p><h4 id="（3）Object-getOwnPropertyNames-obj"><a href="#（3）Object-getOwnPropertyNames-obj" class="headerlink" title="（3）Object.getOwnPropertyNames(obj)"></a>（3）Object.getOwnPropertyNames(obj)</h4><p>返回一个数组，包含对象自身的所有属性（不包括Symbol属性）</p><h4 id="（4）Object-getOwnPropertySymbols-obj"><a href="#（4）Object-getOwnPropertySymbols-obj" class="headerlink" title="（4）Object.getOwnPropertySymbols(obj)"></a>（4）Object.getOwnPropertySymbols(obj)</h4><p>返回一个数组，包含对象自身的所有Symbol属性</p><h4 id="（5）Reflect-ownKeys-obj"><a href="#（5）Reflect-ownKeys-obj" class="headerlink" title="（5）Reflect.ownKeys(obj)"></a>（5）Reflect.ownKeys(obj)</h4><p>返回一个数组，包含对象自身的所有属性，不管是属性名还是Symbol还是字符串，也不管是否可枚举。</p><p>上面5种方法遍历对象属性，都遵循同样的属性遍历的次序规则。</p><ul><li>首先遍历所有属性名为数值的字符的属性，按照数字排序；</li><li>其次遍历所有属性名为字符串的属性，按照生成时间排序；</li><li>最后遍历所有属性名为Symbol值得属性，按照生成时间排序；</li></ul><p>一句话概括：遍历规则为数值 &gt; 字符串 &gt; Symbol；数值排序规则为数字，剩下两个排序规则为生成顺序；</p><h2 id="proto-属性，Objects-setPrototypeOf-Object-getPrototypeOf"><a href="#proto-属性，Objects-setPrototypeOf-Object-getPrototypeOf" class="headerlink" title="__proto__属性，Objects.setPrototypeOf(), Object.getPrototypeOf()"></a><code>__proto__</code>属性，<code>Objects.setPrototypeOf()</code>, <code>Object.getPrototypeOf()</code></h2><h4 id="proto-属性"><a href="#proto-属性" class="headerlink" title="__proto__属性"></a><code>__proto__</code>属性</h4><p>用来读取或设置当前对象的<code>prototype</code>对象。目前所有浏览器都支持这个特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;...&#125;<br>&#125;;<br>obj.<span class="hljs-property">__proto__</span> = someOtherObj;<br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(someOtherObj);<br>obj.<span class="hljs-property">method</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;...&#125;;<br></code></pre></td></tr></table></figure><p>这里和Python一样，使用双下划线标注的属性内部属性，而不是一个正式对外的API。因此在正式使用时不建议显示的设置。而是用<code>Object.setPrototypeOf()</code>、<code>Object.getPrototypeOf()</code>、<code>Object.create()</code>代替。</p><h4 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a><code>Object.setPrototypeOf()</code></h4><p>用来设置对象的<code>prototype</code>对象。是ES6推荐的设置原型对象的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> proto = &#123;&#125;;<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">10</span>&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(obj, proto);<br><br>proto.<span class="hljs-property">y</span> = <span class="hljs-number">20</span>;<br>proto.<span class="hljs-property">z</span> = <span class="hljs-number">40</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">x</span>) <span class="hljs-comment">// 10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">y</span>) <span class="hljs-comment">// 20</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">z</span>) <span class="hljs-comment">// 40</span><br></code></pre></td></tr></table></figure><h4 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf()"></a><code>Object.getPrototypeOf()</code></h4><p>与上面的set方法相反，用来获取一个对象的prototype对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Rectangle</span> () &#123;<br><br>&#125;<br><br><span class="hljs-keyword">var</span> rec = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(rec) === <span class="hljs-title class_">Rectangle</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// true</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(rec, <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(rec) === <span class="hljs-title class_">Rectangle</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>; <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="Object-values-Object-entries"><a href="#Object-values-Object-entries" class="headerlink" title="Object.values(), Object.entries()"></a><code>Object.values()</code>, <code>Object.entries()</code></h2><h4 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a><code>Object.keys()</code></h4><p>返回一个数组，成员是参数对象自身的所有可遍历属性的键名（不含继承）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)<br><span class="hljs-comment">// [&quot;foo&quot;, &quot;baz&quot;]</span><br></code></pre></td></tr></table></figure><p>目前ES7有一个新提案，引入了跟<code>Object.keys()</code>配套的<code>Object.values</code>和<code>Object.entries</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; keys, values, entries &#125; = <span class="hljs-title class_">Object</span>;<br><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key  <span class="hljs-keyword">of</span> <span class="hljs-title function_">keys</span>(obj)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key);<br>&#125;<br><span class="hljs-comment">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> value <span class="hljs-keyword">of</span> <span class="hljs-title function_">values</span>(obj)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;<br><span class="hljs-comment">// 1, 2, 3</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title function_">entries</span>(obj)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([key, value]);<br>&#125;<br><span class="hljs-comment">//[&#x27;a&#x27;, 1], [&#x27;b&#x27;, 2], [&#x27;c&#x27;, 3]</span><br></code></pre></td></tr></table></figure><h4 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a><code>Object.values()</code></h4><p>返回一个数组，成员是参数对象自身的（不含继承）所有可遍历（enumerable）属性的键值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj);<br><span class="hljs-comment">// [&#x27;baz&#x27;, 42]</span><br></code></pre></td></tr></table></figure><h4 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries"></a><code>Object.entries</code></h4><p>返回一个数组，成员是参数对象自身的（不含继承）所有可遍历属性的键值对数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj);<br><span class="hljs-comment">// [ [ &#x27;foo&#x27;, &#x27;bar&#x27; ], [ &#x27;baz&#x27;, 42 ] ]</span><br></code></pre></td></tr></table></figure><p>基本用途为遍历对象的属性，也可以将对象转换为Map</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">one</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">two</span>: <span class="hljs-number">2</span> &#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [k, v] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj)) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(k)&#125;</span> : <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(v)&#125;</span>`</span>)<br>&#125;<br><span class="hljs-comment">// &quot;one&quot;: 1</span><br><span class="hljs-comment">// &quot;two&quot;: 2</span><br><br><span class="hljs-comment">// 另一个用途是将对象转换为Map</span><br><span class="hljs-keyword">var</span> obj = &#123; <span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-attr">baz</span>: <span class="hljs-number">42</span> &#125;;<br><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj));<br>map <span class="hljs-comment">// Map &#123;foo: &quot;bar&quot;, baz: 42 &#125;</span><br></code></pre></td></tr></table></figure><h2 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h2><p>之前提到过扩展运算符（<code>...</code>），在对象中也有运用。</p><h4 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h4><p>对象的解构赋值用于从一个对象取值，相当于将所有可遍历的、但尚未被读取的属性分配到指定的对象上。所有的键和值，都会拷贝到新对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">4</span> &#125;;<br>x <span class="hljs-comment">// 1</span><br>y <span class="hljs-comment">// 2</span><br>z <span class="hljs-comment">// &#123; a: 3, b: 4 &#125;</span><br></code></pre></td></tr></table></figure><p>解构必须是最后一个参数，否则会报错，这和Java是完全一样的。注意一点：解构赋值时浅拷贝，如果一个键的值是复合类型的值（数组、对象、函数），那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">a</span>: &#123; <span class="hljs-attr">b</span>: <span class="hljs-number">1</span> &#125;&#125;;<br><span class="hljs-keyword">let</span> &#123;...x&#125; = obj;<br>obj.<span class="hljs-property">a</span>.<span class="hljs-property">b</span> = <span class="hljs-number">2</span>;<br>x.<span class="hljs-property">a</span>.<span class="hljs-property">b</span> <span class="hljs-comment">// 2 (浅拷贝无疑了)</span><br></code></pre></td></tr></table></figure><p>另外解构赋值不会拷贝继承自原型对象的属性。下面代码中，对象o3是o2的拷贝，但是只复制了o2自身的属性，没有复制它的原型对象o1的属性。</p><p>解构赋值的一个用处，是扩展某个函数的参数，引入其他操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">baseFunction</span> (&#123;a, b&#125;) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">wrapperFunction</span> (&#123;x, y, ...restConfig&#125;) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">baseFunction</span>(restConfig);<br>&#125;<br></code></pre></td></tr></table></figure><p>扩展运算符（<code>...</code>）用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> z = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">4</span> &#125;;<br><span class="hljs-keyword">let</span> n = &#123; ...z &#125;;<br>n <span class="hljs-comment">// &#123; a: 3, b: 4 &#125;</span><br></code></pre></td></tr></table></figure><p>还可以用于合并两个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ab = &#123; ...a, ...b &#125;;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">let</span> ab = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123;&#125;, a, b);<br></code></pre></td></tr></table></figure><h2 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a><code>Object.getOwnPropertyDescriptors()</code></h2><p>前面提到了：这个方法是用来返回某个对象属性的描述对象的。ES7有个提案：返回指定对象所有自身属性（非继承性——的描述对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">123</span>,<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">bar</span>() &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;abc&#x27;</span> &#125;<br>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescription</span>(obj)<br><br><span class="hljs-comment">// 返回结果如下</span><br>&#123;<br>  <span class="hljs-attr">foo</span>: &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">123</span>, <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-attr">bar</span>: &#123;<br>    <span class="hljs-attr">get</span>: [<span class="hljs-title class_">Function</span>: get bar],<br>    <span class="hljs-attr">set</span>: <span class="hljs-literal">undefined</span>,<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法实现的目的：主要是为了解决<code>Object.assing()</code>无法正确拷贝<code>get</code>属性和<code>set</code>属性的问题。结合<code>Object.defineProperties</code>方法就可以实现正确拷贝。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> source = &#123;<br>    set foo (value) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> target2 = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(target2, <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(source));<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(target2, <span class="hljs-string">&#x27;foo&#x27;</span>)<br><br><span class="hljs-comment">// 返回结果</span><br>&#123;                           <br>  <span class="hljs-attr">get</span>: <span class="hljs-literal">undefined</span>,           <br>  <span class="hljs-attr">set</span>: [<span class="hljs-title class_">Function</span>: set foo], <br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,         <br>  <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>        <br>&#125;                           <br></code></pre></td></tr></table></figure><p>将上面两部分代码合并起来，就是这样。是不是突然觉得眼熟悉？（就是React Thunk的使用方法）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">shallowMerge</span> = (<span class="hljs-params">target, source</span>) =&gt; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(<br>target,<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(source)<br>);<br><br><span class="hljs-comment">// 浅拷贝对象</span><br><span class="hljs-keyword">const</span> clone = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(obj),<br>                           <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj));<br><span class="hljs-keyword">const</span> <span class="hljs-title function_">shallowClone</span> = (<span class="hljs-params">obj</span>) =&gt; <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(obj),<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj)<br>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 函数扩展</title>
    <link href="/2022/02/17/javascript/es6-function-expand/"/>
    <url>/2022/02/17/javascript/es6-function-expand/</url>
    
    <content type="html"><![CDATA[<h1 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h1><h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><p>ES6以前函数参数是不能有默认值的，而ES6中对这个规则进行了修改了，函数参数也可以带默认参数。即直接写在参数定义的后面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">log</span>(<span class="hljs-params">x, y = <span class="hljs-string">&#x27;World&#x27;</span></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y);<br>&#125;<br><br><span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// Hello World</span><br><span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;China&#x27;</span>) <span class="hljs-comment">// Hello China</span><br><span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-comment">// Hello</span><br></code></pre></td></tr></table></figure><p>这样的写法有两个好处：一个是阅读代码的人可以立刻意识到哪些参数是可以省略的，不需要查看函数体；其次有利于代码将来的优化。即便在未来的版本对外接口中，彻底拿掉这个参数也不会导致原有代码无法运行。</p><h3 id="结合解构赋值"><a href="#结合解构赋值" class="headerlink" title="结合解构赋值"></a>结合解构赋值</h3><p>参数默认值当然可以使用前面章节提到的解构特性进行赋值了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">&#123;x, y = <span class="hljs-number">5</span>&#125;</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x, y);<br>&#125;<br><br><span class="hljs-title function_">foo</span>(&#123;&#125;) <span class="hljs-comment">// undefined, 5</span><br><span class="hljs-title function_">foo</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;) <span class="hljs-comment">// 1, 5</span><br><span class="hljs-title function_">foo</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">2</span>&#125;) <span class="hljs-comment">// 1, 2</span><br><span class="hljs-title function_">foo</span>() <span class="hljs-comment">// Error</span><br></code></pre></td></tr></table></figure><h3 id="参数默认值的位置"><a href="#参数默认值的位置" class="headerlink" title="参数默认值的位置"></a>参数默认值的位置</h3><p>一般情况下定义了默认值的参数应该是函数的尾部，这样比较容易看出来，如果是非尾部的参数设置默认值，实际上该参数是没法省略的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> (<span class="hljs-params">x = <span class="hljs-number">1</span>, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> [x, y];<br>&#125;<br><br><span class="hljs-title function_">f</span>() <span class="hljs-comment">// [1, undefined]</span><br><span class="hljs-title function_">f</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// [2, undefined]</span><br><span class="hljs-title function_">f</span>(, <span class="hljs-number">1</span>) <span class="hljs-comment">// Error</span><br><span class="hljs-title function_">f</span>(<span class="hljs-literal">undefined</span>, <span class="hljs-number">1</span>) <span class="hljs-comment">// [1, 1]</span><br><br><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y = <span class="hljs-number">5</span>, z</span>) &#123;<br>    <span class="hljs-keyword">return</span> [x, y, z];<br>&#125;<br><span class="hljs-title function_">f</span>() <span class="hljs-comment">// [undefined, 5, undefined]</span><br><span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// [1, 5, undefined]</span><br><span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>, ,<span class="hljs-number">2</span>) <span class="hljs-comment">// Error</span><br><span class="hljs-title function_">f</span>(<span class="hljs-number">1</span>, undefinied, <span class="hljs-number">2</span>) <span class="hljs-comment">// [1, 5, 2]</span><br></code></pre></td></tr></table></figure><h3 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h3><p>函数的length属性将返回没有指定默认值的参数个数。也就是说：指定了默认值后，length属性将失真；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) &#123;&#125;).<span class="hljs-property">length</span> <span class="hljs-comment">// 1</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a = <span class="hljs-number">5</span></span>) &#123;&#125;).<span class="hljs-property">length</span> <span class="hljs-comment">// 0</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c = <span class="hljs-number">5</span></span>) &#123;&#125;).<span class="hljs-property">length</span> <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>如果设置了默认值的参数不是尾参数，那么length属性也不再记入后面的参数了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params">a = <span class="hljs-number">0</span>, b, c</span>) &#123;&#125;).<span class="hljs-property">length</span> <span class="hljs-comment">// 0</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params">a, b = <span class="hljs-number">1</span>, c</span>) &#123;&#125;).<span class="hljs-property">length</span> <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>如果参数默认值是一个变量，则该变量所处的作用域与其他变量的作用域规则是一样的。即先是当前函数的作用域，然后才是全局作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x, y = x</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(y);<br>&#125;<br><br><span class="hljs-title function_">f</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><p>如果参数的默认值是一个函数，该函数的作用域是其声明时所在的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> foo = <span class="hljs-string">&#x27;outer&#x27;</span>;<br><br><span class="hljs-comment">// func为一个默认匿名函数，返回值为变量foo</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params">func = x =&gt; foo</span>) &#123;<br>    <span class="hljs-keyword">let</span> foo = <span class="hljs-string">&#x27;inner&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">func</span>());<br>&#125;<br><br><span class="hljs-title function_">bar</span>(); <span class="hljs-comment">// outer</span><br></code></pre></td></tr></table></figure><h3 id="默认参数的用途一目了然"><a href="#默认参数的用途一目了然" class="headerlink" title="默认参数的用途一目了然"></a>默认参数的用途一目了然</h3><p>利用默认参数值，可以指定某一个参数不得省略，一旦省略就抛出一个错误；如果想省略这个参数，只要设置成<code>undefined</code>就行了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">throwIfMissing</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Missing parameters&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">mustBeProvided = throwIfMissing()</span>) &#123;<br>    <span class="hljs-keyword">return</span> mustBeProvided;<br>&#125;<br><br><span class="hljs-title function_">foo</span>(); <span class="hljs-comment">// Error: Missing Parameters</span><br></code></pre></td></tr></table></figure><h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>顾名思义：就是入参的个数是不确定的，跟Java中的多参数语法类似。这里就不再赘述了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">...values</span>) &#123;<br>    <span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> val <span class="hljs-keyword">of</span> values) &#123;<br>        sum += val;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>扩展运算符为三个点<code>...</code>，是将一个数组转化为用逗号分隔的参数序列，是rest参数的逆运算。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]) <span class="hljs-comment">// 1 2 3</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, ...[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>], <span class="hljs-number">5</span>) <span class="hljs-comment">// 1 2 3 4 5</span><br><br>[...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)] <span class="hljs-comment">// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]</span><br></code></pre></td></tr></table></figure><p>该运算符主要用于函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">array, ...items</span>) &#123;<br>    array.<span class="hljs-title function_">push</span>(...items);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-keyword">var</span> numbers = [<span class="hljs-number">4</span>, <span class="hljs-number">38</span>];<br><span class="hljs-title function_">add</span>(...numbers) <span class="hljs-comment">// 42</span><br></code></pre></td></tr></table></figure><h3 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h3><h4 id="（1）合并数组"><a href="#（1）合并数组" class="headerlink" title="（1）合并数组"></a>（1）合并数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr1 = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>];<br><br>[...arr1, ...arr2, ...arr3] <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;e&#x27;, &#x27;f&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="（2）-与解构赋值结合"><a href="#（2）-与解构赋值结合" class="headerlink" title="（2） 与解构赋值结合"></a>（2） 与解构赋值结合</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">a = list[<span class="hljs-number">0</span>], rest = list.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br><br>[a, ...rest] = list<br><br><span class="hljs-keyword">const</span> [first, ...rest] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];<br>first <span class="hljs-comment">// 1</span><br>rest <span class="hljs-comment">// [2, 3, 4, 5]</span><br><br><span class="hljs-keyword">const</span> [first, ...rest] = []<br>first <span class="hljs-comment">// undefined</span><br>rest <span class="hljs-comment">// []</span><br><br><span class="hljs-keyword">const</span> [first, ...rest] = [<span class="hljs-string">&#x27;foo&#x27;</span>]<br>first <span class="hljs-comment">// foo</span><br>rest <span class="hljs-comment">// []</span><br></code></pre></td></tr></table></figure><h4 id="（3）函数返回值"><a href="#（3）函数返回值" class="headerlink" title="（3）函数返回值"></a>（3）函数返回值</h4><p>JavaScript的函数只能返回一个值，如果需要返回多个值，只能返回数组或对象。扩展运算符提供了解决这个问题的一种办法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> dateFields = <span class="hljs-title function_">readDateFields</span>(database);<br><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(...dateFields);<br></code></pre></td></tr></table></figure><h4 id="（4）字符串"><a href="#（4）字符串" class="headerlink" title="（4）字符串"></a>（4）字符串</h4><p>可以将字符串转换为真正的数组。因为扩展运算符可以很好地识别Unicode字符，因此最好都用扩展运算符；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[...<span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="（5）实现了Iterator接口的对象"><a href="#（5）实现了Iterator接口的对象" class="headerlink" title="（5）实现了Iterator接口的对象"></a>（5）实现了Iterator接口的对象</h4><p>任何Iterator接口的对象，都可以用扩展运算符转换为真正的数组，之前已经提过了，这里不再赘述</p><h4 id="（6）Map和Set结构、Generator函数"><a href="#（6）Map和Set结构、Generator函数" class="headerlink" title="（6）Map和Set结构、Generator函数"></a>（6）Map和Set结构、Generator函数</h4><p>承接第（5）点，Map和Set也部署了Iterator接口，所以也可以使用扩展运算符，Generator函数运行后返回的是一个遍历器对象，因此也可以使用扩展运算符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> go = <span class="hljs-keyword">function</span>* () &#123;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">yield</span> <span class="hljs-number">3</span>;<br>&#125;;<br>[...<span class="hljs-title function_">go</span>()] <span class="hljs-comment">// [1, 2, 3]</span><br></code></pre></td></tr></table></figure><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>从ES5开始，函数内部可以使用严格模式，在ES2016中做了一点修改。规定只要函数参数使用了默认值、解构赋值、或者扩展运算符，那么函数内部就不能显式设定为严格模式。</p><p>这样规定的原因是：函数内部的严格模式同时适用于函数体和函数参数。但是函数执行时会先执行函数参数代码，再执行函数体代码。因此只有从函数体代码之中才能知道参数代码是否应该以严格模式执行，但是函数参数代码又要先于函数体执行。所以这就导致了不合理的存在。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params">value = <span class="hljs-number">070</span></span>) &#123; <span class="hljs-comment">// value = 070 先执行</span><br>    <span class="hljs-string">&#x27;use strict&#x27;</span>; <span class="hljs-comment">// 设置了严格模式</span><br>    <span class="hljs-keyword">return</span> value; <span class="hljs-comment">// 后执行</span><br>&#125;<br><span class="hljs-comment">// Illegal &#x27;use strict&#x27; directive in function with non-simple parameter list</span><br></code></pre></td></tr></table></figure><h3 id="但是我想要用严格模式限定时该怎么办呢？"><a href="#但是我想要用严格模式限定时该怎么办呢？" class="headerlink" title="但是我想要用严格模式限定时该怎么办呢？"></a>但是我想要用严格模式限定时该怎么办呢？</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span> <span class="hljs-comment">// 全局严格模式</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">doSomething</span>(<span class="hljs-params">a, b = a</span>) &#123;&#125;<br><br><span class="hljs-comment">// 由于函数参数部分会先执行：那很简单，将函数包在一个无参数的立即执行函数中</span><br><span class="hljs-keyword">const</span> doSomething = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">value = <span class="hljs-number">42</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h2><p>函数的<code>name</code>属性返回的是函数的名称。如果是将匿名函数赋给一个变量，在ES5中会返回空串，但是在ES6中会将变量名作为函数的名称。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span> () &#123;&#125;<br>foo.<span class="hljs-property">name</span> <span class="hljs-comment">// &#x27;foo&#x27;</span><br><br><span class="hljs-keyword">var</span> func1 = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-comment">// ES5</span><br>func1.<span class="hljs-property">name</span> <span class="hljs-comment">// &quot;&quot;</span><br><br><span class="hljs-comment">// ES6</span><br>func1.<span class="hljs-property">name</span> <span class="hljs-comment">// &quot;func1&quot;</span><br></code></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>ES6中允许使用箭头<code>=&gt;</code>来定义函数，定义效果和你使用<code>function</code>创建函数是等价的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = v =&gt; v;<br><br><span class="hljs-comment">// 等同于</span><br><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span>(<span class="hljs-params">v</span>) &#123;<br>    <span class="hljs-keyword">return</span> v;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果箭头函数不需要参数或者需要多个参数，就是用圆括号来代表参数部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title function_">f</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">var</span> f = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1, num2</span>) =&gt; num1 + num2;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">var</span> sum = <span class="hljs-keyword">function</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-keyword">return</span> num1 + num2;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果箭头函数的代码块部分超过一条语句，就是用大括号将它们围起来，必须在对象外面加上括号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1, num2</span>) =&gt; &#123;<span class="hljs-keyword">return</span> num1 + num2;&#125;<br><br><span class="hljs-comment">//大括号会解释为代码块，所以如果是用箭头函数返回对象，必须在对象外层加上大括号</span><br><span class="hljs-keyword">var</span> <span class="hljs-title function_">getTemplate</span> = id =&gt; (&#123;<span class="hljs-attr">id</span>: id, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Temp&quot;</span>&#125;);<br></code></pre></td></tr></table></figure><p>箭头函数也可以与变量解构结合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">full</span> = (<span class="hljs-params">&#123; first ,last &#125;</span>) =&gt; first + <span class="hljs-string">&#x27; &#x27;</span> + last;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">full</span>(<span class="hljs-params">person</span>) &#123;<br>    <span class="hljs-keyword">return</span> person.<span class="hljs-property">first</span> + <span class="hljs-string">&#x27; &#x27;</span> + person.<span class="hljs-property">last</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用箭头函数需要注意几个地方：</p><ul><li>函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象；</li><li>不可以当做构造函数；（<code>this</code>对象的指向是可变的，而在箭头函数中是固定的）</li><li>不可以使用<code>arguments</code>对象，如果要用，可以使用Rest参数代替；</li><li>不可以使用<code>yield</code>命令，因此箭头函数不可以用作Generator函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;id:&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>);<br>    &#125;, <span class="hljs-number">100</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> id = <span class="hljs-number">21</span>;<br>foo.<span class="hljs-title function_">call</span>(&#123; <span class="hljs-attr">id</span>: <span class="hljs-number">42</span> &#125;);<br><span class="hljs-comment">// id: 42</span><br></code></pre></td></tr></table></figure><h2 id="绑定this"><a href="#绑定this" class="headerlink" title="绑定this"></a>绑定this</h2><p>箭头函数可以绑定<code>this</code>对象，因此大大减少了显式绑定<code>this</code>对象的写法（<code>apply</code>、<code>call</code>、<code>bind</code>）。但是见图函数并不适用于任何场合，因此ES7提出了函数绑定运算符。语法为两个并排的冒号：<code>::</code>。双冒号左边是一个对象，右边是一个函数。该运算符会自动将左边的对象，作为上下文环境，绑定到右边的函数上面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">foo</span>::bar <span class="hljs-comment">// bar.bind(foo)</span><br><br><span class="hljs-attr">foo</span>::<span class="hljs-title function_">bar</span>(...<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// bar.bind(foo, arguments)</span><br><br><span class="hljs-keyword">const</span> hasOwnProperty = <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hasOwn</span>(<span class="hljs-params">obj, key</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-attr">obj</span>::<span class="hljs-title function_">hasOwnProperty</span>(key);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果双冒号左边为空（对需要绑定的对象为空），则等于将该方法绑定在对象上面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> method = <span class="hljs-attr">obj</span>::obj.<span class="hljs-property">foo</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">var</span> method = ::obj.<span class="hljs-property">foo</span>;<br><br><span class="hljs-keyword">let</span> log = ::<span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>;<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">var</span> log = <span class="hljs-variable language_">console</span>.<span class="hljs-property">log</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">console</span>);<br></code></pre></td></tr></table></figure><p>由于双冒号运算符返回的还是原对象，因此可以采用链式写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; map, takeWhile, forEach &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;iterlib&quot;</span>;<br><br><span class="hljs-comment">// 例1</span><br><span class="hljs-title function_">getPlayers</span>()<br>::<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.<span class="hljs-title function_">character</span>())<br>::<span class="hljs-title function_">takeWhile</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x.<span class="hljs-property">strength</span> &gt; <span class="hljs-number">100</span>)<br>::<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x));<br><br><span class="hljs-comment">// 例2</span><br><span class="hljs-keyword">let</span> &#123; find, html &#125; = jake;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&quot;div.myClass&quot;</span>);<br>::<span class="hljs-title function_">find</span>(<span class="hljs-string">&quot;p&quot;</span>)<br>::<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;hahahh&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h2><p>尾调用是函数式编程中的一个重要概念：就是指某个函数的最后一步调用是另一个函数。例如下面的例子：函数f的最后一步是调用函数g。尾调用优化只在严格模式下才生效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">g</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面三种情况都不属于尾调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">let</span> y = <span class="hljs-title function_">g</span>(x);<br>    <span class="hljs-keyword">return</span> y;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">g</span>(x) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-title function_">g</span>(x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>尾调用不一定出现在函数尾部，只要是最后一步操作即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> (<span class="hljs-params">x</span>) &#123;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">m</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">n</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure><p>通常来说：函数调用会在内存中形成一个“调用记录”，也称为调用帧。保存调用位置和内部变量等信息。</p><p>由于尾调用是函数最后一步操作，因此不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧即可。</p><p>这里有一个前提条件：只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行“尾部调用优化”；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> m = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> n = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">g</span>(m + n);<br>&#125;<br><span class="hljs-title function_">f</span>()<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">g</span>(<span class="hljs-number">3</span>)<br>&#125;<br><span class="hljs-title function_">f</span>();<br><br><span class="hljs-comment">// 等同于</span><br><span class="hljs-title function_">g</span>(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h3><p>基于上述尾部调用优化的特性：因此对于尾递归来说，由于只存在一个调用帧，因此永远也不会发生“栈溢出”错误。（注：将函数的多参数转换为单参数的范式成为”柯里化“）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 非尾递归写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> n * <span class="hljs-title function_">factorial</span>(n - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-title function_">factorial</span>(<span class="hljs-number">5</span>) <span class="hljs-comment">// 120</span><br><br><span class="hljs-comment">// 尾递归写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n, total = <span class="hljs-number">1</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (n === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> total;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">factorial</span>(n - <span class="hljs-number">1</span>, n * total);<br>&#125;<br><br><span class="hljs-title function_">factorial</span>(<span class="hljs-number">5</span>) <span class="hljs-comment">// 120</span><br></code></pre></td></tr></table></figure><p>还有斐波那契数列的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 非尾递归写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fibonacci</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> &#125;;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Fibonacci</span>(n - <span class="hljs-number">1</span>) + <span class="hljs-title class_">Fibonacci</span>(n - <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-title class_">Fibonacci</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 89</span><br><span class="hljs-title class_">Fibonacci</span>(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 运行很慢</span><br><br><span class="hljs-comment">// 尾递归写法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fibonacci</span>(<span class="hljs-params">n, ac1 = <span class="hljs-number">1</span>, ac2 = <span class="hljs-number">1</span></span>) &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123; <span class="hljs-keyword">return</span> ac2; &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Fibonacci</span>(n - <span class="hljs-number">1.</span> ac2, ac1 + ac2);<br>&#125;<br><br><span class="hljs-title class_">Fibonacci2</span>(<span class="hljs-number">100</span>) <span class="hljs-comment">// 573147844013817200000</span><br><span class="hljs-title class_">Fibonacci2</span>(<span class="hljs-number">1000</span>) <span class="hljs-comment">// 7.0330367711422765e+208</span><br></code></pre></td></tr></table></figure><p>可以看出“尾部调用优化”对于“尾递归”的意义重大，所以一些函数式编程语言将其写入了语言规格。换句话来说只要使用尾递归来实现就不会发生栈溢出，从而节省内存。</p><h3 id="蹦床函数"><a href="#蹦床函数" class="headerlink" title="蹦床函数"></a>蹦床函数</h3><p>由于尾部递归只能在严格模式下生效，理由如下：</p><p>正常模式下函数有两个变量，可以用于跟踪和记录函数调用：</p><ul><li><code>func.arguments</code>：返回调用时的函数参数；</li><li><code>func.caller</code>：返回调用当前的函数；</li></ul><p>尾部调用发生时，调用栈的记录会被改写，因此上面两个变量就会失真。而在严格模式下会禁用上面两个变量，因此尾部调用只能在严格模式下生效。</p><p>那么，如果我现在正常模式下实现尾部递归的写法又该如何做呢？可以将递归转换为循环执行。也就是俗称的“蹦床函数”：如下所示：<code>sum</code>函数每执行一次，都会返回自身的另一个版本。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">trampoline</span>(<span class="hljs-params">f</span>) &#123;<br>    <span class="hljs-keyword">while</span> (f &amp;&amp; f <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>) &#123;<br>        f = <span class="hljs-title function_">f</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> f;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">x, y</span>) &#123;<br>    <span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> sum.<span class="hljs-title function_">bind</span>(<span class="hljs-literal">null</span>, x + <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">trampoline</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100000</span>)); <span class="hljs-comment">// 100001</span><br></code></pre></td></tr></table></figure><p>但是上面的蹦床函数并不是真正的尾调用优化。下面这段代码来自官网教程。细细品位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">tco</span>(<span class="hljs-params">f</span>) &#123;<br>    <span class="hljs-keyword">var</span> value;<br>    <span class="hljs-keyword">var</span> active = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 默认情况下该变量不激活</span><br>    <span class="hljs-keyword">var</span> accumulated = [];<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">accumulator</span>(<span class="hljs-params"></span>) &#123;<br>        accumulated.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-keyword">if</span> (!active) &#123;<br>            active = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 进入尾调用函数后激活</span><br>            <span class="hljs-keyword">while</span>(accumulated.<span class="hljs-property">length</span>) &#123;<br>                value = f.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, accumulated.<span class="hljs-title function_">shift</span>());<br>            &#125;<br>            active = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 调用完毕后关闭</span><br>            <span class="hljs-keyword">return</span> value;<br>        &#125;<br>    &#125;;<br>&#125;<br><br><span class="hljs-keyword">var</span> sum = <span class="hljs-title function_">tco</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>)&#123;<br>    <span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">sum</span>(x + <span class="hljs-number">1</span>, y - <span class="hljs-number">1</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;);<br><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10000</span>) <span class="hljs-comment">// 10001</span><br></code></pre></td></tr></table></figure><h2 id="函数参数的尾逗号"><a href="#函数参数的尾逗号" class="headerlink" title="函数参数的尾逗号"></a>函数参数的尾逗号</h2><p>ES7将允许函数的最后一个参数有尾逗号。在此之前，不允许最后一个参数携带逗号;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clownsEveryWhere</span>(<span class="hljs-params"></span><br><span class="hljs-params"> param1,</span><br><span class="hljs-params"> param2,</span><br><span class="hljs-params"></span>) &#123;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 数组扩展</title>
    <link href="/2022/02/17/javascript/es6-array-expand/"/>
    <url>/2022/02/17/javascript/es6-array-expand/</url>
    
    <content type="html"><![CDATA[<h1 id="数组扩展"><a href="#数组扩展" class="headerlink" title="数组扩展"></a>数组扩展</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p>用于将类似数组的对象和可遍历的对象（部署了Iterator接口）转换为数组。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arrayLike = &#123;<br>    <span class="hljs-string">&#x27;0&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-string">&#x27;1&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>,<br>    <span class="hljs-string">&#x27;2&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>,<br>    <span class="hljs-attr">length</span>: <span class="hljs-number">3</span><br>&#125;;<br><br><span class="hljs-comment">// ES5</span><br><span class="hljs-keyword">var</span> arr1 = [].<span class="hljs-property">slice</span>.<span class="hljs-title function_">call</span>(arrayLike);<br><br><span class="hljs-comment">// ES6</span><br><span class="hljs-keyword">let</span> arr2 = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(arrayLike); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span><br></code></pre></td></tr></table></figure><p>实际应用中，常见的类似数组对象是DOM操作返回的NodeList集合以及函数内部arguments对象。Array.from都可以将它们转为真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> ps = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(ps).<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">p</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-variable language_">arguments</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args);<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">// [1, 2]</span><br><span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 字符串和Set都部署了Iterator接口，所以可以用Array.from生成数组，这点和Java很像</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-string">&#x27;hello&#x27;</span>); <span class="hljs-comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span><br><span class="hljs-keyword">let</span> nameSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(nameSet) <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;b&#x27;]</span><br></code></pre></td></tr></table></figure><p>除此之外，扩展运算符<code>...</code>也可以将某些数据结构转换为数组（注：扩展运算符跟Java中的多参数表达式功能类似）。扩展运算符背地也是调用Iterator接口，如果对象没有部署这个接口，则无法完成转换；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span> () &#123;<br>    <span class="hljs-keyword">var</span> args = [...<span class="hljs-variable language_">arguments</span>];<br>&#125;<br><br>[...<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;div&#x27;</span>)]<br></code></pre></td></tr></table></figure><h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2><p>Array.of用于将一组值，转换为数组；这个方法的主要目的是弥补Array()方法的不足。因为参数个数的不同，会导致Array()的行为有差异。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// [3, 11, 8]</span><br><span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>, <span class="hljs-number">11</span>, <span class="hljs-number">8</span>); <span class="hljs-comment">// [3, 11, 8]</span><br><span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// [, , ,] 长度为3的空数组</span><br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">of</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">// [3] 长度为1的数组，只有一个元素3</span><br></code></pre></td></tr></table></figure><h2 id="数组实例的copyWithin"><a href="#数组实例的copyWithin" class="headerlink" title="数组实例的copyWithin()"></a>数组实例的copyWithin()</h2><p>在当前数组的内部，将指定位置的成员复制到其他位置，然后返回当前数组。也就是说该方法会修改当前数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">copyWithin</span>(target, start = <span class="hljs-number">0</span>, end = <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span>)<br><span class="hljs-comment">// target（必需）：从该位置开始替换数据</span><br><span class="hljs-comment">// start（可选）：从该位置开始读取数据，默认为0，如果为负值则表示倒数；</span><br><span class="hljs-comment">// end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数；</span><br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [4, 5, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><h2 id="数组实例find-和findIndex"><a href="#数组实例find-和findIndex" class="headerlink" title="数组实例find()和findIndex()"></a>数组实例find()和findIndex()</h2><p><code>find()</code>方法用于找出第一个符合条件的数组成员。其第一个参数是回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员。如果没找到符合条件的成员则返回<code>undefined</code>。</p><p><code>findIndex()</code>方法的作用与<code>find()</code>方法非常类似。这里就不再赘述。可以看出新增的两个方法极大地弥补了<code>indexOf()</code>方法的不足。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, -<span class="hljs-number">5.</span> <span class="hljs-number">10</span>].<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">n</span>) =&gt;</span> n &lt; <span class="hljs-number">0</span>); <span class="hljs-comment">// -5</span><br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>].<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, arr</span>)&#123;<br>    <span class="hljs-keyword">return</span> value &gt; <span class="hljs-number">9</span>;<br>&#125;); <span class="hljs-comment">// 10</span><br><br>[<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>].<span class="hljs-title function_">findIndex</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value, index, arr</span>)&#123;<br>    <span class="hljs-keyword">return</span> value &gt; <span class="hljs-number">9</span>;<br>&#125;) <span class="hljs-comment">// 2（正好是元素10对应的数组索引）</span><br></code></pre></td></tr></table></figure><h2 id="数组实例fill"><a href="#数组实例fill" class="headerlink" title="数组实例fill()"></a>数组实例fill()</h2><p><code>fill()</code>可以使用给定值来填充数组，因此在初始化数组元素的过程中非常方便。</p><p>初次之外，fill()还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">7</span>); <span class="hljs-comment">// [7, 7, 7]</span><br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-number">7</span>); <span class="hljs-comment">// [7, 7, 7]</span><br><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// [&#x27;a&#x27;, &#x27;7&#x27;, &#x27;c&#x27;] 用7填充，从1号位开始，到2号位结束</span><br></code></pre></td></tr></table></figure><h2 id="数组实例entries-keys-和values"><a href="#数组实例entries-keys-和values" class="headerlink" title="数组实例entries(), keys()和values()"></a>数组实例entries(), keys()和values()</h2><p>ES6新增了上述的3个方法，英语遍历数组。它们都是返回一个遍历器对象，可以使用<code>for...of</code>循环遍历，唯一区别是<code>keys()</code>是对键名的遍历、<code>values()</code>是对键值得遍历，<code>entries()</code>是对键值对的遍历。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> index <span class="hljs-keyword">of</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">keys</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index)<br>&#125;<br><span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 1</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> elem <span class="hljs-keyword">of</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">values</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(elem);<br>&#125;<br><span class="hljs-comment">// &#x27;a&#x27;</span><br><span class="hljs-comment">// &#x27;b&#x27;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [index, elem] <span class="hljs-keyword">of</span> [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>].<span class="hljs-title function_">entries</span>()) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index, elem);<br>&#125;<br><span class="hljs-comment">// 0 &#x27;a&#x27;</span><br><span class="hljs-comment">// 1 &#x27;b&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="数组实例includes"><a href="#数组实例includes" class="headerlink" title="数组实例includes()"></a>数组实例includes()</h2><p><code>Array.prototype.includes</code>方法返回一个布尔值，表示某个数组是否是否已经包含给定的值，与字符串的<code>includes</code>方法类似。该方法属于ES7，但是Babel转码器已经支持。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// true</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-number">4</span>); <span class="hljs-comment">// false</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-title class_">NaN</span>].<span class="hljs-title function_">includes</span>(<span class="hljs-title class_">NaN</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>该方法还有第二个参数表示搜索的起始位置，默认为0 ，如果为负数则表示倒数位置。</p><h2 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h2><p>数组的某一个位置没有任何值。比如<code>Array</code>构造函数返回的数组都是空位。注意：空位不等于<code>undefined</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>);<br><span class="hljs-number">0</span> <span class="hljs-keyword">in</span> arr <span class="hljs-comment">// false</span><br><span class="hljs-literal">undefined</span> <span class="hljs-keyword">in</span> arr <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">3</span>).<span class="hljs-title function_">fill</span>(<span class="hljs-literal">undefined</span>)<br><span class="hljs-number">0</span> <span class="hljs-keyword">in</span> arr <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>在ES6中会明确将空位转换为<code>undefined</code>， <code>copyWithin()</code>会将空位一起拷贝，<code>fill()</code>会将空位当做正常位置，循环也会迭代空位。总之ES6中会保留空位。由于空位的处理规则不统一，因此应当避免出现空位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[...[<span class="hljs-string">&#x27;a&#x27;</span>,,<span class="hljs-string">&#x27;b&#x27;</span>]]<br><span class="hljs-comment">// [&#x27;a&#x27;, undefined, &#x27;b&#x27;]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 数值扩展</title>
    <link href="/2022/02/17/javascript/es6-num-expand/"/>
    <url>/2022/02/17/javascript/es6-num-expand/</url>
    
    <content type="html"><![CDATA[<h1 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h1><h2 id="二进制和八进制数的表示方法"><a href="#二进制和八进制数的表示方法" class="headerlink" title="二进制和八进制数的表示方法"></a>二进制和八进制数的表示方法</h2><p>ES6提供了二进制和八进制数值的写法。二进制必须用<code>0b/0B</code>表示；八进制必须用<code>0o/0O</code>表示。示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">0B11111011</span> === <span class="hljs-number">503</span> <span class="hljs-comment">// true</span><br><span class="hljs-number">0o767</span> === <span class="hljs-number">503</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>如果要将二进制/八进制数转换为十进制，需要使用<code>Number</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;0b111&#x27;</span>); <span class="hljs-comment">// 7</span><br><span class="hljs-title class_">Number</span>(<span class="hljs-string">&#x27;0o10&#x27;</span>); <span class="hljs-comment">// 8</span><br></code></pre></td></tr></table></figure><h2 id="无穷数表示"><a href="#无穷数表示" class="headerlink" title="无穷数表示"></a>无穷数表示</h2><p>ES6在原有Number的基础上新增了<code>Number.isFinite()</code>和<code>Number.isNaN()</code>两个方法。前者用于检查一个数值是否为有限数，后者检验一个数是否为<code>NaN</code>。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-number">15</span>); <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-number">0.8</span>); <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-title class_">NaN</span>); <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(<span class="hljs-title class_">Infinity</span>); <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(-<span class="hljs-title class_">Infinity</span>); <span class="hljs-comment">// false</span><br><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isNan</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isNan</span>(<span class="hljs-number">15</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isNan</span>(<span class="hljs-string">&#x27;15&#x27;</span>) <span class="hljs-comment">// false</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isNan</span>(<span class="hljs-number">9</span>/<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="Number-parseInt-和Number-parseFloat"><a href="#Number-parseInt-和Number-parseFloat" class="headerlink" title="Number.parseInt()和Number.parseFloat()"></a><code>Number.parseInt()</code>和<code>Number.parseFloat()</code></h2><p>ES6将全局方法<code>parseInt()</code>和<code>parseFloat()</code>移植到Number对象上面，行为完全保持不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(<span class="hljs-string">&#x27;12.34&#x27;</span>); <span class="hljs-comment">// 12</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(<span class="hljs-string">&#x27;123.45#&#x27;</span>); <span class="hljs-comment">// 123.45</span><br></code></pre></td></tr></table></figure><h2 id="Number-isInteger-和Number-EPSILON"><a href="#Number-isInteger-和Number-EPSILON" class="headerlink" title="Number.isInteger()和Number.EPSILON"></a><code>Number.isInteger()</code>和<code>Number.EPSILON</code></h2><p><code>Number.isInteger()</code>方法返回一个整型，因为JavaScript内部整数和浮点数使用的是同样的存储方法，因此3.0和3返回的都是整型3。</p><p>除此之外，ES6还新增了一个极小的常量<code>Number.EPSILON</code>。引入这个量的目的是判断当前浮点数计算的结果是不是我们期望的。由于浮点数计算存在精度误差，因此如果这个误差能够小于<code>Number.EPSILON</code>，我们就认为得到了正确结果。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">withInErrorMargin</span>(<span class="hljs-params">left, right</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(left - right) &lt; <span class="hljs-title class_">Number</span>.<span class="hljs-property">EPSILON</span>;<br>&#125;<br><br><span class="hljs-title function_">withInErrorMargin</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>) <span class="hljs-comment">// true</span><br><span class="hljs-title function_">withInErrorMargin</span>(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>, <span class="hljs-number">0.3</span>) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="安全整数和Number-isSafeInteger"><a href="#安全整数和Number-isSafeInteger" class="headerlink" title="安全整数和Number.isSafeInteger()"></a>安全整数和<code>Number.isSafeInteger()</code></h2><p>JavaScript能够准确地表示的整数范围在 <code>-2^53</code> 至 <code>2^53</code> 之间（不包括两个端点），因此ES6中引入了<code>Number.MAX_SAFE_INTEGER</code>和<code>Number.MIN_SAFE_INTEGER</code>两个常量，用来表示这个范围的上下限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">Number.isSafeInteger(9007199254740993);</span><br>false<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">Number.isSafeInteger(990);</span><br>true<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">Number.isSafeInteger(9007199254740993 - 990);</span><br>true<br><span class="hljs-meta prompt_">&gt;</span><br></code></pre></td></tr></table></figure><p>所以在涉及大整型计算的过程中，需要同时校验运算数和运算结果是否为安全整型。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">trusty</span>(<span class="hljs-params">left, right, result</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isSafeInteger</span>(left) &amp;&amp;<br>       <span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isSafeInteger</span>(right) &amp;&amp;<br>       <span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isSafeInteger</span>(result)) &#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RangeError</span>(<span class="hljs-string">&#x27;Operation cannot be trusted!&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_">trusty</span>(<span class="hljs-number">9007199254740993</span>, <span class="hljs-number">990</span>, <span class="hljs-number">9007199254740993</span> - <span class="hljs-number">990</span>)<br><span class="hljs-comment">// Operation cannot be trusted!</span><br><br><span class="hljs-title function_">trusty</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-comment">// 3</span><br></code></pre></td></tr></table></figure><h2 id="Math对象的扩展"><a href="#Math对象的扩展" class="headerlink" title="Math对象的扩展"></a>Math对象的扩展</h2><h3 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a><code>Math.trunc()</code></h3><p>该方法用于去除一个数的小数部分，返回整数部分；对于非数值，会先将其转换为数值，再进行比较：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(<span class="hljs-number">4.1</span>) <span class="hljs-comment">// 4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(<span class="hljs-number">4.9</span>) <span class="hljs-comment">// 4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(-<span class="hljs-number">4.1</span>) <span class="hljs-comment">// -4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(-<span class="hljs-number">4.9</span>) <span class="hljs-comment">// -4</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(-<span class="hljs-number">0.1234</span>) <span class="hljs-comment">// -0</span><br></code></pre></td></tr></table></figure><h3 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a><code>Math.sign()</code></h3><p>该方法用来判断一个数到底为正数、负数还是零。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(-<span class="hljs-number">5</span>); <span class="hljs-comment">// -1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// +1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// +0</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(-<span class="hljs-number">0</span>); <span class="hljs-comment">// -0</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(<span class="hljs-title class_">NaN</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(<span class="hljs-string">&#x27;foo&#x27;</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(); <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><h3 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a><code>Math.cbrt()</code></h3><p>该方法用于计算一个数的立方根</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cbrt</span>(-<span class="hljs-number">1</span>); <span class="hljs-comment">// -1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cbrt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 0</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cbrt</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cbrt</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 1.2599210498948732</span><br></code></pre></td></tr></table></figure><h3 id="Math-clz32"><a href="#Math-clz32" class="headerlink" title="Math.clz32()"></a><code>Math.clz32()</code></h3><p>JavaScript的整数使用32位二进制形式表示，<code>Math.clz32</code>方法返回一个数的32位无符号整数形式有多少个前导0。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">Math.clz32(0)</span><br>32<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">Math.clz32(1)</span><br>31<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"></span><br><span class="language-bash">&gt; Math.clz32(1000)</span><br>22<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">Math.clz32(1000)</span>  <br></code></pre></td></tr></table></figure><h3 id="Math-imul"><a href="#Math-imul" class="headerlink" title="Math.imul()"></a><code>Math.imul()</code></h3><p>该方法返回两个数以32位带符号整数形式相乘的结果，返回的也是一个32位的带符号数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">imul</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>) <span class="hljs-comment">// 8</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">imul</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">8</span>) <span class="hljs-comment">// -8</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">imul</span>(-<span class="hljs-number">2</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><h3 id="Math-fround"><a href="#Math-fround" class="headerlink" title="Math.fround()"></a><code>Math.fround()</code></h3><p>该方法返回一个数的单精度浮点数形式。对于整数来说该方法没有任何效果，但是对于无法使用64个二进制位精确表示的小数，该方法会返回最接近这个小数的单精度浮点数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">fround</span>(<span class="hljs-number">0</span>) <span class="hljs-comment">// 0</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">fround</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// 1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">fround</span>(<span class="hljs-number">1.337</span>) <span class="hljs-comment">// 1.3370000123977661</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">fround</span>(<span class="hljs-number">1.5</span>) <span class="hljs-comment">// 1.5</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">fround</span>(<span class="hljs-title class_">NaN</span>) <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><h3 id="Math-hypot"><a href="#Math-hypot" class="headerlink" title="Math.hypot()"></a><code>Math.hypot()</code></h3><p>该方法返回所有参数的平方和的平方根。例如注明的勾股定理（勾三股四弦五）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">hypot</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>); <span class="hljs-comment">// 5</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">hypot</span>(a, b, c); <span class="hljs-comment">// sqrt(3^2 + 4^2 + 5^2);</span><br></code></pre></td></tr></table></figure><h3 id="对数方法"><a href="#对数方法" class="headerlink" title="对数方法"></a>对数方法</h3><p>ES6新增了4个对数方法</p><ul><li>Math.expm1(x): 返回<code>e^x - 1</code></li><li>Math.log1p(x): 返回<code>1 + x</code>的自然对数，如果<code>x</code>小于-1， 返回<code>NaN</code>；</li><li>Math.log10(): 返回以10为底的x的对数。如果<code>x</code>小于0，则返回<code>NaN</code>；</li><li>Math.log2()：返回以2为底的x的对数。如果<code>x</code>小于0，则返回<code>NaN</code>;</li></ul><h3 id="三角函数方法"><a href="#三角函数方法" class="headerlink" title="三角函数方法"></a>三角函数方法</h3><p>ES6新增了6个三角函数方法。</p><ul><li>Math.sinh(x)：返回<code>x</code>的双曲正弦</li><li>Math.cosh(x)：返回<code>x</code>的双曲余弦</li><li>Math.tanh(x)：返回<code>x</code>的双曲正切</li><li>Math.asinh(x)：返回<code>x</code>的反双曲正弦</li><li>Math.acosh(x)：返回<code>x</code>的反双曲余弦</li><li>Math.atanh(x)：返回<code>x</code>的反双曲正切</li></ul><h3 id="指数运算"><a href="#指数运算" class="headerlink" title="指数运算"></a>指数运算</h3><p>ES7新增了一个指数运算符<code>**</code>，目前Babel转码已经支持。这里不再赘述。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 正则表达式</title>
    <link href="/2022/02/17/javascript/es6-regexp/"/>
    <url>/2022/02/17/javascript/es6-regexp/</url>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>用于匹配字符串中字符组合的模式，在JavaScript中正则表达式也是对象。模式匹配常用在<code>RegExp</code> <code>exec</code> <code>test</code>方法，以及<code>String</code>的<code>match</code>、<code>matchAll</code>、<code>replace</code>、<code>search</code>和<code>split</code>方法。</p><h2 id="创建语法"><a href="#创建语法" class="headerlink" title="创建语法"></a>创建语法</h2><p>使用下面两种方法都可以创建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// method 1</span><br><span class="hljs-keyword">var</span> re = <span class="hljs-regexp">/abc/ig</span>; <span class="hljs-comment">// 其中ig为正则对象修饰符</span><br><br><span class="hljs-comment">// method 2</span><br><span class="hljs-keyword">var</span> re = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-regexp">/abc/ig</span>); <span class="hljs-comment">// 返回一个原有正则表达式的拷贝</span><br></code></pre></td></tr></table></figure><p>除此之外ES6还提供了带两个参数的<code>RegExp</code>函数，但是在ES5这种写法是非法的。ES6中则放款了此项限制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-regexp">/xyz/</span>, <span class="hljs-string">&#x27;i&#x27;</span>); <span class="hljs-comment">// ES5中报错、但是在ES6中是允许的</span><br><span class="hljs-comment">// regex &quot;i&quot; 第二个参数为指定修饰符，返回的正则表达式对象会忽略原有的修饰符，只使用新指定的修饰符</span><br></code></pre></td></tr></table></figure><h2 id="ES6新增功能：u修饰符"><a href="#ES6新增功能：u修饰符" class="headerlink" title="ES6新增功能：u修饰符"></a>ES6新增功能：<code>u</code>修饰符</h2><p><code>u字符</code>为Unicode字符的意思，可以识别码点超过<code>0xFFFF</code>的字符。前一章节也讲过ES6加入了Unicode字符表示。因此正则也是可以支持Unicode的模式识别的。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/\u&#123;<span class="hljs-number">61</span>&#125;/.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">// false</span><br>/\u&#123;<span class="hljs-number">61</span>&#125;/u.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-comment">// true</span><br>/\u&#123;20BB7&#125;/u.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;𠮷&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="预定义模式"><a href="#预定义模式" class="headerlink" title="预定义模式"></a>预定义模式</h3><p>另外<code>u</code>字符也会影响预定义模式，能否正确识别大于<code>0xFFFF</code>的Unicode字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">codePointLength</span>(<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-keyword">var</span> result = text.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[\s\S]/gu</span>);<br>    <span class="hljs-keyword">return</span> result ? result.<span class="hljs-property">length</span> : <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;\u&#123;20BB7&#125;\u&#123;20BB7&#125;&#x27;</span>;<br><br>s.<span class="hljs-property">length</span> <span class="hljs-comment">// 4</span><br><span class="hljs-title function_">codePointLength</span>(s) <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h2 id="ES6新增功能：y修饰符"><a href="#ES6新增功能：y修饰符" class="headerlink" title="ES6新增功能：y修饰符"></a>ES6新增功能：<code>y</code>修饰符</h2><p><code>y</code>字符也称为粘连字符，其作用于<code>g</code>修饰符类似。后一次匹配都从上一次匹配成功的下一个位置开始。不同之处在于<code>g</code>修饰符只要剩余位置中存在匹配即可，而<code>y</code>修饰符确保匹配必须从剩余的第一个位置开始；例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&#x27;aaa_aa_a&#x27;</span>;<br><span class="hljs-keyword">var</span> r1 = <span class="hljs-regexp">/a+/g</span>;<br><span class="hljs-keyword">var</span> r2 = <span class="hljs-regexp">/a+/y</span>;<br><br>r1.<span class="hljs-title function_">exec</span>(s);<br>[ <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">input</span>: <span class="hljs-string">&#x27;aaa_aa_a&#x27;</span>, <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span> ]<br><br>r2.<span class="hljs-title function_">exec</span>(s);<br>[ <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">input</span>: <span class="hljs-string">&#x27;aaa_aa_a&#x27;</span>, <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span> ]<br><br>r1.<span class="hljs-title function_">exec</span>(s);<br>[ <span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">input</span>: <span class="hljs-string">&#x27;aaa_aa_a&#x27;</span>, <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span> ]<br><br>r2.<span class="hljs-title function_">exec</span>(s);<br><span class="hljs-literal">null</span><br><br>r1.<span class="hljs-title function_">exec</span>(s);<br>[ <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">input</span>: <span class="hljs-string">&#x27;aaa_aa_a&#x27;</span>, <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span> ]<br><br>r2.<span class="hljs-title function_">exec</span>(s);<br>[ <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">input</span>: <span class="hljs-string">&#x27;aaa_aa_a&#x27;</span>, <span class="hljs-attr">groups</span>: <span class="hljs-literal">undefined</span> ]<br><br>r1.<span class="hljs-title function_">exec</span>(s);<br><span class="hljs-literal">null</span><br><br>r2.<span class="hljs-title function_">exec</span>(s);<br><span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h3 id="例子：g修饰符和y修饰符的区别"><a href="#例子：g修饰符和y修饰符的区别" class="headerlink" title="例子：g修饰符和y修饰符的区别"></a>例子：<code>g</code>修饰符和<code>y</code>修饰符的区别</h3><p>使用<code>g</code>修饰符和<code>lastIndex</code>来验证运行方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REGEX</span> = <span class="hljs-regexp">/a/g</span>;<br><br><span class="hljs-variable constant_">REGEX</span>.<span class="hljs-property">lastIndex</span> = <span class="hljs-number">2</span>; <span class="hljs-comment">// 默认从2开始匹配（数组下标2）</span><br><span class="hljs-keyword">const</span> match = <span class="hljs-variable constant_">REGEX</span>.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;xaya&#x27;</span>);<br><br>match.<span class="hljs-property">index</span> <span class="hljs-comment">// 3 也就是指定位置向后搜索字符&#x27;a&#x27;</span><br><br><span class="hljs-variable constant_">REGEX</span>.<span class="hljs-property">lastIndex</span> <span class="hljs-comment">// 4 从下一次匹配的位置开始</span><br><span class="hljs-variable constant_">REGEX</span>.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;xaya&#x27;</span>) <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure><p>使用<code>y</code>修饰符和<code>lastIndex</code>来验证运行方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REGEX</span> = <span class="hljs-regexp">/a/y</span>;<br><br><span class="hljs-variable constant_">REGEX</span>.<span class="hljs-property">lastIndex</span> = <span class="hljs-number">2</span>;<br><span class="hljs-variable constant_">REGEX</span>.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;xaya&#x27;</span>) <span class="hljs-comment">// null 不是粘连，因为位置2指向的是字符&#x27;y&#x27;</span><br><br><span class="hljs-variable constant_">REGEX</span>.<span class="hljs-property">lastIndex</span> = <span class="hljs-number">3</span>;<br><br><span class="hljs-keyword">const</span> match = <span class="hljs-variable constant_">REGEX</span>.<span class="hljs-title function_">exec</span>(<span class="hljs-string">&#x27;xaxa&#x27;</span>);<br>match.<span class="hljs-property">index</span> <span class="hljs-comment">// 3</span><br><span class="hljs-variable constant_">REGEX</span>.<span class="hljs-property">lastIndex</span> <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><h3 id="sticky属性"><a href="#sticky属性" class="headerlink" title="sticky属性"></a>sticky属性</h3><p>ES6正则对象多了<code>sticky</code>属性，表示是否设置了<code>y</code>修饰符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> r = <span class="hljs-regexp">/hello\d/y</span>;<br>r.<span class="hljs-property">sticky</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="flags属性"><a href="#flags属性" class="headerlink" title="flags属性"></a>flags属性</h3><p>ES6为正则表达式新增了<code>flags</code>属性，会返回正则表达式的修饰符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/abc/ig.<span class="hljs-property">source</span> <span class="hljs-comment">// &quot;abc&quot;</span><br><br>/abc/ig.<span class="hljs-property">flags</span> <span class="hljs-comment">// &quot;gi&quot;</span><br></code></pre></td></tr></table></figure><h2 id="ES6新增功能：s修饰符"><a href="#ES6新增功能：s修饰符" class="headerlink" title="ES6新增功能：s修饰符"></a>ES6新增功能：<code>s</code>修饰符</h2><h3 id="dotAll模式：即点代表一切字符"><a href="#dotAll模式：即点代表一切字符" class="headerlink" title="dotAll模式：即点代表一切字符"></a>dotAll模式：即点代表一切字符</h3><p>正则表达式中<code>.</code>是个特殊字符，可以用于表示任意的单个字符。但是它排除了行终止符。而有时候我们希望匹配的是任意单个字符，因此，提案中引入了<code>/s</code>修饰符，使得<code>.</code>可以匹配任意单个字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/foo.<span class="hljs-property">bar</span>/s.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;foo\nbar&#x27;</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h3><p>ES5中，JavaScript的正则表达式只支持“先行断言”和“先行否定断言”。先行断言的意思是：<code>x</code>只有在<code>y</code>前面才匹配，对应的正则模式需写成<code>/x(?=y)/</code>。同理：先行否定断言是指：<code>x</code>只有不在<code>y</code>前面才匹配，对应的正则匹配模式为：<code>/x(?!y)/</code></p><h3 id="后行断言"><a href="#后行断言" class="headerlink" title="后行断言"></a>后行断言</h3><p>ES7中新增了一个提案，允许正则表达式进行“后行断言”。后行断言的意思是：<code>x</code>只有在<code>y</code>的后面才匹配，必须写成<code>/(?&lt;=y)x/</code>。同理：后行否定断言是指：x只有不在y后面才匹配，对应的正则匹配模式为：<code>/(?&lt;!y)x/</code></p><h2 id="Unicode属性类"><a href="#Unicode属性类" class="headerlink" title="Unicode属性类"></a>Unicode属性类</h2><p>目前有一个新提案，允许正则表达式匹配符合Unicode某种属性的所有字符，使用前一定要加上<code>u</code>字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> regexGreekSymbol = <span class="hljs-regexp">/\p&#123;Script=Greek&#125;/u</span>;<br>regexGreekSymbol.<span class="hljs-title function_">test</span>(<span class="hljs-string">&#x27;π&#x27;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>Unicode属性类要指定属性名和属性值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 需要指定Unicode属性名和属性值</span><br>\p&#123;<span class="hljs-title class_">UnicodePropertyName</span>=<span class="hljs-title class_">UnicodePropertyValue</span>&#125;<br><br><span class="hljs-comment">// 对于某些属性，可以只写属性名</span><br>\p&#123;<span class="hljs-title class_">UnicodePropertyName</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 字符串</title>
    <link href="/2022/02/17/javascript/es6-string/"/>
    <url>/2022/02/17/javascript/es6-string/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>和其他类型的编程语言一样，ES6对原有JavaScript字符的基础上进行了扩展和增强；</p><h2 id="Unicode字符表示法"><a href="#Unicode字符表示法" class="headerlink" title="Unicode字符表示法"></a>Unicode字符表示法</h2><p>使用<code>\uxxxx</code>的方式表示字符，但是仅仅能表示<code>\u0000</code>到<code>\uFFFF</code>之间的字符串，超出后必须使用两个字符来表示。</p><h2 id="codePointAt函数"><a href="#codePointAt函数" class="headerlink" title="codePointAt函数"></a>codePointAt函数</h2><p>对于使用4个字节存储的字符，JavaScript不能很好地处理。因此ES6提供了codePointAt()方法来处理4个字节的字符。<code>codePointAt()</code>会返回32位的UTF-16字符，常规码点和<code>charAt()</code>返回值相同。如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;𠮷&quot;</span>;<br>s.<span class="hljs-property">length</span> <span class="hljs-comment">// 2</span><br>s.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// &#x27;&#x27;</span><br>s.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// &#x27;&#x27;</span><br>s.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 55362</span><br>s.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 57271</span><br></code></pre></td></tr></table></figure><p>测试一个字符是2字节还是4字节的方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">is32Bit</span>(<span class="hljs-params">c</span>) &#123;<br>  <span class="hljs-keyword">return</span> c.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">0</span>) &gt; <span class="hljs-number">0xFFFF</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h2><p>ES5开始提供了该方法，用于从码点返回对应字符，但是无法识别UTF-16的字符（也就是Unicode编号大于0xFFFF），但是在ES6开始，该函数可以识别<code>0xFFFF</code>的函数。示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">0x20BB7</span>);<br><br><span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">0x78</span>, <span class="hljs-number">0x1f680</span>, <span class="hljs-number">0x79</span>) === <span class="hljs-string">&#x27;x\uD830D\uDE80y&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="字符串的遍历接口"><a href="#字符串的遍历接口" class="headerlink" title="字符串的遍历接口"></a>字符串的遍历接口</h2><p>ES6为字符提供了遍历接口（因为实现了Iterator接口），使得字符串可以被<code>for ... of</code>遍历循环；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> codePoint <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;foo&#x27;</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(codePoint);<br>&#125;<br><br><span class="hljs-comment">// &quot;f&quot;</span><br><span class="hljs-comment">// &quot;o&quot;</span><br><span class="hljs-comment">// &quot;o&quot;</span><br></code></pre></td></tr></table></figure><p>除了遍历字符串还可以识别大于<code>0xFFFF</code>的码点，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> text = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCodePoint</span>(<span class="hljs-number">0x20BB7</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> text) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="at"><a href="#at" class="headerlink" title="at()"></a>at()</h2><p>ES5中的charAt()方法不能用于识别码点大于<code>0xFFFF</code>的字符，但是ES6提案中的<code>at()</code>却可以识别码点大于<code>0xFFFF</code>的字符。如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>)<br><span class="hljs-string">&#x27;0x20BB7&#x27;</span>.<span class="hljs-title function_">at</span>(<span class="hljs-number">0</span>) <br></code></pre></td></tr></table></figure><h2 id="normalize"><a href="#normalize" class="headerlink" title="normalize()"></a>normalize()</h2><p>ES6提供的normalize()函数可以将字符的不同表示犯法统一为同样的形式，这样称之为Unicode的正规化；使用正规化的原因时欧洲许多国家的字符存在重音符号。有些字符时通过两个符号合成得到的。但是目前还不支持三个字符的合成分解，所以对于多字符情况还是使用正则表达式吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;\u01D1&#x27;</span>.<span class="hljs-title function_">normalize</span>() === <span class="hljs-string">&#x27;\u004F\u030C&#x27;</span>.<span class="hljs-title function_">normalize</span>() <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>此外normalize()方法可以接受一个参数来指定normalize的方式，参数可选值如下：</p><ul><li><code>NFC</code>：默认参数，标准等价合成，返回合成字符；即视觉上和语义上的等价；</li><li><code>NFD</code>：标准等价分解，返回合成字符分解的多个简单字符；</li><li><code>NFKC</code>：兼容等价合成，返回合成字符。即语义上等价、视觉上不等价；</li><li><code>NFKD</code>：兼容等价分解，返回合成字符分解的多个简单字符；</li></ul><h2 id="includes-startsWith-endsWith"><a href="#includes-startsWith-endsWith" class="headerlink" title="includes(), startsWith(), endsWith()"></a>includes(), startsWith(), endsWith()</h2><p>传统的JavaScript只有一个<code>indexOf()</code>方法用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法：</p><ul><li><code>includes()</code>：表示是否找到了参数字符串</li><li><code>startsWith()</code>：表示参数字符串是否在源字符串的头部；</li><li><code>endsWith()</code>：表示参数字符串是否在源字符串的尾部；</li></ul><p>例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> s = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><br>s.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>); <span class="hljs-comment">// true</span><br>s.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;!&#x27;</span>); <span class="hljs-comment">// true</span><br>s.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;o&#x27;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h2><p><code>repeat()</code>方法返回一个新字符串，表示将源字符串重复n次，如果n为小数则会向下取整；如果为负数或者<code>Infinity</code>会报<code>Range Error</code>错误；如果时-1~0之间的数据会先取整再运算，因此当0处理；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">//xxx</span><br><span class="hljs-string">&#x27;hello&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">//hellohello</span><br><span class="hljs-string">&#x27;na&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// &quot;&quot;</span><br><span class="hljs-string">&#x27;na&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-number">2.9</span>); <span class="hljs-comment">// &quot;nana&quot;</span><br><span class="hljs-string">&#x27;na&#x27;</span>.<span class="hljs-title function_">repeat</span>(<span class="hljs-title class_">Infinity</span>); <span class="hljs-comment">// Range Error</span><br><span class="hljs-string">&#x27;na&#x27;</span>.<span class="hljs-title function_">repeat</span>(-<span class="hljs-number">1</span>); <span class="hljs-comment">// Range Error</span><br><span class="hljs-string">&#x27;na&#x27;</span>.<span class="hljs-title function_">repeat</span>(-<span class="hljs-number">0.5</span>); <span class="hljs-comment">// &quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="padStart-padEnd"><a href="#padStart-padEnd" class="headerlink" title="padStart(), padEnd()"></a>padStart(), padEnd()</h2><p>ES7推出字符串补全长度功能。如果某个字符串不够指定长度，这会在头部和尾部补全。此处不再赘述。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ab&#x27;</span>); <span class="hljs-comment">// &#x27;ababx&#x27;;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ab&#x27;</span>); <span class="hljs-comment">// &#x27;abax&#x27;;</span><br><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;ab&#x27;</span>); <span class="hljs-comment">// &#x27;xabab&#x27;;</span><br><span class="hljs-string">&#x27;x&#x27;</span>.<span class="hljs-title function_">padEnd</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ab&#x27;</span>); <span class="hljs-comment">// &#x27;xaba&#x27;;</span><br></code></pre></td></tr></table></figure><p>如果原字符串的长度，等于或大于指定的最小长度，则返回原字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;xxx&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;ab&#x27;</span>); <span class="hljs-comment">// xxx</span><br></code></pre></td></tr></table></figure><p>如果用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串；如果省略第二个字符，则会使用空格来进行填充。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;abc&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;0123456789&#x27;</span>); <span class="hljs-comment">// 0123456abc</span><br><span class="hljs-string">&#x27;X&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">4</span>); <span class="hljs-string">&#x27;   X&#x27;</span><br></code></pre></td></tr></table></figure><p>因此也可以看出它主要是用来给数值补全指定位数或者字符串格式化。例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 数值补位</span><br><span class="hljs-string">&#x27;1&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">// 0000000001</span><br><span class="hljs-string">&#x27;12&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">// 0000000012</span><br><span class="hljs-string">&#x27;123456&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;0&#x27;</span>); <span class="hljs-comment">// 0000123456</span><br><br><span class="hljs-comment">// 字符串格式</span><br><span class="hljs-string">&#x27;12&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>); <span class="hljs-comment">// YYYY-MM-12</span><br><span class="hljs-string">&#x27;09-12&#x27;</span>.<span class="hljs-title function_">padStart</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;YYYY-MM-DD&#x27;</span>); <span class="hljs-comment">// YYYY-09-12</span><br></code></pre></td></tr></table></figure><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>ES6引用了模板字符串来撰写模板，这样可以在表示上更加简洁。类似的语法在Python和Golang中也有；如下所示：使用<code>$&#123;expression&#125;</code>包裹的表达式可以作为占位符解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#result&#x27;</span>).<span class="hljs-title function_">append</span>(<span class="hljs-string">`</span><br><span class="hljs-string">There are &lt;b&gt;<span class="hljs-subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span><br><span class="hljs-string">in your basket, &lt;em&gt;<span class="hljs-subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span><br><span class="hljs-string">are on sale!</span><br><span class="hljs-string">`</span>);<br></code></pre></td></tr></table></figure><p>所有模板字符的空格和换行都是被原样保留的，如果不想要换行，可以加上<code>trim()</code>来消除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#list&#x27;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">`</span><br><span class="hljs-string">&lt;ul&gt;</span><br><span class="hljs-string">&lt;li&gt;first&lt;/li&gt;</span><br><span class="hljs-string">&lt;li&gt;second&lt;/li&gt;</span><br><span class="hljs-string">&lt;/ul&gt;</span><br><span class="hljs-string">`</span>.<span class="hljs-title function_">trim</span>());<br></code></pre></td></tr></table></figure><p>模板字符串除了可以嵌套JavaScript表达式，还可以调用函数；除此之外，模板表达式还可以嵌套。注意：由于模板字符串可以传入JavaScript，因此变量在使用前必须声明，否则会编译失败；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">tmpl</span> = addrs =&gt; <span class="hljs-string">`</span><br><span class="hljs-string">&lt;table&gt;</span><br><span class="hljs-string"><span class="hljs-subst">$&#123;addrs.map(addr =&gt; <span class="hljs-string">`</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;tr&gt;&lt;td&gt;<span class="hljs-subst">$&#123;addr.first&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">&lt;tr&gt;&lt;td&gt;<span class="hljs-subst">$&#123;addr.last&#125;</span>&lt;/td&gt;&lt;/tr&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-subst"><span class="hljs-string">`</span>).join(<span class="hljs-string">&#x27;&#x27;</span>)&#125;</span></span><br><span class="hljs-string">&lt;/table&gt;</span><br><span class="hljs-string">`</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 变量解构</title>
    <link href="/2022/02/17/javascript/es6-var-expand/"/>
    <url>/2022/02/17/javascript/es6-var-expand/</url>
    
    <content type="html"><![CDATA[<h1 id="变量解构与赋值"><a href="#变量解构与赋值" class="headerlink" title="变量解构与赋值"></a>变量解构与赋值</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>ES6允许按照一定的模式，从数组和对象中提取值，对变量进行赋值。写法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [a, b, c] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>a <span class="hljs-comment">// 1</span><br>b <span class="hljs-comment">// 2</span><br>c <span class="hljs-comment">// 3</span><br><br><span class="hljs-comment">// 与下列写法等价</span><br><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>本质上只有等号两边的模式匹配的情况下，解构变量才会成功，如果解构不成功，那么值就等于undefined；但是即便两边的模式不完全匹配也是可以解构成功的。即：等号右边的模式仅等于等号左边声明的一部分。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [x, y] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>x <span class="hljs-comment">// 1</span><br>y <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>除了<code>var</code>变量可以解构赋值，还有<code>let</code>和<code>const</code>也可以解构，除此之外，一种数据结构只要其有Iterator接口都可以使用数组解构赋值。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [a, b, c] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(&#123;<span class="hljs-string">&#x27;aa&#x27;</span>, <span class="hljs-string">&#x27;bb&#x27;</span>, <span class="hljs-string">&#x27;cc&#x27;</span>&#125;);<br>a <span class="hljs-comment">// aa</span><br>b <span class="hljs-comment">// bb</span><br>c <span class="hljs-comment">// cc</span><br><br><span class="hljs-keyword">const</span> [d, e, f] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(&#123;<span class="hljs-string">&#x27;dd&#x27;</span>, <span class="hljs-string">&#x27;ee&#x27;</span>, <span class="hljs-string">&#x27;ff&#x27;</span>&#125;);<br>d <span class="hljs-comment">// dd</span><br>e <span class="hljs-comment">// ee</span><br>f <span class="hljs-comment">// ff</span><br></code></pre></td></tr></table></figure><p>使用Generator函数解斐波那契数列，内部使用解构赋值，每次循环过程中变量<code>a</code>和<code>b</code>都会重新赋值；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span>* <span class="hljs-title function_">fibs</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">yield</span> a;<br>    [a, b] = [b, a + b];<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> [first, second, third, fourth, fifth, sixth] = <span class="hljs-title function_">fibs</span>();<br>sixth <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>变量解构可以在声明前初始化，注意：如果解构右侧值不等于<code>undefined</code>那么初始化的值就不会生效。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> [x, y = <span class="hljs-string">&#x27;y&#x27;</span>] = [x, <span class="hljs-literal">undefined</span>];<br>y <span class="hljs-comment">// y - 解构初始化成功</span><br><br><span class="hljs-keyword">let</span> [x, y = <span class="hljs-string">&#x27;y&#x27;</span>] = [x, <span class="hljs-literal">null</span>];<br>y <span class="hljs-comment">// null - 解构初始化失败</span><br></code></pre></td></tr></table></figure><p>如果解构默认值是一个表达式，那么只有在需要使用到表达式的时候才会赋值，否则默认值无效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">let</span> [x = <span class="hljs-title function_">f</span>()] = [<span class="hljs-number">1</span>];<br>x <span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 由于x能在后面的数组中获取到数值1，因此默认值中的f()不生效；</span><br></code></pre></td></tr></table></figure><h2 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h2><p>除了可以对数组做解构，对象同样可以做解构，但是与数组有区别的是：对象解构只有在对象属性名相同的情况下才能解构成功，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;foo, bar&#125; = &#123;<span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span>&#125;<br>foo <span class="hljs-comment">// aaa</span><br>bar <span class="hljs-comment">// bbb</span><br><br><span class="hljs-keyword">let</span> &#123;baz&#125; = &#123;<span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span>&#125;<br>baz <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>如果变量名和属性名不一样必须写成下面这样才行；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> &#123;<span class="hljs-attr">foo</span>: baz&#125; = &#123;<span class="hljs-attr">foo</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>, <span class="hljs-attr">bar</span>: <span class="hljs-string">&#x27;bbb&#x27;</span>&#125;<br>baz <span class="hljs-comment">// aaa</span><br><br><span class="hljs-keyword">let</span> object = &#123;<span class="hljs-attr">first</span>: <span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&#x27;world&#x27;</span>&#125;;<br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">first</span>: f, <span class="hljs-attr">last</span>: l&#125; = object;<br>f <span class="hljs-comment">// hello</span><br>l <span class="hljs-comment">// world</span><br></code></pre></td></tr></table></figure><p>解构也可以用于嵌套结构的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">p</span>: [<br>    <span class="hljs-string">&#x27;Hello&#x27;</span>,<br>    &#123;<span class="hljs-attr">y</span>: <span class="hljs-string">&#x27;world&#x27;</span>&#125;<br>  ]<br>&#125;;<br><br><span class="hljs-keyword">var</span> &#123;<span class="hljs-attr">p</span>: [x, &#123;y&#125;]&#125; = obj;<br>x <span class="hljs-comment">// hello</span><br>y <span class="hljs-comment">// world</span><br><span class="hljs-comment">// p 为模式而不是变量，因此也不会被赋值</span><br></code></pre></td></tr></table></figure><h2 id="解构已声明的变量"><a href="#解构已声明的变量" class="headerlink" title="解构已声明的变量"></a>解构已声明的变量</h2><p>如果需要给已经声明的变量解构，一定要使用圆括号将其包裹起来，否则JavaScript引擎会将其解析为代码块。从而导致解构失败。ES6在解构变量时，除非会造成歧义必须使用圆括号围起来，否则不推荐使用圆括号；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Wrong syntax</span><br><span class="hljs-keyword">var</span> x;<br>&#123;x&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment">// Correct syntax</span><br><span class="hljs-keyword">var</span> x;<br>(&#123;x&#125; = &#123;<span class="hljs-attr">x</span>: <span class="hljs-number">1</span>&#125;)<br><br><span class="hljs-comment">// 还可以很方便地将现有对象的方法赋值到某个变量</span><br><span class="hljs-keyword">let</span> &#123;log, sin, cos&#125; = <span class="hljs-title class_">Math</span>;<br></code></pre></td></tr></table></figure><h2 id="字符串的解构"><a href="#字符串的解构" class="headerlink" title="字符串的解构"></a>字符串的解构</h2><p>字符串也可以解构，解构出来的结果是当作数组处理。程序代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> [a, b, c, d, e] = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>a <span class="hljs-comment">// &#x27;h&#x27;</span><br>b <span class="hljs-comment">// &#x27;e&#x27;</span><br>c <span class="hljs-comment">// &#x27;l&#x27;</span><br>d <span class="hljs-comment">// &#x27;l&#x27;</span><br>e <span class="hljs-comment">// &#x27;o&#x27;</span><br><br><span class="hljs-comment">// 类似数组对象都存在一个length属性，也可以通过解构获得</span><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">length</span>: len&#125; = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>len <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><h2 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h2><p>解构赋值时，如果等号右边是数值和布尔值，则会先转换为对象；但是<code>undefined</code>和<code>null</code>无法转为对象，因此会解构失败；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">toString</span>: s&#125; = <span class="hljs-number">123</span>;<br>s === <span class="hljs-title class_">Number</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> <span class="hljs-comment">// true</span><br><br><span class="hljs-keyword">let</span> &#123;<span class="hljs-attr">toString</span>: s&#125; = <span class="hljs-literal">true</span>;<br>s === <span class="hljs-title class_">Boolean</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h2 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h2><p>函数参数也可以解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">[x, y]</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + y;<br>&#125;<br><br><span class="hljs-title function_">add</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]); <span class="hljs-comment">// 3</span><br><br>[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]].<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">[a, b]</span>) =&gt;</span> a + b);<br><span class="hljs-comment">// [3, 7]</span><br></code></pre></td></tr></table></figure><p>函数参数的解构也可以使用默认值（这不是废话嘛）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">&#123;x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>&#125; = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> [x, y];<br>&#125;<br><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">8</span>&#125;); <span class="hljs-comment">// [3, 8]</span><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>&#125;); <span class="hljs-comment">// [3, 0]</span><br><span class="hljs-title function_">move</span>(&#123;&#125;); <span class="hljs-comment">// [0, 0]</span><br><span class="hljs-title function_">move</span>(); <span class="hljs-comment">// [0, 0]</span><br></code></pre></td></tr></table></figure><p>下面这种写法不是解构，而是给函数参数设置默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">&#123;x, y&#125; = &#123;x: <span class="hljs-number">0</span>, y: <span class="hljs-number">0</span>&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> [x, y];<br>&#125;<br><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">8</span>&#125;); <span class="hljs-comment">// [3, 8]</span><br><span class="hljs-title function_">move</span>(&#123;<span class="hljs-attr">x</span>: <span class="hljs-number">3</span>&#125;); <span class="hljs-comment">// [3, undefined]</span><br><span class="hljs-title function_">move</span>(&#123;&#125;); <span class="hljs-comment">// [undefined, undefined]</span><br><span class="hljs-title function_">move</span>(); <span class="hljs-comment">// [0, 0]</span><br></code></pre></td></tr></table></figure><h2 id="说了那么多，解构有什么用呢？"><a href="#说了那么多，解构有什么用呢？" class="headerlink" title="说了那么多，解构有什么用呢？"></a>说了那么多，解构有什么用呢？</h2><h3 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[x, y] = [y, x]<br></code></pre></td></tr></table></figure><h3 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">example</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>&#125;<br><br><span class="hljs-keyword">var</span> [a, b, c] = <span class="hljs-title function_">example</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">example</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">foo</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">bar</span>: <br>  &#125;;<br>&#125;<br>  <br><span class="hljs-keyword">var</span> &#123;foo, bar&#125; = <span class="hljs-title function_">example</span>();<br></code></pre></td></tr></table></figure><h3 id="函数参数的定义"><a href="#函数参数的定义" class="headerlink" title="函数参数的定义"></a>函数参数的定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">[x, y, z]</span>) &#123; ... &#125;<br><span class="hljs-title function_">f</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]);<br></code></pre></td></tr></table></figure><h3 id="提取JSON数据"><a href="#提取JSON数据" class="headerlink" title="提取JSON数据"></a>提取JSON数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> jsonData = &#123;<br>  <span class="hljs-attr">id</span>: <span class="hljs-number">42</span>,<br>  <span class="hljs-attr">status</span>: <span class="hljs-string">&quot;OK&quot;</span>,<br>  <span class="hljs-attr">data</span>: [<span class="hljs-number">867</span>, <span class="hljs-number">5309</span>]<br>&#125;;<br><br><span class="hljs-keyword">let</span> &#123;id, status, <span class="hljs-attr">data</span>: number&#125; = jsonData;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(id, status, number);<br><span class="hljs-comment">// 42, &quot;OK&quot;, [867, 5309]</span><br></code></pre></td></tr></table></figure><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">jQuery.<span class="hljs-property">ajax</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">url, &#123;</span><br><span class="hljs-params">  <span class="hljs-keyword">async</span> = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  beforeSend = <span class="hljs-keyword">function</span>() &#123;&#125;,</span><br><span class="hljs-params">  cache = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  complete = <span class="hljs-keyword">function</span>() &#123;&#125;,</span><br><span class="hljs-params">  crossDomain = <span class="hljs-literal">false</span>,</span><br><span class="hljs-params">  <span class="hljs-variable language_">global</span> = <span class="hljs-literal">true</span>,</span><br><span class="hljs-params">  // ... more config params</span><br><span class="hljs-params">&#125;</span>) &#123;<br>  <span class="hljs-comment">// ... do stuff</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="遍历Map解构"><a href="#遍历Map解构" class="headerlink" title="遍历Map解构"></a>遍历Map解构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;hello&#x27;</span>);<br>map.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;last&#x27;</span>, <span class="hljs-string">&#x27;world&#x27;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key, value] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&quot; is &quot;</span> + value);<br>&#125;<br><br><span class="hljs-comment">// first is hello</span><br><span class="hljs-comment">// last is world</span><br><br><span class="hljs-comment">// 如果只想获取键名称，可以这样</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [key] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-comment">// ... do something</span><br>&#125;<br><br><span class="hljs-comment">// 只想获取键值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> [,value] <span class="hljs-keyword">of</span> map) &#123;<br>  <span class="hljs-comment">// ... do something</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="输入模块的指定方法"><a href="#输入模块的指定方法" class="headerlink" title="输入模块的指定方法"></a>输入模块的指定方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SourceMapConsumer</span>, <span class="hljs-title class_">SourceNode</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;source-map&quot;</span>);<br><br><span class="hljs-comment">// 除此之外使用import也可以使用解构倒入指定方法</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">SourceMapConsumer</span>, <span class="hljs-title class_">SourceNode</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;source-map&#x27;</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6 let和const的区别</title>
    <link href="/2022/02/17/javascript/es6-let-const/"/>
    <url>/2022/02/17/javascript/es6-let-const/</url>
    
    <content type="html"><![CDATA[<h1 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>跟<code>var</code>的用法类似，都是用于定义变量，但是与<code>var</code>不同的是：<code>let</code>声明的变量仅在定义的区域起作用。如果你在IDE中使用<code>let</code>关键字必须先声明再使用，否则会直接报错无法通过ESLint编译。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">123</span>; <span class="hljs-comment">// 变量a仅在这个代码区块有效</span><br>  <span class="hljs-keyword">var</span> b = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>&#125;<br><br>a <span class="hljs-comment">// Undefined</span><br>b <span class="hljs-comment">// hello</span><br></code></pre></td></tr></table></figure><h2 id="这有什么好处？"><a href="#这有什么好处？" class="headerlink" title="这有什么好处？"></a>这有什么好处？</h2><p>由于<code>let</code>声明的变量不会被覆盖，因此很适合在迭代器中做指针，看看下面这两段程序的结果会怎么样？</p><p>使用<code>var</code>做循环指针：每次迭代过程中指针<code>i</code>的值都会被覆盖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  a[i] = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>  &#125;;<br>&#125;<br><br>a[<span class="hljs-number">6</span>](); <span class="hljs-comment">// 10</span><br></code></pre></td></tr></table></figure><p>使用<code>let</code>做循环指针：每次迭代过程中指针<code>i</code>的值都会指向当前值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [];<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  a[i] = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    cosole.<span class="hljs-title function_">log</span>(i);<br>  &#125;;<br>&#125;<br><br>a[<span class="hljs-number">6</span>](); <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h2 id="暂时性死区（Temporary-Dead-Zone）"><a href="#暂时性死区（Temporary-Dead-Zone）" class="headerlink" title="暂时性死区（Temporary Dead Zone）"></a>暂时性死区（Temporary Dead Zone）</h2><p>只要块级作用域内存在<code>let</code>关键字，那么所声明的变量就与作用域牢牢地绑定在了一块。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> tmp = <span class="hljs-number">123</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  tmp = <span class="hljs-string">&#x27;abc&#x27;</span>; <span class="hljs-comment">// 由于块区存在let绑定变量，因此这里报错显示变量未定义</span><br>  <span class="hljs-keyword">let</span> tmp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>ES6中规定在块级作用域定义的变量只在所在块内才有效。块级可以嵌套。内层和外层可以定义同名的变量；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment">// 因为处在不同的块，所以不会报错</span><br>  &#123;<br>    <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;world&#x27;</span> <span class="hljs-comment">// 内层定义跟外层不冲突</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="DO表达式"><a href="#DO表达式" class="headerlink" title="DO表达式"></a>DO表达式</h2><p>将块级作用域转换为表达式，这样就可以取到返回值，使用如下：如果不使用do表达式那么块内变量t在外层将无法取到；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> x = <span class="hljs-keyword">do</span> &#123;<br>  <span class="hljs-keyword">let</span> t = <span class="hljs-title function_">f</span>();<br>  t * t + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="冻结对象"><a href="#冻结对象" class="headerlink" title="冻结对象"></a>冻结对象</h2><p>使用<code>const</code>关键字定义的变量跟<code>let</code>一样需要先定义再使用。但是常量并不意味着变量不能修改。看看下面的程序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = [];<br><br>a.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);<br>a <span class="hljs-comment">// Hello</span><br><br>a.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>;<br>a <span class="hljs-comment">// []</span><br><br>a = [<span class="hljs-string">&#x27;David&#x27;</span>] <span class="hljs-comment">// TypeError: Assignment to constant variable</span><br></code></pre></td></tr></table></figure><p>如果需要冻结一个对象，可以使用<code>Object.freeze(obj)</code>，除了冻结对象，还需要冻结其属性。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title function_">constantize</span> = (<span class="hljs-params">obj</span>) =&gt; &#123;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(obj);<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">key, value</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[key] === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>      <span class="hljs-title function_">constantize</span>(obj[key]);<br>    &#125;<br>  &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>初识 ES6</title>
    <link href="/2022/02/17/javascript/es6-getting-started/"/>
    <url>/2022/02/17/javascript/es6-getting-started/</url>
    
    <content type="html"><![CDATA[<h1 id="ES6历史"><a href="#ES6历史" class="headerlink" title="ES6历史"></a>ES6历史</h1><p> ES6全程ECMAScript 6.0，也叫ES2015。ECMA是国际标准化组织，推出这个标准是为了希望此种编程语言能够成为国际标准。因此我们常说的JavaScript实际上是ES的一种实现形式，而ES是JavaScript的规范草案。很多人在一开始学习JavaScript的时候一看到Java就会把它和Sun（Oracle）公司的框架联结起来，实际上两者并没有什么关系。</p><h1 id="查看Node支持的ES特性"><a href="#查看Node支持的ES特性" class="headerlink" title="查看Node支持的ES特性"></a>查看Node支持的ES特性</h1><p>打开终端，前提是需要装好node（为了方便切换node版本你可以安装NVM），然后在控制台输入下列语句：(不同版本的node显示的结果不相同)</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">node --v8-options | grep harmony</span><br><br>--es-staging (enable test-worthy harmony features (for internal use only))<br>  --harmony (enable all completed harmony features)<br>  --harmony-shipping (enable all shipped harmony features)<br>  --harmony-private-methods (enable &quot;harmony private methods in class literals&quot; (in progress))<br>  --harmony-regexp-sequence (enable &quot;RegExp Unicode sequence properties&quot; (in progress))<br>  --harmony-weak-refs (enable &quot;harmony weak references&quot; (in progress))<br>  --harmony-intl-dateformat-quarter (enable &quot;Add quarter option to DateTimeFormat&quot; (in progress))<br>  --harmony-intl-add-calendar-numbering-system (enable &quot;Add calendar and numberingSystem to DateTimeFormat&quot;)<br>  --harmony-intl-dateformat-day-period (enable &quot;Add dayPeriod option to DateTimeFormat&quot;)<br></code></pre></td></tr></table></figure><h1 id="使用Babel完成ES6解码"><a href="#使用Babel完成ES6解码" class="headerlink" title="使用Babel完成ES6解码"></a>使用Babel完成ES6解码</h1><p> 因为ES6草案还在不断完善，而且由于不同平台环境的差异，导致支持ES6的情况都不相同。这个时候Babel可以将我们旧的ES5语法转换成ES6语法，这样在写程序的时候就不用关心底层的环境了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 转码前语法</span><br>input.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item + <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">// 转码后</span><br>input.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>)&#123;<br>  <span class="hljs-keyword">return</span> item + <span class="hljs-number">1</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="配置Babel"><a href="#配置Babel" class="headerlink" title="配置Babel"></a>配置Babel</h2><p>核心文件就是.babelrc文件，一般在引入Babel后都可以看到这个文件，细则可以去看Babel的官方文档，这里就不扯了。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程原理——动态与函数式编程</title>
    <link href="/2022/02/16/java-core/ch06/"/>
    <url>/2022/02/16/java-core/ch06/</url>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><ol><li>反射是在类运行时动态获取类型的信息。比如接口信息、成员信息、方法信息、构造函数信息等。根据动态获取到的信息创建对象、访问/修改成员、调用方法等。</li><li>使用反射可以得到类的名称，调用方法getName()。其中还包括getSimpleName()，getCanonicalName()以及getPackage()。</li><li>类中定义的静态和实例变量称之为字段，使用Field类表示，可以获取字段的访问权限，设置访问权限，获得字段值以及设置字段值。除此之外，还可以获得字段的修饰符以及基本类型。需要注意的是使用反射返回的修饰符是一个整型。如果需要查看具体的返回值类型，可以使用Modifier进行再次判断。</li><li>通过反射也可以获取类中的方法信息：对于invoke方法而言，如果Method是静态方法，则obj被忽略为null，args可以为null；</li><li>创建对象和构造方法：<code>public T newInstance() throws InstantiationException, IllegalAccessException</code>；</li><li>类型检查和转换：使用<code>instanceof</code>关键字可以用于判断变量指向的实际对象类型，instanceof后面的类型是在代码中确定的；</li><li>除此之外，Class方法中还有其他的一些方法可以用于获取类的声明信息、修饰符、父类、接口以及注解等；</li><li>对于数组类型可以使用<code>public native Class&lt;T&gt; getComponentType()</code>获取其元素类型；</li><li>反射与枚举：枚举类型也有一个专门的方法：<code>public T[] getEnumConstants()</code>；</li><li>反射与泛型：可以获取泛型参数的信息：</li></ol><ul><li>Class类有如下方法：<code>public TypeVariable&lt;Class&lt;T&gt;&gt;[] getTypeParameters()</code></li><li>Field有如下方法：<code>public Type getGenericType()</code></li><li>Method有如下方法：<code>public Type getGenericReturnType()</code>，<code>public Type[] getGenericParameterTypes()</code>和<code>public Type[] getGenericExceptionTypes()</code></li><li>Constructor有如下方法：<code>public Type[] getGenericParameterTypes()</code></li></ul><ol><li>Type实现了Class方法，其中还实现了下列方法：</li></ol><ul><li>TypeVariable类型参数可以有上界；</li><li>ParameterizedType参数化的类型，有原始类型和具体类型；</li><li>WildcardType通配符类型</li><li>通过反射获取泛型示例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericTest</span>&lt;U <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Comparable</span>&lt;U, V&gt; &#123;<br>        U u;<br>        V v;<br>        List&lt;String&gt; list;<br>        <span class="hljs-keyword">public</span> U <span class="hljs-title function_">test</span><span class="hljs-params">(List&lt;? extends Number&gt; numbers)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Class&lt;?&gt; cls = GenericTest.class;<br>        <span class="hljs-keyword">for</span> (TypeVariable t : cls.getTypeParameters()) &#123;<br>            System.out.println(t.getName() + <span class="hljs-string">&quot; extends &quot;</span> + Arrays.toString(t.getBounds()));<br>        &#125;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">fu</span> <span class="hljs-operator">=</span> cls.getDeclaredField(<span class="hljs-string">&quot;u&quot;</span>);<br>        System.out.println(fu.getGenericType());<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> cls.getDeclaredField(<span class="hljs-string">&quot;list&quot;</span>);<br>        <span class="hljs-type">Type</span> <span class="hljs-variable">listType</span> <span class="hljs-operator">=</span> first.getGenericType();<br>        <span class="hljs-keyword">if</span> (!listType <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>            <span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">pType</span> <span class="hljs-operator">=</span> (ParameterizedType)listType;<br>            System.out.println(<span class="hljs-string">&quot;raw type: &quot;</span> + pType.getRawType() + <span class="hljs-string">&quot; ,type arguments:&quot;</span> + Arrays.toString(pType.getActualTypeArguments()));<br>        &#125;<br>        <span class="hljs-comment">// 省略代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>总结：反射虽然灵活，但一般情况下我们并不优先建议，原因有如下：</li></ol><ul><li>反射更容易出现运行时错误，使用显式的类和接口，编译器能帮我们做类型检查，减少错误，但使用反射，类型是运行时才知道的，编译器无能为力；</li><li>反射会降低性能，在访问字段、调用方法前，反射要先查找对应的Field/Method，要慢一些；</li></ul><ol><li>如果能用接口实现同样的灵活性，就不要使用反射；</li></ol><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ol><li>注解是给程序添加一些信息，这些信息可以用于修饰它后面紧挨着的其他代码元素，比如类、接口、字段、方法、方法中的参数、构造方法等。注解可以被编译器、程序运行时和其他工具使用，用于增强或修改程序；</li><li>Java内置<code>@Override</code>，<code>@Deprecated</code>和<code>@SuppressWarning</code>三个注解，这三个注解远远不能满足日常开发需求，因此自定义注解产生。</li><li>注解是声明式编程中的一种巧妙应用，在这种风格中，程序通常由下列三部分实现：</li></ol><ul><li>声明的关键字和语法本身；</li><li>系统/框架/库，它们负责解释，执行声明式的语句；</li><li>应用程序，使用声明式编程风格编写程序；</li></ul><ol><li>创建注解：使用<code>@interface</code>关键字声明注解，另外是需要在声明的注解标明元注解。以<code>@Override</code>注解为例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.1 ElementType是一个枚举，可以取下列值：</p><ul><li>TYPE：表示类、接口（包括注解），或者是枚举类型</li><li>FIELD：字段，包括枚举常量</li><li>METHOD：方法</li><li>PARAMETER：方法中的参数</li><li>CONSTRUCTOR：构造方法</li><li>LOCAL_VARIABLE：本地变量</li><li>MODULE：模块（Java 9引入）</li><li></li></ul><p>4.2 如果没有声明<code>@Target</code>，默认适用于所有类型；</p><p>4.3 <code>@Retention</code>表示注解信息保留到什么时候，取值只有一个，类型为RetentionPolicy，它是一个枚举，有三个值：</p><ul><li>SOURCE：只在源代码中保留，编译器将代码编译为字节码文件后去掉；</li><li>CLASS：保留到字节码文件中，但Java虚拟机将class文件加载到内存时不一定会在内存中保留（默认值）；</li><li>RUNTIME：一直保留到运行时</li></ul><p>4.4 <code>@Documented</code>注解表示注解信息包含到生成文档中；</p><p>4.5 注解不能继承，但是使用了注解的父类一旦被子类继承，那么子类就可以继承父类的注解，如果要实现这样的效果，需要在父类的注解中加上<code>@Inherited</code></p><ol><li>总结：注解提升了Java语言的表达能力，有效地实现了应用功能和底层功能的分离。框架/库的程序员可以专注于底层实现，借助反射实现通用功能，提供注解给应用程序员使用，应用程序员可以专注于应用功能，通过简单的声明式注解与框架/库进行协作；</li></ol><h1 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h1><ol><li>静态代理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SImpleStaticProxy</span> &#123;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IService</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 真实对象</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IService</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;RealService Say Hello!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 代理对象</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TraceProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IService</span> &#123;<br>        <span class="hljs-keyword">private</span> IService realService;<br><br>        TraceProxy(IService realService) &#123;<br>            <span class="hljs-built_in">this</span>.realService = realService;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;entering say hello...&quot;</span>);<br>            <span class="hljs-built_in">this</span>.realService.sayHello();<br>            System.out.println(<span class="hljs-string">&quot;exited say hello...&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">IService</span> <span class="hljs-variable">realService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealService</span>();<br>        <span class="hljs-type">IService</span> <span class="hljs-variable">proxyService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TraceProxy</span>(realService);<br>        proxyService.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>动态代理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleDynamicProxy</span> &#123;<br>    <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IService</span> &#123;<br>        <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 真实对象</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IService</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;Real Service Say Hello&quot;</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 代理对象实现JDK中的InvocationHandler接口</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleInvocationHandle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span> &#123;<br>        <span class="hljs-keyword">private</span> Object realObj;<br><br>        SimpleInvocationHandle(Object realObj) &#123;<br>            <span class="hljs-built_in">this</span>.realObj = realObj;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 重写invoke方法</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>            <span class="hljs-comment">// proxy：表示代理对象本身，不是被代理对象，一般用处不大</span><br>            <span class="hljs-comment">// method：表示正在被调用的方法</span><br>            <span class="hljs-comment">// args：表示方法的参数</span><br>            System.out.println(<span class="hljs-string">&quot;entering &quot;</span> + method.getName());<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(realObj, args);<br>            System.out.println(<span class="hljs-string">&quot;leaving &quot;</span> + method.getName());<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">IService</span> <span class="hljs-variable">realService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealService</span>();<br>        <span class="hljs-type">IService</span> <span class="hljs-variable">proxyService</span> <span class="hljs-operator">=</span> (IService) Proxy.newProxyInstance(IService.class.getClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>&lt;?&gt;[]&#123;IService.class&#125;,<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleInvocationHandle</span>(realService)); <span class="hljs-comment">// 使用Proxy.newProxyInstance生成一个代理对象</span><br>        proxyService.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>newProxyInstance的声明如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">newProxyInstance</span><span class="hljs-params">(ClassLoader classLoader, Class&lt;?&gt;[] interfaces, InvocationHandler h)</span>;<br><span class="hljs-comment">// ClassLoader：表示类加载器；</span><br><span class="hljs-comment">// Class&lt;?&gt;[] interfaces：表示代理类要实现的接口列表，元素类型只能是接口，不能是普通类；</span><br><span class="hljs-comment">// InvocationHandler：是一个接口，对代理接口所有方法的调用都会转给该方法；</span><br><span class="hljs-comment">// newProxyInstance是Object类型，它不能强制转换为某个类型，只能转换为接口类型；</span><br></code></pre></td></tr></table></figure><ol><li>类定义本身与被代理的对象没有关系，与InvocationHandler的具体实现也没有关系，而主要与接口数组有关，给定的接口数组会动态地创建每个接口的实现代码，实现就是转发给InvocationHandler，与被代理对象的关系以及对它的调用由InvocationHandler实现管理。</li><li>总结：使用动态代理，可以编写通用的代理逻辑，用于各种类型的被代理对象，而不需要为每个被代理的类型都是创建一个静态代理类。</li><li>局限性：JDK中的动态代理只能为接口创建代理，返回的代理对象也只能转换到某个接口类型；如果一个类没有接口，或者希望代理非接口中定义的方法，就无能为力了。</li><li>使用cglib的动态代理类可以解决上述的痛点。示例如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleCGLibDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RealService</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object object, Method method, Object[] args, MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>            System.out.println(<span class="hljs-string">&quot;entering &quot;</span> + method.getName());<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proxy.invokeSuper(object, args);<br>            System.out.println(<span class="hljs-string">&quot;leaving &quot;</span> + method.getName());<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">getProxy</span><span class="hljs-params">(Class&lt;T&gt; cls)</span> &#123;<br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        enhancer.setSuperclass(cls);<br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleInterceptor</span>());<br>        <span class="hljs-keyword">return</span> (T)enhancer.create();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RealService</span> <span class="hljs-variable">proxyService</span> <span class="hljs-operator">=</span> getProxy(RealService.class);<br>        proxyService.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>cglib代理面向的一个具体的类，创建对象只有一个；而SDK代理面向的是接口；</li></ol><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><ol><li>类加载机制可以应用于下列场景：</li></ol><ul><li>热部署：不重启程序的情况下动态替换</li><li>应用模块化和互相隔离：不同的ClassLoader可以加载相同的类，但是互相隔离、互不影响。例如：Tomcat管理多个Web应用程序；</li><li>从不同地方灵活加载：系统默认从本地.class文件或者.jar包中加载字节码文件，通过自定义ClassLoader可以从共享服务器、数据库、缓存服务器等其他地方加载字节码文件；</li></ul><ol><li>类加载机制组成部分：</li></ol><ul><li>启动类型加载器（Bootstrap Classloader）：一般由C++实现的，它负责加载Java的基础类，主要是<JAVA_HOME>/lib/rt.jar；</li><li>扩展类加载器（Extension Classloader）：加载器的实现类sun.misc.Launcher$ExtClassLoader，它负责加载Java的一些扩展类；</li><li>应用程序类加载器（Application ClassLoader）：实现类是sun.misc.Launcher$AppClassLoader。负责加载应用程序的类，包括自己写的和引入的第三方类库，即所有在类路径中指定的类；</li></ul><ol><li>类加载的全过程：</li></ol><ul><li>1）判断是否已经加载过，如果加载过直接返回Class对象，一个类只会被一个ClassLoader加载过一次；</li><li>2）如果没有被加载，先让父ClassLoader去加载，如果加载成功，返回得到的Class对象；</li><li>3）在父ClassLoader没有加载成功的前提下，自己尝试加载类；</li></ul><ol><li>这个过程称之为“双亲委派”模型。优先让父ClassLoader去加载。</li><li>类加载都按照“双亲委派”模型，但是也有例外：</li></ol><ul><li>自定义加载顺序：即自定义的类加载器可以不遵循“双亲委派”模型，但一般上是不推荐的；</li><li>网状加载顺序：在OSGI和Java9中存在网状加载的情况。</li><li>父加载器委派给子加载器：典型应用有JNDI。</li></ul><ol><li>类加载器的例子：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoaderDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> ClassLoaderDemo.class.getClassLoader();<br>        <span class="hljs-keyword">while</span> (c1 != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(c1.getClass().getName());<br>            c1 = c1.getParent();<br>        &#125;<br>        System.out.println(String.class.getClassLoader());<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出结果为：</span><br><span class="hljs-comment">// sun.misc.Launcher.$AppClassLoader</span><br><span class="hljs-comment">// sun.misc.Launcher.$ExtClassLoader</span><br></code></pre></td></tr></table></figure><ol><li>ClassLoader中有一个默认方法<code>public static ClassLoader getSystemClassLoader()</code>，还有一个默认方法用于加载类： <code>public class&lt;?&gt; loadClass(String name) throws ClassNotFoundException</code>。示例如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br><span class="hljs-keyword">try</span> &#123;<br>    Class&lt;?&gt; cls = c1.loadClass(<span class="hljs-string">&quot;java.util.ArrayList&quot;</span>);<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">actualLoader</span> <span class="hljs-operator">=</span> cls.getClassLoader();<br>    System.out.println(actualloader);<br>&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>类加载器是一个抽象类。Application ClassLoader和Extension ClassLoader的具体实现类分别是sun.misc.Launcher$AppClassLoader以及sun.misc.Launcher$ExtClassLoader。Bootstrap ClassLoader不是由Java实现的。因此没有实现类。需要说明的是，由于是委派机制。使用getClassLoader()方法返回的不一定调用load-Class.</li><li>ClassLoader中的loadClass方法只会加载类但是不会执行。示例如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CLInitDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span> &#123;<br>        <span class="hljs-keyword">static</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> CLInitDemo.class.getName() + <span class="hljs-string">&quot;$Hello&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; cls = c1.loadClass(className); <span class="hljs-comment">// 不会输出&quot;hello&quot;</span><br>            <span class="hljs-comment">// Class&lt;?&gt; cls = Class.forName(className); // 会输出&quot;hello&quot;</span><br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>通过更改配置，不用改变代码，就可以改变程序的行为，在设计模式中，也是一种策略模式。</li></ol><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="单个字符"><a href="#单个字符" class="headerlink" title="单个字符"></a>单个字符</h2><ol><li>用字符本身表示</li><li>特殊字符：例如制表符’\t’，换行符’\n’以及回车符’\r’；</li><li>八进制表示的字符：以’\0’开头，后面加上1~3位数字，例如\0141(8) -&gt; 97(10)</li><li>十六进制表示的字符：以’\x’开头，后面跟两位字符，比如\x6A(16) -&gt; 106(10)</li><li>Unicode表示字符，以’\u’开头，后面跟4位字符</li><li>斜杠本身就是特殊字符，如果需要使用斜杠需要用一个斜杠进行转义；</li><li>元字符：例如“.、*、?、+”等，如果要皮匹配自身，需要在前面加’’进行转义</li></ol><h2 id="字符祖"><a href="#字符祖" class="headerlink" title="字符祖"></a>字符祖</h2><ol><li>‘.’字符匹配除了换行符以外的任意字符，也可以使用“单行匹配模式”或者“点号匹配模式”。可以以(?s)开头，s表示single line；</li><li>中括号[]表示匹配字符组中的任意一个字符，例如[abcd]匹配任意一个字母；</li><li>‘^’表示排除符号；</li><li>\d：匹配一个数字字符，等同于[0-9]；</li><li>\w：匹配一个单词字符，等同于[a-zA-Z_0-9]；</li><li>\s：匹配一个空白字符，等同于[\t\n\x0B\f\r]</li><li>\D：匹配一个非数字字符，即<sup><a href="#fn_\d" id="reffn_\d">\d</a></sup>；</li><li>\W：匹配一个非单词字符，即<sup><a href="#fn_\w" id="reffn_\w">\w</a></sup>；</li><li>\S：匹配一个非空白字符，即<sup><a href="#fn_\s" id="reffn_\s">\s</a></sup>；</li></ol><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><ol><li>量词是指定出现次数的元字符，常见的有三种+、*、？</li><li>‘+’表示前面字符的一次或多次出现。比如正则表达式ab+c，既能匹配abc，也能匹配abbc:</li><li>‘<em>‘表示前面的字符的零次或多次出现，例如：ab</em>c。既能匹配abc，也能匹配ac或abbbc；</li><li>‘?’表示前面字符可能出现，也可能不出现。例如正则表达式ab?c，既能匹配abc，也能匹配ac；</li><li>通用表示出现次数的语法为{m,n}，出现次数从m到n，包括m和n。如果n没有限制可以省略。如果m和n一样，可以省略一个写为{m}。例如：</li></ol><ul><li>ab{1,10}c：b可以出现1次到10次</li><li>ab{3}c：b必须出现三次</li><li>ab{1,}c：等同于ab+c</li><li>ab{0,}c：等同于ab*c</li><li>ab{0,1}c：等同于ab?c</li></ul><ol><li>量词默认是贪婪的，也就是说会从正则开始匹配到结束内的所有字符，如果需要在匹配到第一个就终止，需要使用懒惰量词。即在两次后面加上一个符号’?’；</li></ol><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><ol><li>可以用括号将表达式括起来，表示一个分组。分组匹配的子字符串可以在后续访问，好像被被捕获了一样，所以默认分组称之为捕获分组；</li><li>在正则表达式中，可以使用斜杠\加分组编号引用之前匹配的分组，称之为回溯引用；</li></ol><h2 id="特殊边界匹配"><a href="#特殊边界匹配" class="headerlink" title="特殊边界匹配"></a>特殊边界匹配</h2><ol><li>常见的特殊边界的元字符有^、$、\A、\Z、\z和\b。</li><li>‘’匹配整个字符串的开始，此外‘’也表示排除，默认单行匹配；</li><li>‘$’匹配整个字符串的结束，默认单行匹配；</li><li>多行匹配的方式如下：以(?m)开头。例如：(?m)^abc$</li><li>\A和^类似；</li><li>\Z和$类似；\z匹配的总是结束的边界；</li><li>\b匹配的是单词的边界；</li><li>边界匹配不同于字符匹配，可以认为，在一个字符串中，每个字符的两边都是边界；</li></ol><h2 id="环视边界匹配"><a href="#环视边界匹配" class="headerlink" title="环视边界匹配"></a>环视边界匹配</h2><ol><li>此部分内容比较晦涩，暂不做了解；</li></ol><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><h2 id="函数是接口："><a href="#函数是接口：" class="headerlink" title="函数是接口："></a>函数是接口：</h2><ol><li>Java中预定义了大量的函数式接口：</li></ol><div class="table-container"><table><thead><tr><th>函数接口</th><th>方法定义</th><th>说明</th></tr></thead><tbody><tr><td>Predicate<T></td><td>boolean test(T t)</td><td>谓词，测试输入条件是否满足要求</td></tr><tr><td>Function<T, R></td><td>R apply(T t)</td><td>函数转换，输入类型T，输出类型R</td></tr><tr><td>Consumer<T></td><td>void accept(T t)</td><td>消费者，输入类型T</td></tr><tr><td>Supplier<T></td><td>T get()</td><td>工厂方法</td></tr><tr><td>UnaryOperator<T></td><td>T apply(T t)</td><td>函数转换的特例，输入和输出类型一样</td></tr><tr><td>BiFunction<T, U, R></td><td>R apply(T t, U u)</td><td>函数转换，接受两个参数，输出R</td></tr><tr><td>BinaryOperator<T></td><td>T apply(T t, T u)</td><td>BiFunction的特例，输入和输出类型一样</td></tr><tr><td>BiConsumer<T, U></td><td>void accept(T t, U u)</td><td>消费者，接受两个参数</td></tr><tr><td>BiPredicate<T, U></td><td>boolean test(T t, U u)</td><td>谓词，接受两个参数</td></tr></tbody></table></div><ol><li>Predicate示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    String name;<br>    <span class="hljs-type">double</span> score;<br>    <span class="hljs-comment">// 省略getter/setter</span><br>&#125;<br><br><span class="hljs-comment">// 借助Predicate撰写一个filter的逻辑，例如：</span><br>students = filter(students, t -&gt; t.getScore() &gt; <span class="hljs-number">90</span>);<br></code></pre></td></tr></table></figure><ol><li>Function示例：数据转换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 根据学生列表返回名称列表的代码：</span><br>List&lt;Student&gt; names = map(students, t -&gt; t.getName());<br><br><span class="hljs-comment">// 将学生名称转换为大写：</span><br>students = map(students, t -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(t.getName().toUpperCase(), t.getScore()))<br></code></pre></td></tr></table></figure><ol><li>Consumer示例：直接对原值进行修改</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">foreach(students, t -&gt; t.setName(t.getName(),.toUpperCase()))<br></code></pre></td></tr></table></figure><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><ol><li>示例代码中<code>Student::getName</code>称之为方法引用，使用::分隔开。分隔符前面是类型或变量名，后者是方法名。方法可以是实例方法，也可以是静态方法。例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getColleageName</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Test String&quot;</span>;<br>&#125;<br><span class="hljs-comment">// 下面两条句子的等价的</span><br>Supplier&lt;String&gt; s = Student::getColleageName;<br>Supplier&lt;String&gt; s = () -&gt; Student.getColleageName()；<br></code></pre></td></tr></table></figure><h2 id="函数的复合"><a href="#函数的复合" class="headerlink" title="函数的复合"></a>函数的复合</h2><ol><li>函数式接口和Lambda表达式可以用作方法的返回值，传递代码回调者，将上述两种方法结合起来，可以构造复合的函数，使程序简洁易读；</li><li>复合Comparator中的复合方法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Arrays.sort(files, (f1, f2) -&gt; f1.getName().compareTo(f2.getName()));<br><span class="hljs-comment">// 进一步简化</span><br>Arrays.sort(files, Comparator.comparing(File::getName()));<br></code></pre></td></tr></table></figure><h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><ol><li>基本过滤</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用Stream API之前</span><br>List&lt;Student&gt; above90List = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Student t : students) &#123;<br>    <span class="hljs-keyword">if</span> (t.getScore() &gt; <span class="hljs-number">90</span>) &#123;<br>        above90List.add(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用Stream API之后</span><br>List&lt;Student&gt; above90List = students.stream()<br>    .filter(t -&gt; t.getScore() &gt; <span class="hljs-number">90</span>).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><ul><li>没有显式的迭代循环，循环过程被Stream隐藏；</li><li>提供了声明式的处理函数；</li><li>流畅式接口；</li></ul><ol><li>基本转换</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用Stream API之前</span><br>List&lt;String&gt; nameList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (Student t : students) &#123;<br>    nameList.add(t.getName());<br>&#125;<br><br><span class="hljs-comment">// 使用Stream API之后</span><br>List&lt;String&gt; nameList = students.stream()<br>    .map(Student::getName).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><ol><li>基本过滤和转换组合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; above90List = students.stream()<br>    .filter(t -&gt; t.getScore() &gt; <span class="hljs-number">90</span>)<br>    .map(Student::getName)<br>    .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><ol><li>distinct运算</li></ol><ul><li>用于过滤重复元素，只留下唯一元素，是否重复根据equals()方法来比较。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;Abc&quot;</span>&#125;);<br>List&lt;String&gt; retList = list.stream()<br>    .filter(s -&gt; s.length() &lt;= <span class="hljs-number">3</span>).map(String::toLowerCase).distinct()<br>    .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><ol><li>sorted方法</li></ol><ul><li>对流中的元素进行排序，返回一个排序后的stream。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Student&gt; list = students.stream().filter(t -&gt; t.getScore() &gt; <span class="hljs-number">0</span>)<br>    .sorted(Comparator.comparing(Student::getScore)<br>    .reversed().thenComparing(Student::getName))<br>    .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><ol><li>skip/limit</li></ol><ul><li>跳过流中的n个元素，如果流的长度不足n个，返回一个空流。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Student&gt; list = students.stream()<br>    .sorted(Comparator.comparing(Student::getScore).reversed()<br>    .skip(<span class="hljs-number">2</span>).limit(<span class="hljs-number">3</span>).collect(Coolectors.toList()));<br></code></pre></td></tr></table></figure><ol><li>peek</li></ol><ul><li>返回一个与之前一样的流，没有变化。但是提供一个Consumer，会将流中的每一个元素传给Consumer。这个方法主要目的用于支持调试，可以使用该方法观察在流水线中流转的元素。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; above90Names = students.stream()<br>    .filter(t -&gt; t.getScore() &gt; <span class="hljs-number">90</span>)<br>    .peek(System.out::println).map(Student::getName)<br>    .collect(Collectors.toList());<br></code></pre></td></tr></table></figure><ol><li>mapToLong/mapToInt/mapToDouble</li></ol><ul><li>map函数接受函数参数是一个<code>Function&lt;T, R&gt;</code>，为避免拆箱，装箱提高性能。例如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> students.stream()<br>    .mapToDouble(Student::getScore).sum();<br></code></pre></td></tr></table></figure><ol><li>flatMap</li></ol><ul><li>接受一个函数mapper，对流中的每一个元素，mapper会将该元素转换成一个流Stream。然后将新生成流的每一个元素传递给下一个操作。比如：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; lines = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;hello abc&quot;</span>, <span class="hljs-string">&quot;laoma biancheng&quot;</span>&#125;);<br>List&lt;String&gt; words = lines.stream()<br>    .flatMap(line -&gt; Arrays.stream(line.split(<span class="hljs-string">&quot;\\s+&quot;</span>)))<br>    .collect(Collectors.toList());<br>System.out.println(words); <span class="hljs-comment">// [hello, abc. laoma, biancheng]</span><br></code></pre></td></tr></table></figure><h2 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h2><ol><li>中间操作不触发实际执行，返回值是Stream，而终端操作触发执行，返回一个具体的值。除了collect之外还有：max, min, count, allMatch, anyMatch, noneMatch, findFirst, findAny, forEach, toArray, reduce等。</li><li>max/min: 返回流中的最大值/最小值。其返回类型为Optional<T>而非T。Optional表明可能为null，程序应当进行适当的处理。例子：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> students.stream()<br>    .max(Comparator.comparing(Student::getScore).reversed()).get();<br></code></pre></td></tr></table></figure><ol><li>count：返回流中的元素个数，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">above90Count</span> <span class="hljs-operator">=</span> students.stream()<br>    .filter(t -&gt; t.getScore() &gt; <span class="hljs-number">90</span>).count();<br></code></pre></td></tr></table></figure><ol><li>allMatch/anyMatch/noneMatch：用于判定流中额元素是否满足一定的条件，区别在于：</li></ol><ul><li>allMatch：流中所有元素都满足条件的情况下返回true;</li><li>anyMatch：流中的元素只要有一个元素满足条件即返回true;</li><li>noneMatch：只有流中的所有元素都不满足条件才返回true;</li><li>示例如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">allPass</span> <span class="hljs-operator">=</span> students.stream()<br>    .allMatch(t -&gt; t.getScore() &gt;= <span class="hljs-number">60</span>);<br></code></pre></td></tr></table></figure><ol><li>findFirst/findAny：返回类型均为Optional，如果流为空则返回Optional.empty()。findFirst返回第一个元素，而findAny返回任一元素。均为短路操作。示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;Student&gt; student = students.stream()<br>    .filter(t -&gt; t.getScore() &lt; <span class="hljs-number">60</span>)<br>    .findAny();<br><span class="hljs-keyword">if</span> (student.isPresent()) &#123;<br>    <span class="hljs-comment">// 处理不符合要求的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><ol><li>forEach/forEachOrdered：并行流中forEach不保证顺序，forEachOrdered能保证顺序。例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">students.stream()<br>    .filter(t -&gt; t.getScore() &gt; <span class="hljs-number">90</span>)<br>    .forEach(System.out::println);<br></code></pre></td></tr></table></figure><ol><li>toArray：将流转换为数组，包含两个方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Object[] toArray() <span class="hljs-comment">// 返回值为Object[]</span><br>&lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt; generator) <span class="hljs-comment">// 得到指定类型的数组</span><br></code></pre></td></tr></table></figure><ul><li>示例为：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Student[] above90Arr = students.stream()<br>    .filter(t -&gt; t.getScore() &gt; <span class="hljs-number">90</span>)<br>    .toArray(Student[]::<span class="hljs-keyword">new</span>); <span class="hljs-comment">// Student[]::new就是一个IntFunction类型的ggenerator</span><br></code></pre></td></tr></table></figure><ol><li>reduce：归约或折叠，将流中的元素归约为一个值，有三种reduce函数：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Optional&lt;T&gt; <span class="hljs-title function_">reduce</span><span class="hljs-params">(BinaryOperator&lt;T&gt; accumulator)</span>;<br>T <span class="hljs-title function_">reduce</span><span class="hljs-params">(T identity, BinaryOperator&lt;T&gt; accumulator)</span>;<br>&lt;U&gt; U <span class="hljs-title function_">reduce</span><span class="hljs-params">(U identity, BiFunction&lt;U, ? <span class="hljs-built_in">super</span> T, U&gt; accumulator, BinaryOperator&lt;U&gt; combiner)</span>;<br></code></pre></td></tr></table></figure><ul><li>第一个reduce函数的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">topStudent</span> <span class="hljs-operator">=</span> students.stream()<br>    .reduce((acc, t) -&gt; &#123;<br>        <span class="hljs-keyword">if</span>(acc.getScore() &gt;= t.getScore()) &#123;<br>            <span class="hljs-keyword">return</span> acc;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> t;<br>        &#125;<br>    &#125;).get();<br></code></pre></td></tr></table></figure><ul><li>第二个reduce函数比第一个多了identity参数，表示初始值</li><li>第三个reduce函数更为通用，可以自定义归约类型，另外还多了一个combiner参数，在并行流中用于合并子线程结果。还有示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">sumScore</span> <span class="hljs-operator">=</span> students.stream()<br>    .reduce(<span class="hljs-number">0d</span>, (sum, t) -&gt; sum += t.getScore(), <br>    (sum1, sum2) -&gt; sum1 += sum2)<br>    );<br></code></pre></td></tr></table></figure><ol><li>迭代Map的过程删除元素，直接使用forEach会报ConcurrentModificationException</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Object&gt; map = other.getHashMap&lt;&gt;();<br>map.entrySet().removeIf(entryElement -&gt; <span class="hljs-string">&quot;some condition&quot;</span>.equals(entryElement.getKey()))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程原理——并发</title>
    <link href="/2022/02/16/java-core/ch05/"/>
    <url>/2022/02/16/java-core/ch05/</url>
    
    <content type="html"><![CDATA[<h1 id="并发基础"><a href="#并发基础" class="headerlink" title="并发基础"></a>并发基础</h1><ol><li>线程表示一条单独的执行流，它有自己的执行计数器，有自己的栈；</li><li>使用线程的方式有两种，继承Thread类以及实现Runnable接口，两种达到的效果是一样的。</li><li>线程具有下列状态：</li></ol><ul><li>NEW：没有调用start方法线程状态；</li><li>TERMINATED：线程运行结束后状态；</li><li>RUNNABLE：调用start后线程执行run方法且没有阻塞时状态；</li><li>BLOCKED、WAITING、TIMED_WAITING：线程被阻塞；</li></ul><ol><li>join方法：可以让调用join方法的线程等待该线程结束；</li><li>竞态条件：当多个线程访问和操作同一个对象时，最终执行结果与执行时序有关，可能正确也可能不正确；</li></ol><h2 id="synchronized关键字"><a href="#synchronized关键字" class="headerlink" title="synchronized关键字"></a>synchronized关键字</h2><ol><li>synchronized实例方法实际保护的是同一个对象的方法调用，每次只能被一个线程持有；</li><li>synchronized关键字保护的是对象，针对实例对象保护的是当前，对于静态方法保护的类对象；</li><li>被synchronized关键字保护的对象都维护着1个锁以及等待队列；</li><li>synchronized具有下列特点：</li></ol><ul><li>可重入性：对于同一个执行线程在获得锁之后，在调用其他需要同样锁的代码时，可以直接调用；</li><li>内存可见性：释放锁时会将所有的更改写回内存；但是开销有些过高，可以使用volatile关键字实现相同的效果；</li><li>死锁：尽量避免在持有一个锁的同时再去申请另一个锁，如果确实需要多个锁，所有代码都应该按照相同的顺序去申请锁；（使用开发过程中可以使用JDK提供的jstack检测死锁）</li></ul><ol><li>对于同步容器对象，单个操作是线程安全的，迭代却不是线程安全的。（因为在多线程操作中容易对容器产生结构性变化）；</li><li>如果需要在迭代容器的过程中保证线程安全，需要在遍历整个容器的过程中给整个容器对象加锁；</li><li>除11中所写到的方法，推荐使用并发容器类：</li></ol><ul><li>CopyOnWriteArrayList</li><li>ConcurrentHashMap;</li><li>CocurrentLinkedQueue;</li><li>ConcurrentSkipSet;</li></ul><h2 id="线程协作机制"><a href="#线程协作机制" class="headerlink" title="线程协作机制"></a>线程协作机制</h2><ol><li>生产/消费者模式：生产者生产数据并放至消费队列中，消费者从消费队列中消费数据，如果队列为空消费者等待，如果队列满，生产者等待；</li><li>同时开始：在模拟仿真程序中，多个线程同时开始；</li><li>等待结束：主线程将任务拆解成多个子任务，为每个子任务创建一个线程，主线程在继续执行其他任务之前需要等待每个子任务执行完毕；</li><li>异步结果：将子线程封装为异步调用，子线程在正确返回结果前先返回一个Future对象，通过Future对象可以获得子线程最终的执行结果；</li><li>Map/Reduce操作：也需要使用线程进行操作；</li></ol><h2 id="wait-notify机制："><a href="#wait-notify机制：" class="headerlink" title="wait/notify机制："></a>wait/notify机制：</h2><ol><li>每个同步对象都拥有一个锁以及一个等待队列，当调用wait方法，系统会将对象放入等待队列，直到调用notify方法再将其从等待队列中取出。</li><li>设计多线程程序的时候需要想清楚共享变量和条件，这是设计多线程协作的核心。</li><li>以生产者/消费者模式为例：生产者生产产品，并放入缓冲队列；消费者从缓冲队列取出产品进行消费。当生产者生产速度过快导致缓冲队列满了，此时生产者应停止生产。同样，当生产者生产过慢导致缓冲队列空，此时消费者应停止消费。等待生产者生产。</li><li>同时进行：一个主线程以及N个子线程，当主线程发送指令后，子线程开始同时执行；</li><li>各个线程分头行动，给咱达到一个集合点，在集合点需要集齐所有线程交换数据。然后再进行下一步动作。</li></ol><h2 id="取消-关闭线程机制"><a href="#取消-关闭线程机制" class="headerlink" title="取消/关闭线程机制"></a>取消/关闭线程机制</h2><ol><li>停止一个线程的手段主要是中断，中断线程的目的并不是强迫线程终止，而是给线程发送一个停止信号，由线程自行决定中断的时机。本质上依旧是一种协作机制。</li><li>Java中关于中断的方法有如下三种：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInterrupted</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 返回对应线程的中断标志位是否为true</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interrupt</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 表示中断对应的线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interrupted</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 返回当前线程的中断标志位是否为true，但还有一个副作用：清空中断标志位。</span><br></code></pre></td></tr></table></figure><ol><li>对于以线程提供的服务的应用程序模块而言，应该封装取消/关闭操作，提供单独的取消/关闭方法给调用者，外部调用库应该调用这些方法而不是直接调用interrupt方法；</li></ol><h1 id="并发包基石"><a href="#并发包基石" class="headerlink" title="并发包基石"></a>并发包基石</h1><h2 id="原子变量"><a href="#原子变量" class="headerlink" title="原子变量"></a>原子变量</h2><ol><li>原子变量即为操作一次性完成，期间不进行线程上下文切换，并且能保证线程安全的原子变量。</li><li>原子变量有AtomicBoolean, AtomicInteger, AtomicLong以及AtomicReference（原子引用类型）类型</li><li>之所以称之为原子变量，是因为其包含一些原子方法实现组合操作的方法</li><li>compareAndSet方法，也就是常说的CAS。如果当前值等于expect，则更新为update，否则不更新。如果更新成功，返回true，否则返回false。</li><li>乐观锁与悲观锁的区别：乐观锁假设每次操作都是不会出现冲突，因此在更新时不管是否出现冲突都会先进行一次更新，即便冲突了只需要再检测一次即可；而别管锁假设每次操作都会产生冲突，因此每次操作前都需要获得锁才能继续操作（例如：synchronized关键字）；</li><li>使用CAS会出现一个ABA问题：假设当前值为A，如果另一个线程将A改为B然后再修改回A，当前线程的CAS操作是无法分辨当前值发生过变化的。解决ABA可以在线程修改值时加上一个时间戳，以此来判断当前线程持有变量的版本；</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Pair</span> <span class="hljs-variable">pair</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">stamp</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>AtomicStampedReference&lt;Pair&gt; pairRef = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicStampedReference</span>&lt;&gt;(pair, stamp);<br><span class="hljs-type">int</span> <span class="hljs-variable">newStamp</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>pairRef.copareAndSet(pair, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>), stamp, newStamp);<br></code></pre></td></tr></table></figure><ol><li>总结：CAS是并发包的基础，基于它可以实现高效、乐观、非阻塞式数据结构的算法，它也是并发包中锁、同步工具以及各种容器的基础；</li></ol><h2 id="显式锁"><a href="#显式锁" class="headerlink" title="显式锁"></a>显式锁</h2><ol><li>包括锁Lock，主要实现类为ReentrantLock；读写锁接口ReadWriteLock，主要实现类是ReetrantReadWriteLock;</li><li>显式锁一般有下列方法：</li></ol><ul><li>lock()/unlock()：普通获取锁和释放锁方法；会阻塞直至成功；</li><li>lockInterruptibly()：可以响应中断，如果被其他线程中断会抛出InterruptedException；</li><li>tryLock()：只是尝试获取锁，立即返回；如果获取成功返回true，否则返回false;</li><li>newCondition()：新建一个条件</li></ul><ol><li>相比于synchronized，显式锁支持非阻塞方式获取锁、可以响应中断、可以限时；</li><li>Lock是可重入的（一个线程持有一个锁的前提下可以继续获得该锁）、可以解决竞态条件、可以保证内存的可见性（volatile）</li><li>保证竞态条件的公平性会影响性能，一般情况下我们不作保证；例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReetrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> count;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">incr</span><span class="hljs-params">()</span> &#123;<br>        lock.lock(); <span class="hljs-comment">// 使用lock获得显式锁</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            count++;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock(); <span class="hljs-comment">// 用完要及时释放掉</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用tryLock()可以避免死锁，在持有一个锁获另一个锁而获取不到的时候，可以释放自己已持有的锁，给其他线程获得锁的机会，然后重试获取所有锁；例如下面这样写会产生死锁，使用tryLock()判断可以避免死锁问题：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Account.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReetrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">double</span> money;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.money += money;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reduce</span><span class="hljs-params">(<span class="hljs-type">double</span> money)</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.money -= money;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getMoney</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> money;<br>    &#125;<br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>    &#125;<br>    <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> &#123;<br>        lock.unlock();<br>    &#125;<br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lock.tryLock();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// AccountMgr.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountMgr</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoEnoughMoneyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(Account from, Account to, <span class="hljs-type">double</span> money)</span><span class="hljs-keyword">throws</span> NoEnoughMoneyException &#123;<br>        from.lock(); <span class="hljs-comment">// from获得锁</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            to.lock(); <span class="hljs-comment">// to获得锁</span><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (from.getMoney() &gt;= money) &#123;<br>                    from.reduce(money);<br>                    to.add(money);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoEnoughMoneyException</span>();<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    to.unlock(); <span class="hljs-comment">// to释放锁</span><br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                from.unlock(); <span class="hljs-comment">// from释放锁</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>Java中封装了一个抽象类AQS用于简化并发工具类的实现。AQS全称（AbstractQueuedSynchronizer）。AQS的实现比较复杂。AQS内部维护了一个等待队列，借助CAS方法实现了无阻塞算法进行更新。</li><li>Lock锁的基本原理如下：能获得锁就立即获得，否则加入等待队列，被唤醒后检查自己是否是第一个等待的线程，如果是且能获得锁则返回；否则继续等待，这个过程如果发生了中断，lock会记录中断标志位，但不会提前返回或者是抛出异常；</li><li>保证公平性的结果是整体性能会降低，低的原因不在于检查速度慢，而是会让活跃线程得不到锁，进入等待状态，引起频繁上下文切换，降低整体的效率。需要说明的是即便fair参数为true，ReetrantLock中不带参数的tryLock方法也是不保证公平的。</li><li>synchronized关键字是声明式编程，而Lock是命令式编程，所有内部的细节都需要自己实现。目前JVM对synchronized的优化已经相当的好。因此能用synchronized的地方建议使用synchronized，不能使用synchronized关键字的地方再考虑Lock；</li></ol><h2 id="显式条件"><a href="#显式条件" class="headerlink" title="显式条件"></a>显式条件</h2><ol><li>锁用于解决竞态条件问题，条件是线程间的协作机制。显式锁与synchronized相对应，显式条件和wait/notify相对应。</li><li>实现显式锁的显式条件为Condition类，该类为一个接口，其中包含下列方法：其中绝大部分是响应中断的。即：当出现中断会清空标志位：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">await</span><span class="hljs-params">()</span> <span class="hljs-comment">// 相当于Object中的wait();</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">awaitUnInterruptibly</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 不响应中断</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">awaitNanos</span><span class="hljs-params">(<span class="hljs-type">long</span> nanoTimeout)</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">await</span><span class="hljs-params">(<span class="hljs-type">long</span> times, TimeUnit unit)</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-title function_">awaitUntil</span><span class="hljs-params">(Date deadline)</span>;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">signal</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 相当于notify();</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">signalAll</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 相当于notifyAll();</span><br></code></pre></td></tr></table></figure><ol><li>await在进入等待队列后，会释放锁以及CPU，当其他线程将它唤醒后、等待超时后以及发生中断退出后都需要重新获得锁，获取锁后才从await方法中退出。</li><li>使用显式锁的示例如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaitThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">fire</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReetrantLock</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Condition</span> <span class="hljs-variable">condition</span> <span class="hljs-operator">=</span> lock.newCondition();<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            lock.lock();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span>(!fire) &#123;<br>                    condition.await();<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                lock.unlock();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;fired&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            Thread.interrupted();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fire</span><span class="hljs-params">()</span> &#123;<br>        lock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.fire = <span class="hljs-literal">true</span>;<br>            condition.signal();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            lock.unlock();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br>        <span class="hljs-type">WaitThread</span> <span class="hljs-variable">waitThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WaitThread</span>();<br>        waitThread.start();<br>        Thread.sleep(<span class="hljs-number">1000</span>);<br>        System.out.println(<span class="hljs-string">&quot;fire&quot;</span>);<br>        waitThread.fire();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>await()/signal()方法与显式锁配合使用；而wait()/notify()要与synchronized方法使用，不能使用混淆。否则即便编译器不报错也会出现IllegalStateException方法。</li></ol><h1 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h1><h2 id="CopyOnWriteArrayList以及CopyOnWriteArraySet"><a href="#CopyOnWriteArrayList以及CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArrayList以及CopyOnWriteArraySet"></a>CopyOnWriteArrayList以及CopyOnWriteArraySet</h2><ol><li>特点：线程安全，可以被多个线程并发访问；</li><li>迭代器不支持修改操作，但也不会抛出ConcurrentModificationException；</li><li>以原子方式支持一些复合操作</li><li>写时复制的技术思路为：每次出现修改操作时，都会新建一个数组，复制原数组内容到新数组，在新数组上进行需要的修改，然后一原子方式设置内部数组引用。同理：所有的读操作都是<strong>先拿到当前引用的数组</strong>，然后<strong>直接访问</strong>该数组。在读的过程中，可能内部的数组引用已经被修改了，但不会影响操作，它依旧访问原数组内容。</li><li>截至当前保证线程安全的思路有三种：</li></ol><ul><li>使用锁：例如synchronized关键字以及ReetrantLock；</li><li>使用CAS：</li><li>写时复制也是一种常见的线程安全保证思路，在操作系统内部的进程管理和内存管理经常会使用到。</li></ul><ol><li>总结：CopyOnWriteList和CopyOnWriteSet适用于读远多于写、集合不太大的场景，它们采用了写时复制技术，这也是计算机中一种重要的思维和技术。</li></ol><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><ol><li>特点：并发安全、支持一些原子复合操作、支持高并发，读完全并行、弱一致性；</li><li>HashMap不是线程安全的，在高并发场景下容易出现死循环以及占满CPU的问题；</li><li>Collections.synchronizedMap()在调用一些更新操作时需要加锁，而ConcurrentHashMap()就不存在这个问题；</li><li>ConcurrentHashMap使用了很复杂的技术实现高并发，但是简要概括下有下列两种：</li></ol><ul><li>分段锁：将读取的数据分为多段，每段都拥有自己的锁，每个段都相当于独立的Hash表。使用分段锁可以有效地提高并发效率。</li><li>读不需要锁：对于写操作需要获取锁，不能并行，但是读操作可以并行。写的同时也可以读。</li></ul><ol><li>弱一致性：ConcurrentHashMap在创建完迭代器后，会按照哈希表中反映的结构迭代元素。如果结构的变化发生在已经迭代过的元素上，则结构性变化不会反映出来。反之，若结构变化发生在未发生改变的元素上，结构变化就可以被反映出来。这种现象就称之为弱一致性；</li></ol><h2 id="基于SkipList的Map和Set"><a href="#基于SkipList的Map和Set" class="headerlink" title="基于SkipList的Map和Set"></a>基于SkipList的Map和Set</h2><ol><li>特点：所有的操作都可以并行，包括读和写；</li><li>与TreeMap/TreeSet一样，可以实现按键的自然排序；使用方法如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> CurrentSkipMapDemo &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentSkipMap</span>&lt;&gt;(Collections.reverseOrder());<br>        map.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;abstract&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;basic&quot;</span>);<br>        map.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;call&quot;</span>);<br>        System.out.println(map.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>SkipMap和SkipSet是基于跳表实现，跳表是基于链表实现的。在链表的基础上增加了多层索引结构。跳表实际上一个类似于二分查找的数据结构。因此有了这样的数据结构就可以更好地实现，关于其复杂度就不再赘述。</li></ol><h2 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h2><ol><li>Java中的并发队列一般包括下列几种：</li></ol><ul><li>无锁非阻塞并发队列：ConcurrentLinkedQueue和ConcurrentLinkedDeque</li><li>普通阻塞队列：基于数组的ArrayBlockingQueue，基于链表的LinkedBlockingQueue和LinkedBlockingDeque；</li><li>优先级阻塞队列：PriorityBlockingQueue；</li><li>延时阻塞队列：DelayQueue；</li><li>其他阻塞队列：SynchronousQueue和LinkedTransferQueue；</li></ul><ol><li>这里的无锁指的是不使用锁，使用CAS方式实现；</li><li>普通阻塞队列适用于生产者/消费者模式；</li><li>优先级队列是按照优先级出队列的，优先级高的先出</li><li>延时阻塞队列可以用于定时任务，按照元素的延时时间出队，其特殊点在于只有当元素的延时过期之后才能从队列中被拿走</li><li>SynchronousQueue没有存储空间，适用于两进程之间传递信息；LinkedTransferQueue适用于一些消息传递类型的应用中。</li></ol><h1 id="异步执行任务"><a href="#异步执行任务" class="headerlink" title="异步执行任务"></a>异步执行任务</h1><h2 id="执行接口"><a href="#执行接口" class="headerlink" title="执行接口"></a>执行接口</h2><ul><li>Runnable（没有返回结果）和Callable（有返回结果）：表示要执行的异步任务</li><li>Executor和ExecutorService：表示执行服务</li><li>Future：表示异步任务的结果</li></ul><h2 id="Future接口的使用"><a href="#Future接口的使用" class="headerlink" title="Future接口的使用"></a>Future接口的使用</h2><ol><li>示例代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt; &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sleepSeconds</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">1000</span>);<br>            Thread.sleep(sleepSeconds);<br>            <span class="hljs-keyword">return</span> sleepSeconds;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newSingleThreadExecutor();<br>        Future&lt;Integer&gt; future = executor.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>());<br>        Thread.sleep(<span class="hljs-number">100</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(future.get());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        executor.shutdown();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>实现原理：ExecutorService的主要实现类是ThreadPoolExecutor，是基于线程池实现的。</li><li>总结：并发包执行任务执行服务体现了并发异步开发中的“关注点分离”的思想，使用者只需要通过ExecutorService提交任务，通过Future操作任务和结果即可，不需要关注线程创建和协调的细节。</li></ol><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><ol><li>线程池主要有任务队列以及工作者线程组成；</li><li>线程池有下列优点：</li></ol><ul><li>可以重用线程，避免线程创建的开销；</li><li>任务过多时，通过排队避免创建过多线程，减少系统资源消耗和竞争；</li></ul><ol><li>Java中最常用的线程池类是ThreadPoolExecutor；其中最重要的4个参数是：corePoolSize（核心线程个数）,maximumPoolSize（最大线程个数）keepAliveTime和unit（空闲线程存活时间）</li><li>ThreadPoolExecutor中的队列均为阻塞队列，分为有界和无界两种类型。需要说明的是如果使用了无界队列，线程个数最多只能达到corePoolSize，达到corePoolSize之后新的任务总会排队，参数maximumPoolSize也就没有意义了。</li><li>当队列有界并且maximumPoolSize有限时，只要队列排满，新任务总会被拒绝，因此也会出发任务拒绝策略。不过任务拒绝策略是可以自定义的。</li></ol><ul><li>ThreadPoolExecutor.AbortPolicy：默认方式，抛出异常</li><li>ThreadPoolExecutor.DiscardPolicy：静默处理，忽略新任务，不抛出异常也不执行</li><li>ThreadPoolExecutor.DiscardOldestPolicy：扔掉等待时间最长的任务，然后自己排队</li><li>ThreadPoolExecutor.CallerRunsPolicy：在任务提交者线程中执行任务，不交给线程池中的线程执行</li></ul><h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><ol><li>TimerTask表示一个定时任务，具体的定时任务需要继承该抽象类，实现run方法。示例：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicTimer</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DelayTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TimerTask</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;delayed task&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Timer</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>();<br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayTask</span>(), <span class="hljs-number">1000</span>);<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        timer.cancel();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>Timer内部主要是由任务队列和Timer线程两部分组成。任务队列是一个基于堆实现的优先级队列，按照下次执行的时间排优先级。一个Timer对象只有一个Timer线程。</li><li>对于固定延时任务，延时相对的是任务执行前的当前时间；对于固定频率任务，延时相对的是最优先计划；</li><li>在执行一个任务的run方法时，一旦run抛出异常，Timer线程就会退出，从而所有的定时任务都会被取消。因此，如果希望各个定时任务不互相干扰，一定要在run方法内捕获异常。</li><li>并发包中使用ScheduledExecutorService来实现定时任务，其为一个接口，多线程执行定时任务的示例如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScheduledFixedDelay</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LongRunningTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;&#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FixedDelayTask</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ScheduledExecutorService</span> <span class="hljs-variable">timer</span> <span class="hljs-operator">=</span> Executors.newScheduledThreadPool(<span class="hljs-number">10</span>);<br>        timer.schedule(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LongRunningTask</span>(), <span class="hljs-number">10</span>, TimeUnit.MILLISECONDS);<br>        timer.scheduleWithFixedDelay(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FixedDelayTask</span>(), <span class="hljs-number">100</span>, <span class="hljs-number">1000</span>, TimeUnit.MILLISECONDS);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>ScheduledExecutorService的实现原理如下：</li></ol><ul><li>实现背后是线程池，可以有多个线程执行任务；</li><li>在任务执行后再设置下次执行的时间，对于固定延时的任务更合理；</li><li>任务执行线程会捕获任务执行过程中的所有异常。一个定时任务的异常不会影响其他定时任务；</li></ul><h1 id="同步以及协作工具类"><a href="#同步以及协作工具类" class="headerlink" title="同步以及协作工具类"></a>同步以及协作工具类</h1><ol><li>同步工具类包括：</li></ol><ul><li>ReetrantReadWriteLock：读写显式锁</li><li>Semaphore：信号量</li><li>CountDownLatch：倒计时门栓</li><li>CyclicBarrier：循环栅栏</li><li>ThreadLocal：线程本地 2.ReetrantReadWriteLock读写显式锁：只有“读-读”可以并行，“读-写”和“写-写”都是不可以的。只有一个线程可以进行写操作。是基于CAS实现的；</li></ul><ol><li>Semaphore：限制并发数量，是基于AQS实现的；</li><li>CountDownLatch：默认是关闭的，所有希望通过该门的线程都需要等待，然后开始倒计时，倒计时变为0后，门栓打开，等待的所有线程都可以通过。门栓是一次性的，打开了就不能再关上了。</li><li>CyclicBarrier：所有线程在到达该栅栏后都需要等待其他线程，等待所有线程都到达后在一起通过。它是循环的，可以用重复的同步。</li><li>ThreadLocal：每个线程都有同一个变量的独有拷贝，也就是说每个线程都拥有一个属于自己的独立值。一般来说ThreadLocal都定义为静态类型便于引用</li></ol><h1 id="并发总结"><a href="#并发总结" class="headerlink" title="并发总结"></a>并发总结</h1>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程原理——泛型和容器</title>
    <link href="/2022/02/16/java-core/ch04/"/>
    <url>/2022/02/16/java-core/ch04/</url>
    
    <content type="html"><![CDATA[<h1 id="1-泛型"><a href="#1-泛型" class="headerlink" title="1 泛型"></a>1 泛型</h1><h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><ol><li>泛型实际上就是将类型参数化，处理的数据类型不是固定的，而是可以作为参数传入；</li><li>Java的泛型实际上通过Java编译器对泛型字符做类型擦除实现的；</li><li>泛型可以指定上限为某个具体类，例如：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberPair</span>&lt;U <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>, V <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Number</span>&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pair</span>&lt;U, V&gt;&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NumberPair</span><span class="hljs-params">(U first, V second)</span> &#123;<br>        <span class="hljs-built_in">super</span>(first, second);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>除此之外，也可以指定上界为某个接口，例如Java中的max方法需要实现Comparable接口；</li><li>总结：泛型是计算机中一种非常重要的思维方式，它将数据结构和算法与数据类型进行分离，使得同一套数据结构和算法能够应用于各种数据类型，而且可以保证类型安全，提高可读性。</li></ol><h2 id="1-2-通配符解析"><a href="#1-2-通配符解析" class="headerlink" title="1.2 通配符解析"></a>1.2 通配符解析</h2><ol><li>参数类型限定通配符写法。例如：public void addAll(DynamicArray&lt;? extends E&gt; c), <strong>&lt;? exntends E&gt;也称为有限定通配符</strong>；</li><li>与之相对应的就为无限定通配符，具体为：Dynamic&lt;?&gt;，更简洁的写法就为<T></li><li>但是通配符存在一个重要限制：只能读，不能写，由于类型安全无知，因此Java编译器一般是不允许写入，所以干脆禁止；</li><li>通配符的形式都可以使用类型参数的形式来替代，通配符能做的，用类型参数都可以做；</li><li>通配符的形式可以减少类型参数，形式上往往更为简单，可读性也更好；因此能使用通配符就使用通配符；</li><li>如果类型参数之间有依赖关系，或者返回依赖类型参数，或者需要写操作，则只能使用类型参数；</li><li>通配符形式和类型参数往往配合使用；</li></ol><h2 id="1-3-超类型通配符"><a href="#1-3-超类型通配符" class="headerlink" title="1.3 超类型通配符"></a>1.3 超类型通配符</h2><ol><li>形式：&lt;? super E&gt;，用于表示E的某个父类类型；</li><li>使用场景：对于有限通配符形式&lt;? extends E&gt;在无法满足工作需要时，可以使用&lt;? super E&gt;代替；</li><li>&lt;? super E&gt;用于灵活写入或比较，&lt;?&gt;或&lt;? exntends E&gt;用于灵活读取；</li></ol><h2 id="1-4-局限性"><a href="#1-4-局限性" class="headerlink" title="1.4 局限性"></a>1.4 局限性</h2><ol><li>基本类型不能用于实例化类型参数；</li><li>运行时类型信息不适用泛型；</li><li>类型擦除可能引起一些冲突，因此泛型中不能使用基本类型，要使用基本类型对应的包装类型；</li><li>不能通过类型参数创建对象；</li><li>泛型类类型参数不能用于创建静态变量和方法；</li><li>不能创建泛型数组，因为一旦创建泛型数组既不会产生编译错误，也不会产生运行异常，但确是非常危险的；</li><li>如果要存放泛型对象，可以使用原始类型的数组，或者是用泛型容器；</li><li>泛型容器内部使用Object数组，如果要转换泛型容器为对应类型的数组，需要使用反射；</li></ol><h1 id="2-列表和队列"><a href="#2-列表和队列" class="headerlink" title="2 列表和队列"></a>2 列表和队列</h1><h2 id="2-1-ArrayList"><a href="#2-1-ArrayList" class="headerlink" title="2.1 ArrayList"></a>2.1 ArrayList</h2><ol><li>ArrayList为动态数组，其内部使用了一个Object类型的数组，默认容量为10，可以通过构造函数更改其初始容量；</li><li>ArrayList实现了Iterable接口，Iterable表示可迭代，凡是实现了Iterable接口的容器类均可以使用foreach语法，Java编译器会将其转换成调用Iterable接口中的Iterator方法；</li><li>迭代陷阱：由于迭代器内部会维护一些索引位置相关的数据，要求在迭代过程中，容器不能发生结构性变化。否则索引位置就失效了，因此会出现ConcurrentModificationException异常。如果需要删除容器中间的元素，需使用iterator的remove方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/* 错误写法 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(ArrayList&lt;Integer&gt; list)</span> &#123;<br>    <span class="hljs-keyword">for</span> (Integer a : list) &#123;<br>        <span class="hljs-keyword">if</span> (a &lt; <span class="hljs-number">100</span>) &#123;<br>            list.remove(a); <span class="hljs-comment">// 恐抛出ConcurrentModificationException</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 正确写法 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(ArrayList&lt;Integer&gt; list)</span> &#123;<br>    Iterator&lt;Integer&gt; it = list.iterator();<br>    <span class="hljs-keyword">while</span>(it.hasNext()) &#123;<br>        <span class="hljs-keyword">if</span> (it.next() &lt; <span class="hljs-number">100</span>) &#123;<br>            it.remove();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用迭代器的好处：迭代器表示的是一种关注点分离的思想，将数据和实际组织方式与数据的迭代遍历相分离，是一种常见的设计模式。从封装思路上讲，迭代器封装了各种数据组织方式的迭代操作，提供了简单一致性的接口。</li><li>ArrayList的特点</li></ol><ul><li>随机访问：按照索引位置访问效率非常高，时间复杂度为O(1)；</li><li>除非数组已排序，否则按照内容查找元素效率比较低，具体为O(N)，也就是说性能与长度成正比；</li><li>添加数组元素的效率为O(N)；</li><li>插入和删除的效率较低，如果是在数组首部插入或者删除元素，需要对整个数组中的元素进行移动，具体为O(N)；</li><li>需要说明的是ArrayList不是线程安全的，在不需要线程安全的场景下推荐使用ArrayList；</li></ul><h2 id="2-2-LinkedList"><a href="#2-2-LinkedList" class="headerlink" title="2.2 LinkedList"></a>2.2 LinkedList</h2><ol><li>LinkedList是使用数据结构中的单链表来实现的，因此插入和删除的性能很高，但是随机访问的效率就很低；</li><li>LinkedList除了实现Collection接口，还实现了Queue接口，因此对于队列可以这样使用：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Queue&lt;String&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>queue.offer(<span class="hljs-string">&quot;a&quot;</span>);<br>queue.offer(<span class="hljs-string">&quot;b&quot;</span>);<br>queue.offer(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-keyword">while</span>(queue.peek() != <span class="hljs-literal">null</span>) &#123;<br>    System.out.println(queue.poll());<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>LinkedList也可以当作栈使用，示例如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Deque&lt;String&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br>stack.push(<span class="hljs-string">&quot;a&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;b&quot;</span>);<br>stack.push(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-keyword">while</span>(stack.peek() != <span class="hljs-literal">null</span>) &#123;<br>    System.out.println(stack.pop());<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>LinkedList的用法和ArrayList类似，与ArrayList不同的是，LinkedList既可以用作队列也可以用作栈；</li><li>LinkedList的特点如下：</li></ol><ul><li>按需分配空间，不需要预先分配很多空间；</li><li>不可随机访问，按照索引位置访问效率较低；</li><li>无论列表是否有序，按内容查找都需要逐个查找；</li><li>在两端进行添加、删除操作效率很高；</li></ul><h2 id="2-3-ArrayDeque"><a href="#2-3-ArrayDeque" class="headerlink" title="2.3 ArrayDeque"></a>2.3 ArrayDeque</h2><ol><li>ArrayDeque是基于数组实现的双端队列</li><li>ArrayDeque内部使用了一种叫做“循环数组”的结构，通过head和tail指针实现数据的插入和删除。循环数组的长度是2的幂次方。以及使用高效的位运算实现高效。</li><li>由于是双端队列因此具备下列特点：</li></ol><ul><li>在两端添加和删除的效率很高；</li><li>根据元素的内容查找和删除的效率很低；</li><li>与ArrayList和LinkedList不同的是，没有索引位置的概念，不能根据索引位置进行操作。</li></ul><h1 id="3-Map和Set"><a href="#3-Map和Set" class="headerlink" title="3 Map和Set"></a>3 Map和Set</h1><h2 id="3-1-HashMap"><a href="#3-1-HashMap" class="headerlink" title="3.1 HashMap"></a>3.1 HashMap</h2><ol><li>创建的HashMap默认容量为16，默认因子为0.75，因此阈值为16 * 0.75 = 12</li><li>创建Map保存数据的几个步骤分别为：</li></ol><ul><li>(1) 计算键的哈希值；</li><li>(2) 根据哈希值得到保存位置（取模）；</li><li>(3) 插到对应位置的链表表头或者更新已有值；</li><li>(4) 根据扩展table大小，注意这里的table是Entry类型；</li></ul><ol><li>总结HashMap的实现原理</li></ol><ul><li>HashMap内部有一个哈希表，每个元素指向一个单链表；</li><li>根据键值对操作实际上就是用键计算hash值，取模得到数组中的索引位置；然后操作哈希表中指向的单链表；</li><li>存取时依据键的hash值，只在对应的链表中操作，不会访问其他链表。对应链表操作时也是先计算hash值，当哈希值相同时再使用equals方法比较</li><li>HashMap是无顺序的，所有的键值对都是随机排列的，如果希望Map中的数据有序排列，可以使用LinkedHashMap；</li><li>HashMap不是线程安全的，因此在不需要高并发的场景下推荐使用HashMap，如果是在高并发场景，可以使用Java8中新增的ConcurrentHashMap对象；</li></ul><h2 id="3-2-HashSet"><a href="#3-2-HashSet" class="headerlink" title="3.2 HashSet"></a>3.2 HashSet</h2><ol><li>Set表示没有重复元素并且无序的容器接口，与数学中的集合概念吻合；</li><li>HashSet有下列应用场景</li></ol><ul><li>排重：如果对排重后的元素无顺序要求，可以使用HashSet进行排重；</li><li>保存特殊值：例如维护IP地址的黑名单和白名单，可以使用HashSet；</li><li>集合运算：方便进行数学中的交集以及并集的集合运算；</li></ul><ol><li>HashSet内部使用的是HashMap实现，内部都包含一个HashMap的实例变量；</li><li>总结HashSet的特点有如下几个：</li></ol><ul><li>没有重复元素；</li><li>可以高效的添加、删除元素、判断元素是否存在；</li><li>没有顺序；</li></ul><h2 id="3-3-TreeMap或TreeSet"><a href="#3-3-TreeMap或TreeSet" class="headerlink" title="3.3 TreeMap或TreeSet"></a>3.3 TreeMap或TreeSet</h2><ol><li>与HashMap无序相对比，TreeMap是有序的。</li><li>TreeMap内部使用的是<a href="https://baike.baidu.com/item/红黑树/2413209?fr=aladdin">红黑树</a>实现的；</li><li>TreeMap的特点如下</li></ol><ul><li>按键有序：可以很方便地根据键的顺序进行查找</li><li>为了使得按键有序，TreeMap要求键实现Comparable接口或者通过构造方法提供一个Comparator对象；</li><li>根据键值保存、查找、删除的效率比较高；</li></ul><ol><li>总结TreeSet的特点有如下几个：</li></ol><ul><li>没有重复元素；</li><li>可以高效地添加、删除元素、判断元素是否存在；</li><li>有顺序，可以根据自己实现Comparator方法达到正序或者逆序排列；</li></ul><h2 id="3-4-LinkedHashMap"><a href="#3-4-LinkedHashMap" class="headerlink" title="3.4 LinkedHashMap"></a>3.4 LinkedHashMap</h2><ol><li>LinkedHashMap存在两种顺序，一种是插入顺序（先插入的元素在前面），一种是访问顺序（最近访问的元素会移动到末尾，最开始的是没被访问的）；</li><li>LinkedHashMap是有序的，例子如下(插入顺序)：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Integer&gt; seqMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>seqMap.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">100</span>);<br>seqMap.put(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">200</span>);<br>seqMap.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">500</span>);<br>seqMap.put(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">300</span>);<br><span class="hljs-keyword">for</span> (Entry&lt;String, Integer&gt; entry : seqMap.entrySet()) &#123;<br>    System.out.println(entry.getKey() + <span class="hljs-string">&quot; &quot;</span> + entry.getValue());<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Result is :</span><br><span class="hljs-comment">c 100</span><br><span class="hljs-comment">d 300</span><br><span class="hljs-comment">a 500</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ol><li>LinkedHashMap的访问顺序：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">Map&lt;String, Integer&gt; accessMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;(<span class="hljs-number">16</span>, <span class="hljs-number">0.75</span>, <span class="hljs-literal">true</span>);<br>accessMap.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-number">100</span>);<br>accessMap.put(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">200</span>);<br>accessMap.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">500</span>);<br>accessMap.get(<span class="hljs-string">&quot;c&quot;</span>);<br>accessMap.put(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-number">300</span>);<br><span class="hljs-keyword">for</span> (Entry&lt;String, Integer&gt; entry : accessMap.getEntrySet())&#123;<br>    System.out.println(entry.getKey() + <span class="hljs-string">&quot; &quot;</span> + entry.getValue());<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Result is : </span><br><span class="hljs-comment">a 500</span><br><span class="hljs-comment">c 100</span><br><span class="hljs-comment">d 300</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><ol><li>LinkedHashMap可以应用于缓存，例如LRU缓存，下面贴出一个LRU缓存的简单实现：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 实现代码</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LRUCache</span>&lt;K, V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;K, V&gt; &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxEntries;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LRUCache</span><span class="hljs-params">(<span class="hljs-type">int</span> maxEntries)</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-number">16</span>, <span class="hljs-number">0.75f</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.maxEntries = maxEntries;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">removeEldestEntry</span><span class="hljs-params">(Entry&lt;K, V&gt; eldest)</span> &#123;<br>        <span class="hljs-keyword">return</span> size() &gt; maxEntries;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 使用示例</span><br>LRUCache&lt;String, Object&gt; cache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LRUCache</span>&lt;&gt;(<span class="hljs-number">3</span>);<br>cache.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;abstract&quot;</span>);<br>cache.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;basic&quot;</span>);<br>cache.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;call&quot;</span>);<br>cache.get(<span class="hljs-string">&quot;a&quot;</span>);<br>cache.put(<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;call&quot;</span>);<br>System.out.println(cache);<br><br><span class="hljs-comment">// 输出结果</span><br>&#123;c=call, a=<span class="hljs-keyword">abstract</span>, d=call&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-EnumMap"><a href="#3-5-EnumMap" class="headerlink" title="3.5 EnumMap"></a>3.5 EnumMap</h2><ol><li>键类型为枚举类型，除了可以使用基本的HashMap，也可以使用EnumMap；</li><li>EnumMap的好处在于，Map的所有键都是预先定义的，其次是枚举能保证一定的顺序性。示例如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Size</span> &#123;<br>    SMALL, MEDIUM, LARGE<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Clothes</span> &#123;<br>    String id;<br>    Size size;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;Size, Integer&gt; <span class="hljs-title function_">countBySize</span><span class="hljs-params">(List&lt;Clothes&gt; clothes)</span> &#123;<br>    Map&lt;Size, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EnumMap</span>&lt;&gt;(Size.class);<br>    <span class="hljs-keyword">for</span> (Clothes c : clothes) &#123;<br>        <span class="hljs-type">Size</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> c.getSize();<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> map.get(size);<br>        <span class="hljs-keyword">if</span> (count != <span class="hljs-literal">null</span>) &#123;<br>            map.put(size, count + <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            map.put(size, <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> map;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>EnumSet使用了极为精简和高效的位向量实现，位向量是计算机程序中解决问题的一种方式。</li><li>EnumSet不能通过new的方式创建，如果需要创建EnumSet对象，需要调用其内部的静态工厂方法；</li><li>位向量是用一个位表示一个元素的状态，用一组位表示一个集合的状态，每个位对应一个元素，而状态只可能有两种。</li><li>对于只有两种状态，且需要进行集合运算的数据、使用位向量进行表示、位运算进行处理。是计算机程序中常用的思维方式。</li></ol><h1 id="4-堆与优先级队列"><a href="#4-堆与优先级队列" class="headerlink" title="4 堆与优先级队列"></a>4 堆与优先级队列</h1><h2 id="4-1-完全二叉树"><a href="#4-1-完全二叉树" class="headerlink" title="4.1 完全二叉树"></a>4.1 完全二叉树</h2><ol><li>完全二叉树的特点：给定任意一个节点，可以根据其编号直接快速计算出其<strong>父节点</strong>和<strong>孩子节点</strong>的编号。<strong>例如：如果节点编号为i，则父亲节点编号为i / 2，左孩子的节点编号为2 * i，右孩子节点编号为2 * i + 1;</strong></li><li>基于上述特点，完全二叉树可以很方便的存储到一个连续数组中；</li></ol><h2 id="4-2-PriorityQueue"><a href="#4-2-PriorityQueue" class="headerlink" title="4.2 PriorityQueue"></a>4.2 PriorityQueue</h2><ol><li>PriorityQueue内部使用堆实现，可以实现很高的存取效率，逐个出队列可以得到有序，但内部不一定是有序的。基本例子如下，模拟一个任务队列，代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;<br>    <span class="hljs-type">int</span> priority; <span class="hljs-comment">// 数值越大，优先级越高</span><br>    String name; <span class="hljs-comment">// 表示任务的名称</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Comparator&lt;Task&gt; taskComparator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Task o1, Task o2)</span> &#123;<br>            <span class="hljs-keyword">if</span> (o1.getPriority() &gt; o2.getPriority()) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o1.getPriority() &lt; o2.getPriority())&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br>Queue&lt;Task&gt; tasks = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Priority</span>&lt;&gt;(<span class="hljs-number">11</span>, taskComparator);<br>tasks.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;写日记&quot;</span>));<br>tasks.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;看电视&quot;</span>));<br>tasks.offer(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Task</span>(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;写代码&quot;</span>));<br><span class="hljs-type">Task</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> tasks.poll();<br><span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span>) &#123;<br>    System.out.print(<span class="hljs-string">&quot;处理任务：&quot;</span> + task.getName() + <span class="hljs-string">&quot;, 优先级：&quot;</span> + task.getPriority());<br>    task = tasks.poll();<br>&#125;<br><span class="hljs-comment">// 结果如下：</span><br>处理任务：写代码，优先级：<span class="hljs-number">100</span><br>处理任务：写日记，优先级：<span class="hljs-number">20</span><br>处理任务：看电视，优先级：<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><ol><li>PriorityQueue有如下特点：</li></ol><ul><li>实现了优先级队列，最先出队的总是优先级最高的；</li><li>优先级相同时，内部元素不完全有序；</li><li>查询头部元素效率很高，入队、出队效率很高；</li><li>根据值查找和删除元素效率很低</li><li>具体两个应用场景：求前K个最大的元素，且数据源源不断进来或者是求数据的中间值，且数据源源不断来；</li></ul><h1 id="5-通用容器类"><a href="#5-通用容器类" class="headerlink" title="5 通用容器类"></a>5 通用容器类</h1><ol><li>Collections提供了很多针对容器接口的通用算法和功能；</li><li>容器接口有如下六种，分别是：Collection、List、Set、Queue、Deque和Map；</li><li>容器类中运用了大量的适配器模式</li></ol><ul><li>空容器方法：类似于将null或者“空”转换成一个标准的容器接口对象；例如：emptyMap, emptyList或者是emptySet;（不可变对象）</li><li>单一对象方法：讲一个单独的对象转换为一个标准的容器接口对象；例如：singletonList, singletonMap或者singletonSet;（不可变对象）</li><li>其他适配方法，例如将Map转换为Set等。</li></ul><ol><li>基本容器类都是线程不安全的，因此在不需要并发的场景下可以放心使用；</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程原理——面向对象基础</title>
    <link href="/2022/02/16/java-core/ch03/"/>
    <url>/2022/02/16/java-core/ch03/</url>
    
    <content type="html"><![CDATA[<h1 id="1-类的定义与理解"><a href="#1-类的定义与理解" class="headerlink" title="1. 类的定义与理解"></a>1. 类的定义与理解</h1><h2 id="1-1-容器的视角"><a href="#1-1-容器的视角" class="headerlink" title="1.1 容器的视角"></a>1.1 容器的视角</h2><ol><li>函数是代码的容器，而类是函数的容器；</li><li>既然类是函数的容器，应当既可以对外暴露相应的行为和操作，也可以屏蔽相应的动作和行为防止误用；</li><li>通过private关键字封装和隐藏函数的内部细节，避免被误操作，是计算机程序中的基本思维方式；</li></ol><h2 id="1-2-数据类型的视角"><a href="#1-2-数据类型的视角" class="headerlink" title="1.2 数据类型的视角"></a>1.2 数据类型的视角</h2><ol><li>类也可以看作为自定义数据类型，一个数据类型包含其基本定义以及操作；</li><li>一个表示数据类型的类可以由以下4部分构成</li></ol><ul><li>以<strong>类变量</strong>体现出的类型本身具有的属性；</li><li>以<strong>类方法</strong>体现出的类型本身具有的操作；</li><li>以<strong>实例变量</strong>体现出的类型实例具有的属性；</li><li>以<strong>实例方法</strong>体现出的类型实例具有的操作；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> x; <span class="hljs-comment">// 实例变量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> y; <span class="hljs-comment">// 实例变量</span><br>    <span class="hljs-comment">/* 实例方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">distance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Math.sqrt(x * x + y * y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>通过对象来访问和操作函数内部的数据是一种基本的面向对象思维；</li><li>一般而言，不应该将实例变量声明为public，而只应该通过对象的方法对实例变量进行操作；</li><li>静态初始化代码块在类加载的时候执行，该步骤实在任何对象创建之前，且只执行一次；</li><li>构造函数与类名相同，并且不带有返回值，构造函数隐式返回的就是实例本身；</li><li>一旦自定义构造函数，编译器将不再生成默认构造函数；</li></ol><h2 id="1-3-私有构造函数"><a href="#1-3-私有构造函数" class="headerlink" title="1.3 私有构造函数"></a>1.3 私有构造函数</h2><p>使用私有构造函数存在于以下几个场景：</p><ol><li>不能创建类的实例，类只能被静态访问；</li><li>能创建类的实例，但是只能够通过类的静态方法调用（也是单例模式常用的情景）；</li><li>只是用来被其他多个构造方法调用，用于减少重复代码；</li></ol><h2 id="1-4-总结"><a href="#1-4-总结" class="headerlink" title="1.4 总结"></a>1.4 总结</h2><p>通过<strong>类实现自定义数据类型</strong>，封装该类型的数据所具有的属性和操作，<strong>隐藏实现细节</strong>，从而在更高层次（<strong>类和对象层次</strong>，而非基本数据类型和函数层次）上<strong>考虑和操作数据</strong>，是计算机程序解决复杂问题的一种重要的思维方式。</p><h2 id="1-5-将现实问题转化为面向对象的层次"><a href="#1-5-将现实问题转化为面向对象的层次" class="headerlink" title="1.5 将现实问题转化为面向对象的层次"></a>1.5 将现实问题转化为面向对象的层次</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;设想现实问题的概念以及其所包含的属性、行为，再理清概念之间的关系，然后再定义类、属性、方法以及类与类之间的关系。概念属性和行为可能非常多，但是定义的类只需要包括与现实生活相关的问题即可。<br/><br>&nbsp;&nbsp;&nbsp;&nbsp;分解现实问题中涉及的概念以及概念之间的关系，将概念表示为多个类，通过类之间的组合表达更为复杂的概念以及概念之间的关系，是计算机程序的一种基本思维方式。</p><h1 id="2-类的继承"><a href="#2-类的继承" class="headerlink" title="2. 类的继承"></a>2. 类的继承</h1><h2 id="2-1-基本概念"><a href="#2-1-基本概念" class="headerlink" title="2.1 基本概念"></a>2.1 基本概念</h2><ol><li>使用继承可以复用代码，公共属性和行为可以放至父类中，而子类只需要关注自身特有的行为即可；</li><li>不同子类的对象注重于实现自己的行为。</li></ol><h2 id="2-2-有关继承的更多的细节"><a href="#2-2-有关继承的更多的细节" class="headerlink" title="2.2 有关继承的更多的细节"></a>2.2 有关继承的更多的细节</h2><ol><li>构造函数：由于子类继承父类需要重写父类的构造函数，如果父类构造函数调用可被子类重写的方法，则可能导致混淆，应当只调用private方法；</li><li>静态绑定是在程序编译期间决定的，而动态绑定需要等到程序运行时才决定</li><li>实例变量、静态变量、静态方法和private方法都是静态绑定的。</li><li>重载是指方法名称相同但是参数签名不同，重写是指子类重写父类相同参数签名的方法；函数的重写是动态绑定的；</li></ol><h2 id="2-3-类型转换与protected关键字"><a href="#2-3-类型转换与protected关键字" class="headerlink" title="2.3 类型转换与protected关键字"></a>2.3 类型转换与protected关键字</h2><ol><li>向上转型：子类型的对象赋值给父类型的引用变量；</li><li>向下转型：父类型的对象赋值给子类型的引用变量；</li><li>protected关键字广泛用于模板方法模式中；</li><li>可见性重写：子类重写父类方法时不降低父类方法的可见性，这样的规定是由于子类和父类属于“is-a”关系，子类必须支持父类所有对外的行为，降低可见性将导致子类对外的行为减少；</li><li>继承所带来负面影响就在于有时候我们不希望子类去复写父类的一些方法，因此可以通过final关键字实现；</li></ol><h1 id="3-类加载的过程"><a href="#3-类加载的过程" class="headerlink" title="3. 类加载的过程"></a>3. 类加载的过程</h1><h2 id="3-1-总览"><a href="#3-1-总览" class="headerlink" title="3.1 总览"></a>3.1 总览</h2><p>(1) 一个Java类所包含下列信息：</p><ul><li>静态变量</li><li>类初始化代码</li><li>静态方法</li><li>实例变量</li><li>实例初始化代码</li><li>父类信息引用</li></ul><p>(2)类初始化代码包括</p><ul><li>定义静态变量时的赋值语句</li><li>实例初始化代码块</li><li>构造函数</li></ul><p>(3)类加载的过程</p><ul><li>分配内存以及保存类的信息</li><li>给类变量赋默认值</li><li>加载父类</li><li>设置父子关系</li><li>执行类初始化代码（先执行父类，再执行子类）</li></ul><h2 id="3-2-对象创建的过程"><a href="#3-2-对象创建的过程" class="headerlink" title="3.2 对象创建的过程"></a>3.2 对象创建的过程</h2><ol><li>每个对象除了保存着类的实例变量外，还保存着实际类信息的引用；</li><li>寻找要执行的实例方法时，是从对象的实际类型信息开始找，找不到再去父类信息中寻找；</li><li>动态绑定实际就是根据对象的实际类型查找要执行的方法，子类型中找不到的时候再查找父类；</li></ol><h2 id="3-3-继承的破坏性——破坏封装"><a href="#3-3-继承的破坏性——破坏封装" class="headerlink" title="3.3 继承的破坏性——破坏封装"></a>3.3 继承的破坏性——破坏封装</h2><ol><li>继承使用不当会造成破坏。首先，当父类和子类存在实现细节上的依赖则可能出现破坏封装的行为，如果子类不知道基类实现方法的实现细节，则子类无法正确地进行扩展。</li><li>父类不能随意增加公开方法，因为给父类增加方法就是给子类增加方法，而子类可能必须要重写该方法才能确保方法的正确性；</li><li>对于子类而言，通过继承实现是没有安全保障的，因为父类修改内部实现细节，它的功能就可能会被破坏，而对于基类而言，让子类继承和重写方法，就可能丧失随意修改内部实现的自由。</li></ol><h2 id="3-4-继承的破坏性——没有反映”is-a”关系"><a href="#3-4-继承的破坏性——没有反映”is-a”关系" class="headerlink" title="3.4 继承的破坏性——没有反映”is-a”关系"></a>3.4 继承的破坏性——没有反映”is-a”关系</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;按照继承的语义来说，父类拥有的行为，子类也应该有。然而在生活中的例子总有特殊。例如鸟都是会飞的，但是企鹅也属于鸟，但是不会飞。因此父类约束子类的行为在日常中并不能完全保证。</p><h2 id="3-5-最佳实践"><a href="#3-5-最佳实践" class="headerlink" title="3.5 最佳实践"></a>3.5 最佳实践</h2><ol><li>避免使用继承——使用final关键字关闭继承；</li></ol><ul><li>给父类方法加上final关键字，父类就保留了随意修改这个方法内部实现的自由；</li></ul><ol><li>优先使用组合模式代替继承；</li></ol><ul><li>组合替代继承，使得父类的行为不在对外暴露，子类也可以实现自己的逻辑，互不影响；</li></ul><ol><li>使用接口；</li></ol><h1 id="4-接口"><a href="#4-接口" class="headerlink" title="4. 接口"></a>4. 接口</h1><h2 id="4-1-本质"><a href="#4-1-本质" class="headerlink" title="4.1 本质"></a>4.1 本质</h2><ol><li>接口是声明能力的一种方式，其只是一个对对象而言需要遵守的规定。从而衍生出一种新的计算机思维：面向接口编程；</li><li>接口更重要的意义在于降低了代码间的耦合，挺高了代码的灵活性；</li><li>接口可以多继承，也可以继承是实现并行，但是关键字==extends==要放在==implements==前面；</li></ol><h2 id="4-2-Java-8和Java-9新增的接口函数："><a href="#4-2-Java-8和Java-9新增的接口函数：" class="headerlink" title="4.2 Java 8和Java 9新增的接口函数："></a>4.2 Java 8和Java 9新增的接口函数：</h2><ol><li>新增静态方法，便于直接将函数定义在接口中；</li><li>默认方法，使用<strong>default</strong>关键字表示，有具体实现，引入默认方法主要是<strong>函数式的数据处理请求</strong>，为了给接口增加新功能；</li></ol><h2 id="4-3-总结"><a href="#4-3-总结" class="headerlink" title="4.3 总结"></a>4.3 总结</h2><p>针对接口编程是一种重要的程序思维方式，这种方式不仅可以复用代码，还可以降低耦合，提高灵活性，是分解复杂问题的一种重要工具。</p><h1 id="5-抽象类"><a href="#5-抽象类" class="headerlink" title="5. 抽象类"></a>5. 抽象类</h1><ol><li>相对于具体类而言，抽象类具有抽象的方法，可以用于表达抽象的概念。</li><li>抽象类和接口是配合而非替代关系，两者经常一起使用。接口声明能力，抽象类提供默认实现，实现全部或者部分方法，一个接口经常有一个对应的抽象类。（参见Collection接口对应的AbstractCollection)</li></ol><h1 id="6-内部类"><a href="#6-内部类" class="headerlink" title="6. 内部类"></a>6. 内部类</h1><h2 id="6-1-定义"><a href="#6-1-定义" class="headerlink" title="6.1 定义"></a>6.1 定义</h2><p>顾名思义为定义外部类内部的类称之为内部类，通过内部类可以实现对外部的完全隐藏，可以得到更好的封装性。代码实现上也会更加简洁。内部类也可以很方便地访问外部类的私有变量，可以声明为private从而实现对外完全隐藏。相关代码写在一起，写法也会更加简洁。</p><h2 id="6-2-内部类分类"><a href="#6-2-内部类分类" class="headerlink" title="6.2 内部类分类"></a>6.2 内部类分类</h2><ul><li>静态内部类：带有static关键字的内部类，如果静态内部类与外部类关系密切，且不依赖于外部实例，则可以考虑定义静态内部类；</li></ul><ol><li>Java API中Integer类内部的IntegerCache类，用于支持整数的自动装箱；</li><li>LinkedList类内部有一个私有静态内部类Node，用于表示链中的每个节点；</li><li>Character类内部有public的UnicodeBlock，用于表示一个UnicodeBlock；</li></ol><ul><li>成员内部类：无任何修饰符的内部类，成员内部类对象总是与一个外部对象相连；如果内部类和外部类关系密切，需要访问外部类的实例变量和方法，则可以考虑定义成员内部类。外部类的一些方法的返回值可能是某个接口，为了返回该接口，外部类方法可能使用内部类实现该接口。这个内部类就可以设置为private，对外完全隐藏；</li></ul><ol><li>Java API中的LinkedList类中，listIterator和descendingIterator的返回值都是接口Iterator，调用者可以通过Iterator接口对链表进行遍历，listIterator和descendingIterator内部分别使用成员内部类ListItr和DescendingIterator。</li></ol><ul><li>方法内部类：定义在方法体中的类，方法内部类可以直接访问外部类的变量以及方法（取决于是静态的还是实例的）。实际上方法内部类操作的并不是外部的变量，而是它自己的实例变量。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> String[] str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;hello&quot;</span>&#125;;<br>        <span class="hljs-comment">/* 方法内部类实例 */</span><br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">innerMethod</span><span class="hljs-params">()</span> &#123;<br>                str[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;hello world&quot;</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        inner.innerMethod();<br>        System.out.println(str[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>匿名内部类：没有具体类名关联，使用new关键字临时创建的类成为匿名内部类；匿名内部类只能被使用一次，用来创建一个对象，没有构造函数，但是可以根据参数列表调用对应父类构造方法，也可以定义实例变量和方法，可以初始化代码块。匿名内部类能做的，方法内部类都可以实现，只不过是用匿名内部类在实现上显得更加简洁一些。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> x, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-comment">/* 匿名内部类示例 */</span><br>        <span class="hljs-type">Point</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">distance</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> distance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(x, y));<br>            &#125;<br>        &#125;;<br>        System.out.println(p.distance());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java API使用中参见Arrays.sort函数。</p><h2 id="6-3-总结"><a href="#6-3-总结" class="headerlink" title="6.3 总结"></a>6.3 总结</h2><p>将程序分为保持不变的主体框架，和针对具体情况的可变逻辑，通过回调的方式进行写作，是计算机程序中的一种常见实践。匿名内部类是实现回调接口的一种简便方式。</p><h1 id="7-枚举"><a href="#7-枚举" class="headerlink" title="7. 枚举"></a>7. 枚举</h1><h2 id="7-1-使用枚举的好处"><a href="#7-1-使用枚举的好处" class="headerlink" title="7.1 使用枚举的好处"></a>7.1 使用枚举的好处</h2><ol><li>枚举使得语法更简洁；</li><li>枚举更安全，一个枚举类型的变量，值要么为null，要么为具体枚举值；</li><li>枚举自带便利方法（例如values以及valueOf和toString方法），易于使用；</li></ol><h1 id="8-异常"><a href="#8-异常" class="headerlink" title="8. 异常"></a>8. 异常</h1><h2 id="8-1-基本概念"><a href="#8-1-基本概念" class="headerlink" title="8.1 基本概念"></a>8.1 基本概念</h2><ol><li>throw关键字表示异常退出，因此出现异常的地方，后续代码都不会执行；</li><li>异常处理机制会从当前函数开始查找谁能“捕获”该异常，当前函数无法捕获则查看上一层，直至主函数。如果主函数也没有则启用默认机制。即输出至控制台。</li><li>try-with-resource语法：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useResource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">try</span>(<span class="hljs-type">AutoClosable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;hello&quot;</span>)) &#123; <span class="hljs-comment">// 创建资源</span><br>        <span class="hljs-comment">// 使用资源</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>未受检异常表示编程的逻辑错误，编程过程中应当检查以避免这种错误。无论是受检异常还是未受检异常，无论是出现在throws关键字声明中，都应该在合适的地方以适当的方式进行处理。</li></ol><h2 id="8-2-异常的使用"><a href="#8-2-异常的使用" class="headerlink" title="8.2 异常的使用"></a>8.2 异常的使用</h2><ol><li>真正出现异常的时候，应当抛出异常，而不是返回一个特殊值；</li><li>异常处理分报告恢复，报告时需说明异常出现的原因以及正确输入的范例或者格式；</li></ol><h2 id="8-3-异常的处理逻辑"><a href="#8-3-异常的处理逻辑" class="headerlink" title="8.3 异常的处理逻辑"></a>8.3 异常的处理逻辑</h2><ol><li>自己能处理的异常由自己处理，如果可通过程序自动解决的就不需要向上报告了，直接自动解决；</li><li>自己不能完全解决的，就向上报告，如果自己有额外的信息提供，有助于分析和解决问题，就应该提供，可以以原异常为cause重新抛出一个异常；</li><li>总有一层代码需要为异常负责，可能是知道处理异常的代码，也可能是面向用户的代码，也可能是主程序。如果异常不能自动解决，对于用户而言需要提供对用户有用以及有帮助的信息；对于运维人员应该输出详细的异常链和异常栈日志；</li></ol><h2 id="8-4-总结"><a href="#8-4-总结" class="headerlink" title="8.4 总结"></a>8.4 总结</h2><p>通过异常机制可以将程序正常逻辑和异常逻辑进行分离，异常情况可以集中处理，也可以自动传递。不需要每层方法都进行处理，异常也不能被自动忽略。从而处理异常的代码可以大大减少，代码的可读性、可靠性以及可维护性也会增加。</p><h1 id="9-基本类型的包装类以及String类型"><a href="#9-基本类型的包装类以及String类型" class="headerlink" title="9. 基本类型的包装类以及String类型"></a>9. 基本类型的包装类以及String类型</h1><h2 id="9-1-共性"><a href="#9-1-共性" class="headerlink" title="9.1 共性"></a>9.1 共性</h2><ol><li>均重写了Object类中的(equals，hashCode以及toString)方法；</li></ol><ul><li>equals：表示两个数值在逻辑上的相等，而非地址上的相等，因此需要重写；</li><li>hashCode：返回对象的哈希值，hashCode反映的是其在内存中的地址相同，一般equals和hashCode都需要一起重写；</li></ul><ol><li>Comparable接口，用于比较大小，在小于、等于和大于的时分别返回-1，0和1；</li><li>包装类和String</li><li>常用常量：包装类中包含一些常用的常量，例如布尔的<strong>TRUE/FALSE</strong>，整形中的<strong>MIN_VALUE</strong>和<strong>MAX_VALUE</strong>以及浮点中的<strong>POSITIVE_INFINITY（正无穷）</strong> 以及 <strong>NEGATIVE_INFINITY（负无穷）</strong>；</li><li>包装类中带有一个Number类型，可以返回任意基本数据类型；</li><li>不可变性：包装类和String声明都是final的，无法被继承；并且内部基本类型都是私有final的，并且无setter方法；<br>使用Immutable是因为可以使得程序更为简单和安全，在<strong>多线程环境下不用担心数据会被篡改</strong>；</li><li>包装类中存在一个Cache的静态内部类，用于缓存共享常量以节约内存空间，借用了享元模式；</li></ol><h1 id="10-单说String"><a href="#10-单说String" class="headerlink" title="10. 单说String"></a>10. 单说String</h1><h2 id="10-1-String类的一些特性"><a href="#10-1-String类的一些特性" class="headerlink" title="10.1 String类的一些特性"></a>10.1 String类的一些特性</h2><ol><li>String内部使用的是UTF-16BE模式编码；</li><li>同其他包装类一样，String类使用的也是不可变对象，对象一旦创建将不可再更改；定义不可变类，程序更加简洁，安全以及容易理解。但如果频繁更改字符串则会导致性能底下。</li></ol><h2 id="10-2-字符串常量"><a href="#10-2-字符串常量" class="headerlink" title="10.2 字符串常量"></a>10.2 字符串常量</h2><ol><li>如果通过字符串常量赋值，则两个String对象的内存地址都是指向同一块的；</li><li>如果是通过new的方式创建出来的字符串对象在内存中实际上两个不同的对象，因此所在的内存地址是不相同的；</li></ol><h2 id="10-3-StringBuilder与StringBuffer"><a href="#10-3-StringBuilder与StringBuffer" class="headerlink" title="10.3 StringBuilder与StringBuffer"></a>10.3 StringBuilder与StringBuffer</h2><ol><li>StringBuffer类是线程安全的，而StringBuilder是线程不安全的；</li><li>append方法使用了一种类似于指数分配长度的策略。在不知道最终需要多长的情况下，指数扩展是一种常见的策略，广泛应用于各种内存分配相关的计算机程序中。</li><li>String支持+，+=运算。由Java编译器提供支持，其会将该运算符转换成append操作；</li></ol><h1 id="11-Arrays类"><a href="#11-Arrays类" class="headerlink" title="11 Arrays类"></a>11 Arrays类</h1><h2 id="11-1-基本"><a href="#11-1-基本" class="headerlink" title="11.1 基本"></a>11.1 基本</h2><ol><li>sort排序：可以使用sort排序，默认返回从小到大排序，基本类型可以直接使用，对象类型需要实现Comparator接口，可以使用Java8的lambda表达式简化语法；</li><li>Comparator接口可以接收Collections接口中的reverse或者reverseOrder方法；</li><li>总结：传递比较器Comparator给sort方法，体现了程序设计中的一种重要方式。将不变以及变化进行分离，排序的基本步骤和算法是保持不变的。将不变的算法作为主体，而将变化的部分设计成参数，允许调用者动态绑定。也是一种常见的设计模式。</li></ol><h2 id="11-2-查找"><a href="#11-2-查找" class="headerlink" title="11.2 查找"></a>11.2 查找</h2><ol><li>Arrays方法支持很多种查找方法，包括二分查找，使用方法如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 针对基本类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> key)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(<span class="hljs-type">int</span>[] a, <span class="hljs-type">int</span> fromIndex, <span class="hljs-type">int</span> toIndex, <span class="hljs-type">int</span> key)</span>;<br><br><span class="hljs-comment">// 针对对象数组</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(Object[] a, Object key)</span>;<br><br><span class="hljs-comment">// 自定义比较器</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-type">int</span> <span class="hljs-title function_">binarySearch</span><span class="hljs-params">(T[] a, T key, Comparator&lt;? <span class="hljs-built_in">super</span> T&gt; c)</span>;<br></code></pre></td></tr></table></figure></li><li><p>需要说明的是二分查找若能找到相应的数值，返回的是其所在的索引，数值为正数；否则返回插入点的数值+1并且为负数；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 索引列表为数组下标：0, 1, 2, 3, 4</span><br><span class="hljs-comment">// 插入点列表为：0, 1, 2, 3, 4</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">13</span>, <span class="hljs-number">21</span>&#125;;<br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">3</span>); <span class="hljs-comment">// 0</span><br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">5</span>); <span class="hljs-comment">// 1</span><br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">7</span>); <span class="hljs-comment">// 2</span><br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">13</span>); <span class="hljs-comment">// 3</span><br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">21</span>); <span class="hljs-comment">// 4</span><br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">22</span>); <span class="hljs-comment">// -6 (由21的插入点为5加1得到，再取负数)</span><br>System.out.println(Arrays.binarySearch(arr, <span class="hljs-number">2</span>); <span class="hljs-comment">// -1 (插在3的前面数插入点为0，再加1取负数得到)</span><br></code></pre></td></tr></table></figure></li><li><p>理解多维数组：多维数组本质上还是一个一维数组，只是每个数组元素都可以再放一个数组，这样就构成了所谓的“多维数组”；其中对于多维数组会包括一个deepXXX的方法；</p></li><li><p>排序算法：对于基本数据类型，Java采用的是“双枢轴快速排序”算法；而对于对象类型，使用的是TimSort（Java 7引进），而TimSort实际上是对归并排序做了一系列优化。</p></li></ol><h1 id="12-时间处理"><a href="#12-时间处理" class="headerlink" title="12 时间处理"></a>12 时间处理</h1><h2 id="12-1-基本概念："><a href="#12-1-基本概念：" class="headerlink" title="12.1 基本概念："></a>12.1 基本概念：</h2><ul><li>时区：GMT为格林尼治标准时间，全球共分为24时区，中国在东八区，因此也成为GMT+8;</li><li>时刻和纪元时：按照计算机规定：1970年1月1日的0时0分0秒称之为纪元时；</li><li>年历：例如中国的公历和年历、日本的农历等等；</li></ul><h2 id="12-2-Java8之前的API支持"><a href="#12-2-Java8之前的API支持" class="headerlink" title="12.2 Java8之前的API支持"></a>12.2 Java8之前的API支持</h2><ul><li>Date：时刻，绝对时间，与年月日无关；</li><li>Calenda：年历，为抽象类；表示公历的子类为Gregorian-Calendar；</li><li>TimeZone：表示时区</li><li>Locale：表示国家（或者地区）和语言；</li></ul><h2 id="12-3-Java8之前的API局限性"><a href="#12-3-Java8之前的API局限性" class="headerlink" title="12.3 Java8之前的API局限性"></a>12.3 Java8之前的API局限性</h2><ul><li>Date中的过时方法有悖常识，因此容易被误用；</li><li>Calendar类操作繁琐，设计臃肿；</li><li>DateFormat不是线程安全的，在多线程环境中会存在问题；</li></ul><h1 id="13-随机"><a href="#13-随机" class="headerlink" title="13 随机"></a>13 随机</h1><ol><li>种子决定了随机序列的产生，种子相同，产生的随机数序列就是相同的；</li><li>指定种子是为了实现可重复的随机；</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程原理——计算机执行的二进制逻辑</title>
    <link href="/2022/02/16/java-core/ch02/"/>
    <url>/2022/02/16/java-core/ch02/</url>
    
    <content type="html"><![CDATA[<h1 id="1-二进制—计算机表示数据的方式"><a href="#1-二进制—计算机表示数据的方式" class="headerlink" title="1. 二进制—计算机表示数据的方式"></a>1. 二进制—计算机表示数据的方式</h1><h3 id="1-1-十进制表示数的方式"><a href="#1-1-十进制表示数的方式" class="headerlink" title="1.1 十进制表示数的方式"></a>1.1 十进制表示数的方式</h3><ol><li>以123来说，使用十进制表示可以写为:<br/></li></ol><script type="math/tex; mode=display">123 = 1 \times 10 ^2 + 2 \times 10 ^1 + 3 \times 10 ^ 0</script><ol><li>按照类比规则推算，N进制数字abc有如下表示，其中k为位权：</li></ol><script type="math/tex; mode=display">abc_{(N)} = a \times k^m + b \times k^{m-1} + c \times k^{m-2} + ...</script><h3 id="1-2-二进制的数字表示"><a href="#1-2-二进制的数字表示" class="headerlink" title="1.2 二进制的数字表示"></a>1.2 二进制的数字表示</h3><p>二进制的位权为2，基本数字只有0和1，整好符合计算机的高低电平。因此十进制数4可以表示为:</p><script type="math/tex; mode=display">4_{(10)} = 1 \times 2^2 + 0 \times 2^1 + 0 \times 2^0 = 100_{(2)}</script><p>十进制的负数只需要在数字前面加上负号就表示负数了，而二进制的负数与十进制类似，在最高添加一个符号为，1表示负数，0表示整数，每种类型的数据都是最左边的一位。但负数实际上不是简单的给最高位设置符号。例如：</p><ol><li>-1的8位二进制按概念应是10000001，实际上为11111111</li><li>-127的8位二进制按概念应是11111111，实际上为10000001，因此我们需要注意下列计算机表示二进制的机器码。</li></ol><ul><li>原码：符合我们==日常逻辑的编码==为原码：例如1的8位原码为<u>00000001</u>;</li><li>反码：在==原码的基础上按位取反==为反码：例如<u>00000001</u>的反码为<u>11111110</u>;</li><li>补码：在==反码的基础上再加1==就为补码：例如<u>00000001</u>的补码为<u>11111111</u>;</li></ul><p>使用补码表示是因为计算机只会计算加法，通过补码的表示计算机能够通过加法做减法运算。</p><h3 id="1-3-十六进制—二进制的简化"><a href="#1-3-十六进制—二进制的简化" class="headerlink" title="1.3 十六进制—二进制的简化"></a>1.3 十六进制—二进制的简化</h3><p>由于二进制书写不方便，加上越大的数，二进制越长，因此使用16进制来替代二进制。十六进制的数字分别为(0~9、A[10]、B[11]、C[12]、D[13]、E[14]和F[15])</p><div class="table-container"><table><thead><tr><th style="text-align:center">二进制</th><th style="text-align:center">十进制</th><th style="text-align:center">十六进制</th><th style="text-align:center">二进制</th><th style="text-align:center">十进制</th><th style="text-align:center">十六进制</th></tr></thead><tbody><tr><td style="text-align:center">1010</td><td style="text-align:center">10</td><td style="text-align:center">A</td><td style="text-align:center">1011</td><td style="text-align:center">11</td><td style="text-align:center">B</td></tr><tr><td style="text-align:center">1100</td><td style="text-align:center">12</td><td style="text-align:center">C</td><td style="text-align:center">1101</td><td style="text-align:center">13</td><td style="text-align:center">D</td></tr><tr><td style="text-align:center">1110</td><td style="text-align:center">14</td><td style="text-align:center">E</td><td style="text-align:center">1111</td><td style="text-align:center">15</td><td style="text-align:center">F</td></tr></tbody></table></div><h5 id="1-4-位运算"><a href="#1-4-位运算" class="headerlink" title="1.4 位运算"></a>1.4 位运算</h5><ol><li>左移(&lt;&lt;)：左移一位表示乘以2（高位舍去，右侧补0）；</li><li>右移(&gt;&gt;)：右移一位表示除以2（低位舍去，高位按原先补充）；</li></ol><h5 id="1-5-查看浮点数的具体二进制形式"><a href="#1-5-查看浮点数的具体二进制形式" class="headerlink" title="1.5 查看浮点数的具体二进制形式"></a>1.5 查看浮点数的具体二进制形式</h5><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs java">Integer.toBinaryString(Float.floatToIntBits(value));<br>Long.toBinaryString(Double.doubleToLongBits(value));<br></code></pre></td></tr></table></figure><h1 id="2-字符集与编码"><a href="#2-字符集与编码" class="headerlink" title="2. 字符集与编码"></a>2. 字符集与编码</h1><h5 id="2-1-非Unicode编码"><a href="#2-1-非Unicode编码" class="headerlink" title="2.1 非Unicode编码"></a>2.1 非Unicode编码</h5><ol><li><strong>ASCII：</strong>覆盖键盘上的绝大多数的字符，对美国等英语国家够用；</li><li><strong>ISO 8859-1：</strong> 在ASCII码的基础上对支持的字符集进行了扩展，新增了西欧字符；</li><li><strong>Windows-1252：</strong>在ISO 8859-1的基础上新增了欧元以及其他的符号，用途广泛；</li><li><strong>GB2312：</strong>简体中文编码规范，使用两个字节表示汉字；</li><li><strong>GBK：</strong>GB2312的扩充，支持更多的汉字编码；</li><li><strong>GB18030：</strong>在GBK的基础上扩充更多汉字编码以及中日韩统一字符，使用2~4个字节表示字符；</li><li><strong>Big5：</strong>针对繁体中文编码，用于中国香港、中国澳门和中国台湾地区；</li></ol><h5 id="2-2-Unicode编码"><a href="#2-2-Unicode编码" class="headerlink" title="2.2 Unicode编码"></a>2.2 Unicode编码</h5><p>为全世界的字符进行统一编码，它没有规定编码如何对应二进制表示。常用的字符二进制编码方案有如下几种：</p><ol><li>UTF-32：字符编号的整数二进制形式，4字节</li><li>UTF-16：变长字节表示，编号在U+0000~U+FFFF使用两字节；编号在U+10000~U+10FFFF使用四字节。使用U+D800~U+DBFF的就是4字节，否则为2字节；</li><li>UTF-8：依旧使用变长字节表示，每个字符使用的字节个数与Unicode编号的大小有关；</li></ol><h5 id="2-3-编码转换"><a href="#2-3-编码转换" class="headerlink" title="2.3 编码转换"></a>2.3 编码转换</h5><ol><li>假设字符需要从编码A转换为编码B，那么首先需要知道字符所对应的编码A的格式，通过编码A的Unicode字符映射表找到其Unicode编号，然后通过Unicode编号再查找编码B的映射表。<div class="code-wrapper"><pre class="mermaid">graph LR; 字符s的编码A --> 字符s对应Unicode的序号 --> 字符s的编码B</pre></div></li></ol><p>编码转换实际上只是改变了字符的二进制内容，但并没有改变字符看上去的样子。</p><ol><li>乱码的原因：要么是字符在不同的语言环境对应不同编码导致，要么是字符在错误的编码下又再次进行了转码导致无法恢复。</li><li>乱码的解决：第一种情况比较简单，只需要换成对应的编码即可重新查看，第二种情况就是对错误的编码进行逆向操作，从而达到恢复原先编码的问题。</li><li>使用Java恢复乱码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;value to encdoe&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(str.getBytes(<span class="hljs-string">&quot;Windows-1252&quot;</span>), <span class="hljs-string">&quot;GB18030&quot;</span>);<br>System.out.println(newStr);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java编程原理——编程基础</title>
    <link href="/2022/02/13/java-core/ch01/"/>
    <url>/2022/02/13/java-core/ch01/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Java基本数据类型"><a href="#1-Java基本数据类型" class="headerlink" title="1. Java基本数据类型"></a>1. Java基本数据类型</h1><h5 id="1-1-整数类型：包括byte-short-int和long；分别占用1-2-4和8个字节。取值范围如下："><a href="#1-1-整数类型：包括byte-short-int和long；分别占用1-2-4和8个字节。取值范围如下：" class="headerlink" title="1.1 整数类型：包括byte, short, int和long；分别占用1, 2, 4和8个字节。取值范围如下："></a>1.1 整数类型：包括byte, short, int和long；分别占用1, 2, 4和8个字节。取值范围如下：</h5><div class="table-container"><table><thead><tr><th>类型名</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>-2^7 ~ 2^(7-1)</td></tr><tr><td>short</td><td>-2^15 ~ 2^(15-1)</td></tr><tr><td>int</td><td>-2^31 ~ 2^(31-1)</td></tr><tr><td>long</td><td>-2^63 ~ 2^(63-1)</td></tr></tbody></table></div><h5 id="1-2-小数类型：有float和double，分别占用4和8个字节"><a href="#1-2-小数类型：有float和double，分别占用4和8个字节" class="headerlink" title="1.2 小数类型：有float和double，分别占用4和8个字节"></a>1.2 小数类型：有float和double，分别占用4和8个字节</h5><div class="table-container"><table><thead><tr><th>类型名</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>1.4E-45 ~ 3.4E+38<br>-3.4E+38~-1.4E-45</td></tr><tr><td>double</td><td>4.9E-324 ~ 1.7E+308<br>-1.7E+308~-4.9E-324</td></tr></tbody></table></div><h1 id="2-Java特殊数据类型"><a href="#2-Java特殊数据类型" class="headerlink" title="2. Java特殊数据类型"></a>2. Java特殊数据类型</h1><h5 id="2-1-数组类型"><a href="#2-1-数组类型" class="headerlink" title="2.1 数组类型"></a>2.1 数组类型</h5><p>数组类型在内存中有两块：一块是用于<strong>存储数组本身</strong>，另一块是用于<strong>存储数组内容的位置。</strong> 因此给数组变量赋值和给数组中的元素赋值是完全不同的两个概念。</p><h1 id="3-Java运算符"><a href="#3-Java运算符" class="headerlink" title="3. Java运算符"></a>3. Java运算符</h1><h5 id="3-1-“-”-“-“-“-”-“-“-“-”"><a href="#3-1-“-”-“-“-“-”-“-“-“-”" class="headerlink" title="3.1 “+”, “-“, “*”, “/“, “%”"></a>3.1 “+”, “-“, “*”, “/“, “%”</h5><p>运算符的使用需要注意：</p><ol><li>整数相除不是四舍五入，而是直接舍去小数位；</li><li>a++表示先使用原值a后再进行自增；a—同理；</li><li>++a表示先对原始值a进行自增再进行使用；—a同理；</li><li>a += b相当于 a = a + b; a -= b同理，同样对乘除取模运算一样；</li></ol><h1 id="4-Java逻辑运算"><a href="#4-Java逻辑运算" class="headerlink" title="4. Java逻辑运算"></a>4. Java逻辑运算</h1><ol><li>与运算符(&amp;)：两个都为true才是true，有一个为false就是false;</li><li>或运算符(|)：只要有一个为true就是true，只有都为false才是false;</li><li>非运算符(!)：true的非运算就是false，反之同理;</li><li>异或运算符(^)：相同为false，不相同就是true;</li><li>短路与(&amp;&amp;)：作用跟&amp;类似，boolean flag = a || b++ &gt; 0, 当a为true忽略后面的运算；</li><li>短路或(||)：作用于|类似，boolean flag = a &amp;&amp; b++ &gt; 0，当a为true时，忽略后面的运算；</li></ol><h1 id="5-Java条件语法"><a href="#5-Java条件语法" class="headerlink" title="5. Java条件语法"></a>5. Java条件语法</h1><ul><li>选择结构：if/else相当于三元运算符—&gt; operator ? a : b;</li><li>多重if/else if/else if/else相当于switch—&gt; switch-case语法：<figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (cond1) &#123;<br>    <span class="hljs-comment">// op1</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cond2) &#123;<br>    <span class="hljs-comment">// op2</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cond3) &#123;<br>    <span class="hljs-comment">// op3</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// op4</span><br>&#125;<br><br><span class="hljs-keyword">switch</span>(cond) &#123;<br>    <span class="hljs-keyword">case</span> cond1:<br>        <span class="hljs-comment">// op1</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> cond2:<br>        <span class="hljs-comment">// op2</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> cond3:<br>        <span class="hljs-comment">// op3</span><br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>系统层面下：if/eise使用的操作系统中的<strong>跳转指令</strong>实现的，而switch使用的是<strong>跳转表（跳转表使用二分查找实现，效率较高）</strong> 实现的。在switch分支少的情况下会使用跳转指令实现。</p><h1 id="6-Java循环语法"><a href="#6-Java循环语法" class="headerlink" title="6. Java循环语法"></a>6. Java循环语法</h1><h5 id="1-while循环"><a href="#1-while循环" class="headerlink" title="1. while循环"></a>1. while循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span> (cond) &#123;<br>    loop body<br>&#125;<br></code></pre></td></tr></table></figure><p>只要循环条件为true，就一直执行循环体内，否则就中止执行；</p><h5 id="2-do-while循环"><a href="#2-do-while循环" class="headerlink" title="2. do-while循环"></a>2. do-while循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>    loop body<br>&#125; <span class="hljs-keyword">while</span> (cond)<br></code></pre></td></tr></table></figure><p>不管循环条件是什么，循环体至少会执行一次；</p><h5 id="3-for循环"><a href="#3-for循环" class="headerlink" title="3. for循环"></a>3. for循环</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (init; cond; step) &#123;<br>    loop body<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>1.执行初始化命令；</li><li>2.检查循环条件是否为true，如果为false执行步骤6</li><li>3.循环条件为true，执行循环体；</li><li>4.执行步进操作；</li><li>5.步进操作执行结束后，跳转至步骤2</li><li>6.for循环后续的语句；</li></ul><h5 id="4-foreach语法"><a href="#4-foreach语法" class="headerlink" title="4. foreach语法"></a>4. foreach语法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (DataType element : DataTypeArr) &#123;<br>    loop body<br>&#125;<br></code></pre></td></tr></table></figure><p>每次迭代循环element时，指针会自动更新；</p><h5 id="5-循环控制"><a href="#5-循环控制" class="headerlink" title="5. 循环控制"></a>5. 循环控制</h5><ul><li>break：提前结束循环，不再执行循环体内的剩余代码；</li><li>continue:跳过循环体内剩余的代码，然后执行步进操作；</li></ul><h1 id="7-Java函数"><a href="#7-Java函数" class="headerlink" title="7. Java函数"></a>7. Java函数</h1><p>函数是一种操作，一种处理模块，也是用来减少重复代码和分解复杂操作的重要手段。</p><ol><li>函数参数支持可变长度参数，语法为在数据类型的后面加上(…)，在函数内可变长度参数可以看做是数组。<strong>可变长度参数必须是参数列表中的最后一个，一个函数也只能有一个可变长度参数</strong>。</li><li>return用于显示执行函数返回，即便函数返回值是void也可以使用return关键字。</li><li>返回值可以是数组或者是对象，根据具体需求来选择；</li><li>函数重名但是参数列表不同的现象称之为函数的重载；</li><li>函数自己调用自己的行为称之为函数的递归；递归函数实现简单，但是十分占用资源开销比较大，并且不易调试；</li><li>函数中的参数以及函数中定义的变量都是在栈中分配内存，当栈的内存不够使用后就会出现StackOverflowError错误。</li><li>函数中使用到的数组，数组的地址是在栈中分配内存，数组中的元素是在堆中分配内存。当栈中数组元素没有指向堆中的内存，JVM将会收回分配在堆中的内存。</li><li>总结：函数主要是通过内存中的栈来进行内存分配的，系统就函数调用者和函数如何使用栈做了约定，返回值可以简单地认为是通过一个专门的返回值存储器存储的。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
